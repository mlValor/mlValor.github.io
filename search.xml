<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【转载+翻译】不需要再次创建有限状态机：如何重新利用Unity的Animator</title>
      <link href="/2022/08/17/4b9f1efcb271/"/>
      <url>/2022/08/17/4b9f1efcb271/</url>
      
        <content type="html"><![CDATA[<h1 id="【转载-翻译】不需要再次创建有限状态机：如何重新利用Unity的Animator"><a href="#【转载-翻译】不需要再次创建有限状态机：如何重新利用Unity的Animator" class="headerlink" title="【转载+翻译】不需要再次创建有限状态机：如何重新利用Unity的Animator"></a>【转载+翻译】不需要再次创建有限状态机：如何重新利用Unity的Animator</h1><blockquote><p>注意事项：</p><p>原文地址：(<a href="https://medium.com/the-unity-developers-handbook/dont-re-invent-finite-state-machines-how-to-repurpose-unity-s-animator-7c6c421e5785">https://medium.com/the-unity-developers-handbook/dont-re-invent-finite-state-machines-how-to-repurpose-unity-s-animator-7c6c421e5785</a></p></blockquote><p>有限状态机是游戏开发中最受欢迎的模式之一，这是有原因的。它们可以通过鼓励模块化、可重复使用的状态来降低复杂性，并创建更多可读的程序。虽然FSM（有限状态机）不能扩展到更复杂的情况，但对于大多数常见的情况，如处理应用程序的状态或制作简单的人工智能，它们是很好的解决方案。</p><p><strong>我不会解释 FSM 的基本概念和用例，因为我认为网上已经有很多好文章，例如 <a href="http://gameprogrammingpatterns.com/state.html">这篇文章</a>来自 <a href="https://medium.com/u/6211394299c?source=post_page-----7c6c421e5785--------------------------------">Bob Nystrom</a>关于游戏编程模式的书。</strong></p><p>创建和使用FSM有两种主要的方法：写一个迅速又随性（quick  and dirty）的实现或者从资产商店买一个资产来使用。但还有第三个选择：使用Unity的内置动画系统（Mecanim）。</p><h2 id="为什么要使用Unity的动画系统？"><a href="#为什么要使用Unity的动画系统？" class="headerlink" title="为什么要使用Unity的动画系统？"></a>为什么要使用Unity的动画系统？</h2><p>重用动画系统来创建有限状态机似乎有点奇怪，但Animator本身就是个有限状态机。虽然它有动画的特定功能，但Animator系统几乎能做你想要的一切。它带有在运行时编辑和可视化状态机的工具。而且，它得到了Unity的支持，经过了数百万开发者的测试，任何你已经有的Unity动画经验都适用。</p><h2 id="为什么不构建一个迅速又随性的实现来代替呢？"><a href="#为什么不构建一个迅速又随性的实现来代替呢？" class="headerlink" title="为什么不构建一个迅速又随性的实现来代替呢？"></a>为什么不构建一个迅速又随性的实现来代替呢？</h2><p>一个迅速又随性的实现对于它所设计的任务来说是很好的，但是一旦你需要在其他地方使用这种模式，你会发现自己在不断地重写同样的代码。但Animator系统可以很容易地用可重复使用的状态行为创建不同的状态机。</p><h2 id="那么使用第三方资产怎么样？"><a href="#那么使用第三方资产怎么样？" class="headerlink" title="那么使用第三方资产怎么样？"></a>那么使用第三方资产怎么样？</h2><p>有一些第三方资产在复杂性和功能上可以与Animator系统相媲美（比如<a href="https://www.assetstore.unity3d.com/en/#!/content/14914">NodeCanvas</a>）。他们还有一个优势，就是API更干净，因为他们不处理动画。我甚至<a href="https://github.com/DarrenTsung/finite-graph-machine">建立了我自己的实现</a>，但我最终不再使用，而是重新利用了Animator。因为你要用Animator来做，嗯，动画，重新使用它来做状态机意味着你不必在两个类似的系统之间切换上下文。</p><h2 id="好吧，那我该怎么开始呢？"><a href="#好吧，那我该怎么开始呢？" class="headerlink" title="好吧，那我该怎么开始呢？"></a>好吧，那我该怎么开始呢？</h2><p>首先，我将介绍Unity动画系统（Mecanim）的基本概念。</p><ul><li>在Unity中，你可以创建一个叫做<strong>Animator Controller</strong>的资产。这是一个状态机模板。</li><li>在你的状态机里面有一些状态。你可能习惯于将状态与动画联系起来，但如果你想创建一个纯逻辑的状态机，它们实际上是可选的。</li><li>为了运行你的状态机，在一个GameObject上添加一个名为<strong>Animator</strong>的组件，并将其与你所创建的任何Animator Controller一起设置。现在这是你的状态机的<strong>实例</strong>。</li><li>为了在每个状态下运行逻辑，我们需要创建一个派生自<strong>状态机行为（StateMachineBehaviour）</strong>类的脚本。一旦我们有了这个新的行为，我们就可以把它添加到状态机内部的任何状态中。</li></ul><p>你可以更深入地阅读关于Animators的内容<a href="https://docs.unity3d.com/Manual/Animator.html">这里</a>或<a href="https://unity3d.com/learn/tutorials/topics/animation/animator-controller">在这里看一个教程</a>。</p><p><em>注意，这与MonoBehaviours的工作原理类似：脚本接收预定义的信息，如OnEnter、OnExit等。</em></p><h2 id="你是如何使用StateMachineBehaviours的？"><a href="#你是如何使用StateMachineBehaviours的？" class="headerlink" title="你是如何使用StateMachineBehaviours的？"></a>你是如何使用StateMachineBehaviours的？</h2><p>我最常使用状态来管理对象的生命周期和它们自己的行为，在继承StateMachineBehaviour时使用<strong>OnStateEnter</strong>和<strong>OnStateExit</strong>消息。例如，如果我想让我的状态监听任何游戏事件，我通常会在进入时添加监听器，在退出时删除它们。通过在退出时清理对象，你可以避免难以追踪的后遗症，比如残留的游戏对象或僵尸监听器。你不希望你的状态在不活跃的时候影响到游戏。</p><p>我发现的一个问题是，当Animator被禁用或销毁时，OnStateExit没有被调用。所以，为了正确地清理当前状态，你需要确保同时处理<strong>OnDisable</strong>。</p><p>为了节省自己的时间，我创建了一个资源库，我把它导入我的游戏中，位于 <a href="https://github.com/DarrenTsung/DTAnimatorStateMachine">这里</a>。欢迎在你自己的项目中使用它！</p><p>让我们来看看我在自己的游戏<a href="https://twitter.com/hashtag/jellyquest">Jellyquest</a>中为一个敌人创建的简单状态机。</p><p>这是愤怒的河豚。他将缓慢地旋转，直到发现玩家，然后他将迅速地朝玩家的方向推进。</p><p>河豚是一个Prefab，配置了一个名为AngryPufferfish的AnimatorController。有3种状态。瞄准，准备射击，和射击。河豚开始时处于瞄准状态，它由两个状态行为组成。<strong>RotateFacingDirection</strong>和<strong>AimInFacingDirection</strong>。</p><p><strong>RotateFacingDirection</strong>根据可配置的速度来旋转河豚。<strong>AimInFacingDirection</strong>根据射线传输来确定河豚是否面对目标。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">RotateFacingDirection</span> : <span class="title">LogicalStateMachineBehaviour</span> &#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> _rotationSpeed = <span class="number">10.0f</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AimInFacingDirection</span> : <span class="title">LogicalStateMachineBehaviour</span> &#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> LayerMask _targetLayerMask;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStateUpdate</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.Animator.SetBool(<span class="string">&quot;FacingTarget&quot;</span>, <span class="keyword">this</span>.FacingTarget());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在PreparingToShoot状态中，我重新使用了一个名为<strong>TriggerContinueAfterDelay</strong>的状态行为，并为延迟的时间设置了一个参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TriggerContinueAfterDelay</span> : <span class="title">LogicalStateMachineBehaviour</span> &#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> _delay = <span class="number">1.0f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStateEntered</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.DoAfterDelay(<span class="keyword">this</span>._delay, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.Animator.SetTrigger(<span class="string">&quot;Continue&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Shooting状态下，我使用了一个<strong>MoveInFacingDirection</strong>的状态行为，将河豚移向玩家。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MoveInFacingDirection</span> : <span class="title">LogicalStateMachineBehaviour</span> &#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> _speed = <span class="number">5.0f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStateUpdate</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.MoveInFacingDirection();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使这些行为中的每一个都具有通用性和单一用途，我可以在其他状态机中调整和重新使用它们，以创造各种不同的敌人类型。</p><h2 id="棒极了，还有什么我应该知道的吗？"><a href="#棒极了，还有什么我应该知道的吗？" class="headerlink" title="棒极了，还有什么我应该知道的吗？"></a>棒极了，还有什么我应该知道的吗？</h2><p>有一些常见的陷阱是你应该小心的。你对Animator系统越熟悉，这些就越有意义。</p><ul><li>要警惕编写可以在同一帧中多次设置一个触发器的代码。因为触发器只被一个过渡所消耗一次，所以触发器在被消耗后可能会被设置，并持续到当前状态。（这一句不是很懂，贴上原文：Because triggers are only consumed once by a transition, the  trigger might get set after being consumed and persist past the current  state.）</li><li>子状态机上的OnStateEnter和OnStateExit可能不会像你所期望的那样工作。它们只在碰到子状态机的进入和退出节点时被调用。但是这些节点可以通过直接进入一个特定的子状态或退出一个外部状态的转换而被意外地绕过。</li><li>过渡持续时间（Transition duration）应该总是被设置为零。如果过渡持续时间不为零，下一个状态的OnEnter将在当前状态的OnExit之前被调用。</li><li>使用触发器的转换（Transition）将在同一帧内推进到下一个状态。 基于其他参数类型的转换会多花一帧。</li></ul><p>TL;DR:</p><ul><li>有限状态机对于管理对象的生命周期很有用。</li><li>人们要么用代码编写自己的状态机，要么从资产商店购买第三方资产。但您也可以重新调整 Unity Animator 的用途。</li><li>Animator 带有内置的可视化、工具、过渡和熟悉的 api。</li><li>使用 Animator 很棒，但要小心一些陷阱，在上面可以获取更多详细信息！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 状态机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 架构认知 </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inspector面板高级下拉菜单绘制</title>
      <link href="/2022/08/15/aa27b6128783/"/>
      <url>/2022/08/15/aa27b6128783/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>在Inspector面板点击指定按钮，显示出高级下拉列表（类似点击Add Component后弹出的下拉列表），如下图所示：</p><img src="/2022/08/15/aa27b6128783/2-1.gif" class="" title="Inspector面板上“Add Component”按钮弹窗绘制示意图"><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>关键类： <code>AdvancedDropdown</code>，<code>AdvancedDropdownItem</code><br>关键方法： <code>BuildRoot</code>，<code>ItemSelected</code>，<code>Show</code>，<code>AddChild</code>，<code>AddSeparator</code><br>方法说明：<br>1.<code>BuildRoot</code>：重写此方法可生成下拉窗口的内容。 此方法在下拉窗口显示时调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回值：下拉选项的根选项对象</span><br><span class="line"><span class="function">AdvancedDropdownItem <span class="title">BuildRoot</span>()</span>;</span><br></pre></td></tr></table></figure><p>2.<code>ItemSelected</code>：重写此方法可在选择下拉选项时获得通知（点击目录选项不会）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：下拉选项对象</span><br><span class="line">ItemSelected(AdvancedDropdownItem item);</span><br></pre></td></tr></table></figure><p>3.<code>Show</code>:调用此方法可在给定位置显示下拉窗口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：触发下拉窗口的按钮的位置</span><br><span class="line">Show (Rect rect);</span><br></pre></td></tr></table></figure><p>4.<code>AddChild</code>:将给定的 AdvancedDropdownItem 子项添加到子项列表</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：要添加到子项列表的 <span class="function">AdvancedDropdownItem</span></span><br><span class="line"><span class="function"><span class="title">AddChild</span>(<span class="params">AdvancedDropdownItem child</span>)</span>;</span><br></pre></td></tr></table></figure><p>5.<code>AddSeparator</code>:将分隔符添加到下拉列表的子项列表中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无参</span><br><span class="line">AddSeparator();</span><br></pre></td></tr></table></figure><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><p>这边主要模拟一下我们Inspector面板上的<code>Add Component</code>按钮功能，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先建一个类继承AdvancedDropdown，用来绘制我们想要的下拉选项</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ComponentDropdown</span> : <span class="title">AdvancedDropdown</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _target; <span class="comment">//声明用来Add Component的gameObject</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, Type&gt; _types; <span class="comment">//用来存放被添加的组件类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentDropdown</span>(<span class="params">AdvancedDropdownState state, GameObject gameObject</span>) : <span class="title">base</span>(<span class="params">state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        minimumSize = <span class="keyword">new</span> Vector2(<span class="number">100f</span>, <span class="number">200f</span>);</span><br><span class="line">        _target = gameObject;</span><br><span class="line">        _types = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Type&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展方法：用来获取类型的Icon</span></span><br><span class="line">    <span class="function">Texture2D <span class="title">GetIcon</span>(<span class="params"><span class="built_in">string</span> typeName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> iconPath = typeName + <span class="string">&quot; Icon&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> texture = EditorGUIUtility.FindTexture(iconPath);</span><br><span class="line">        <span class="keyword">if</span> (texture != <span class="literal">null</span>) <span class="keyword">return</span> texture;</span><br><span class="line">        Debug.unityLogger.logEnabled = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> iconContent = EditorGUIUtility.IconContent(iconPath);</span><br><span class="line">        Debug.unityLogger.logEnabled = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (iconContent == <span class="literal">null</span>) <span class="keyword">return</span> EditorGUIUtility.FindTexture(<span class="string">&quot;cs Script Icon&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (iconContent.image == <span class="literal">null</span>) <span class="keyword">return</span> EditorGUIUtility.FindTexture(<span class="string">&quot;cs Script Icon&quot;</span>);</span><br><span class="line">        texture = iconContent.image <span class="keyword">as</span> Texture2D;</span><br><span class="line">        <span class="keyword">return</span> texture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展方法：用来向指定的父下拉选项添加子项</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddItem</span>(<span class="params">AdvancedDropdownItem parent, Type childType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> typeName = childType.Name;</span><br><span class="line">        parent.AddChild(<span class="keyword">new</span> AdvancedDropdownItem(typeName)</span><br><span class="line">        &#123;</span><br><span class="line">            icon = GetIcon(typeName), <span class="comment">//设置选项Icon</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!_types.ContainsKey(typeName))</span><br><span class="line">        &#123;</span><br><span class="line">            _types.Add(typeName, childType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写BuildRoot用来添加下拉选项</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> AdvancedDropdownItem <span class="title">BuildRoot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> root = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;组件&quot;</span>); <span class="comment">//添加根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加其他菜单选项</span></span><br><span class="line">        <span class="keyword">var</span> physicsItem = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;物理组件&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> videoItem = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;视频组件&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> eventItem = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;事件组件&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> monoItem = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;其他Mono组件&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> uiItem = <span class="keyword">new</span> AdvancedDropdownItem(<span class="string">&quot;UI组件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历当前程序集，通过反射获取部分类型</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> assembly <span class="keyword">in</span> AppDomain.CurrentDomain.GetAssemblies())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> typeList = assembly.GetTypes();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> typeList)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//剔除掉抽象类型，非公共类型，以及其他诸如接口结构体之类的类型</span></span><br><span class="line">                <span class="keyword">if</span> (!type.IsClass || type.IsAbstract || !type.IsPublic) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//剔除掉所有带“Obsolete”弃用特性的类型</span></span><br><span class="line">                <span class="built_in">object</span>[] objs = type.GetCustomAttributes(<span class="keyword">typeof</span>(ObsoleteAttribute), <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (objs.Length != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//添加物理组件类型</span></span><br><span class="line">                <span class="keyword">if</span> (type.IsSubclassOf(<span class="keyword">typeof</span>(Collider)) || type.IsSubclassOf(<span class="keyword">typeof</span>(Collider2D)) ||</span><br><span class="line">                    type == <span class="keyword">typeof</span>(Rigidbody) || type == <span class="keyword">typeof</span>(Rigidbody2D))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddItem(physicsItem, type);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//添加事件组件类型</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type.IsSubclassOf(<span class="keyword">typeof</span>(Behaviour)) &amp;&amp; type.Namespace != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                         type.Namespace.Equals(<span class="string">&quot;UnityEngine.EventSystems&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddItem(eventItem, type);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//添加UI组件类型</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type.Namespace != <span class="literal">null</span> &amp;&amp; type.Namespace.Equals(<span class="string">&quot;UnityEngine.UI&quot;</span>) &amp;&amp;</span><br><span class="line">                         type.IsSubclassOf(<span class="keyword">typeof</span>(Behaviour)))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddItem(uiItem, type);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//添加继承MonoBehaviour的类型</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type.IsSubclassOf(<span class="keyword">typeof</span>(MonoBehaviour)))</span><br><span class="line">                &#123;</span><br><span class="line">                    AddItem(monoItem, type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//添加视频类型</span></span><br><span class="line">        AddItem(videoItem, <span class="keyword">typeof</span>(VideoPlayer));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜单选项添加到根节点里头</span></span><br><span class="line">        root.AddChild(physicsItem);</span><br><span class="line">        root.AddChild(videoItem);</span><br><span class="line">        root.AddChild(eventItem);</span><br><span class="line">        root.AddChild(uiItem);</span><br><span class="line">        root.AddSeparator();</span><br><span class="line">        root.AddChild(monoItem);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写当前方法，当点击指定下拉选项时，触发添加组件的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ItemSelected</span>(<span class="params">AdvancedDropdownItem item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_types.TryGetValue(item.name, <span class="keyword">out</span> <span class="keyword">var</span> <span class="keyword">value</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            _target.AddComponent(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CustomEditor(typeof(AddComponentButton))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddComponentButtonEditor</span> : <span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ComponentDropdown _componentDropdown;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新绘制Inspector面板</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> rect = GUILayoutUtility.GetRect(<span class="keyword">new</span> GUIContent(<span class="string">&quot;添加组件&quot;</span>),<span class="keyword">new</span> GUIStyle(<span class="string">&quot;button&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(rect, <span class="keyword">new</span> GUIContent(<span class="string">&quot;添加组件&quot;</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> script = target <span class="keyword">as</span> AddComponentButton;</span><br><span class="line">            <span class="keyword">if</span> (script != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_componentDropdown == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _componentDropdown = <span class="keyword">new</span> ComponentDropdown(<span class="keyword">new</span> AdvancedDropdownState(),script.gameObject);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//显示当前下拉选项菜单</span></span><br><span class="line">                _componentDropdown.Show(rect);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之后建一个继承MonoBehaviour的脚本，用来显示绘制的东西</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddComponentButton</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 位运算符</title>
      <link href="/2022/08/15/c06be98f706f/"/>
      <url>/2022/08/15/c06be98f706f/</url>
      
        <content type="html"><![CDATA[<p>位运算符作用于位，并逐位执行操作。&amp;（AND 运算符）、 |（OR 运算符） 和 ^（异或运算符） 的真值表如下所示：</p><table><thead><tr><th>a</th><th>b</th><th>a &amp; b</th><th>a | b</th><th>a ^ b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>假设如果 A &#x3D; 21，且 B &#x3D; 13，现在以二进制格式表示，它们如下所示：</p><p>A &#x3D; 0001 0101</p><p>B &#x3D; 0000 1101</p><p>-—————-</p><p>A&amp;B &#x3D; 0000 0101</p><p>A|B &#x3D; 0001 1101</p><p>A^B &#x3D;0001 1000</p><table><thead><tr><th align="center">运算符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">~</td><td align="center">按位取反运算符是一元运算符，具有”翻转”位效果，即0变成1，1变成0，包括符号位。</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td></tr></tbody></table><p>“~”符号对有符号整型与无符号整型的处理有点不太相同。</p><p>这里继续以A &#x3D; 21为例。可以看出来，如果是无符号整数，就是按位取反，0变成1，1变成0，因为byte是无符号整型，范围0~255。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">byte</span> A = <span class="number">21</span>;<span class="comment">//A = 0001 0101</span></span><br><span class="line"><span class="built_in">byte</span> <span class="keyword">value</span> = (<span class="built_in">byte</span>)~A;<span class="comment">//1110 1010 = 234</span></span><br></pre></td></tr></table></figure><p>当A变成有符号整数时，计算方式就有些不同，因为存在符号位。</p><p>当A为非负数的时候，如下所示：</p><p>解法①：</p><p>非负数 0001 0101 </p><p>-&gt;(得到补码，非负数的原码，反码，补码都一样) 0001 0101 </p><p>-&gt;(取反，得到新的补码)1110 1010 </p><p>-&gt;(求反码，因为是负数，所以从反码变成补码，需要末尾-1) 1110 1001 </p><p>-&gt;(求原码，因为是负数，所以需要取反全部的反码，才是原码) 0001 0110 </p><p>&#x3D; -22<br>解法②：非负数 最后一位补1，改成负数 - 0001 0110 &#x3D; -22 </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">short</span> A = <span class="number">21</span>;<span class="comment">//A =0001 0101</span></span><br><span class="line"><span class="built_in">short</span> <span class="keyword">value</span> = (<span class="built_in">short</span>)~A;<span class="comment">//- 0001 0110 = -22</span></span><br></pre></td></tr></table></figure><p>当A为负数的时候，如下所示：</p><p>解法①：</p><p>负数 - 0001 0101 </p><p>-&gt;(得到补码，负数需要原码变成反码后末尾补1) 1110 1011</p><p>-&gt;(取反，得到新的补码)0001 0100</p><p>-&gt;(求反码，因为是非负数，所以反码跟补码一样) 0001 0100</p><p>-&gt;(求原码，因为是非负数，所以原码跟反码一样) 0001 0100 </p><p>&#x3D; 20</p><p>解法②：负数，最后一位减1，改成正数 0001 0100 &#x3D; 20</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">short</span> A = <span class="number">-21</span>; <span class="comment">// - 0001 0101</span></span><br><span class="line"><span class="built_in">short</span> <span class="keyword">value</span> = (<span class="built_in">short</span>)~A;<span class="comment">// 0001 0100 = 20</span></span><br></pre></td></tr></table></figure><p>-—————-</p><p>左移，右移运算符也跟整型的位数有关。理论上左移跟右移可以理解成“乘以2”与“除以2”，但是又不太相同。</p><p>假设A &#x3D; 85;</p><p>A &lt;&lt; 3 &#x3D; 85 * 2 * 2 * 2 &#x3D; 680</p><p>从0000 0000 0101 0101 左移3位，变成了 0000 0010 1010 1000。</p><p>但是当A为byte类型的时候，最大值只有255。</p><p>那么左移三位，就是：0101 0101 -&gt; 1010 1000 &#x3D; 168</p><p>右移同理。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API备忘录</title>
      <link href="/2022/08/11/4277ec9a3263/"/>
      <url>/2022/08/11/4277ec9a3263/</url>
      
        <content type="html"><![CDATA[<h2 id="Animator"><a href="#Animator" class="headerlink" title="Animator"></a>Animator</h2><h4 id="1-RuntimeAnimatorController-animationClips"><a href="#1-RuntimeAnimatorController-animationClips" class="headerlink" title="1.RuntimeAnimatorController.animationClips"></a>1.RuntimeAnimatorController.animationClips</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检索控制器使用的所有 AnimationClip</span></span><br><span class="line"><span class="comment">//下标是根据加入的前后顺序 去判断的，这个是不区分层级，不区分动画的状态</span></span><br><span class="line">AnimationClip clip = ani.runtimeAnimatorController.animationClips[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h4 id="2-Animator-GetCurrentAnimatorClipInfo"><a href="#2-Animator-GetCurrentAnimatorClipInfo" class="headerlink" title="2.Animator.GetCurrentAnimatorClipInfo"></a>2.Animator.GetCurrentAnimatorClipInfo</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数是表示层级，获取当前层级播放的动画，返回一个数组，</span></span><br><span class="line"><span class="comment">//只有在获取到的是blendtree的时候数组长度才会是&gt;1的(blendtree中正在播放的动画有几个这个长度就是几)</span></span><br><span class="line">AnimationClipInfo[] clipInfos = animator.GetCurrentAnimatorClipInfo(layerIndex);</span><br><span class="line">AnimationClipInfo clipInfo = clipInfos[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="Mathf"><a href="#Mathf" class="headerlink" title="Mathf"></a>Mathf</h2><h3 id="1-Mathf-DeltaAngle"><a href="#1-Mathf-DeltaAngle" class="headerlink" title="1.Mathf.DeltaAngle"></a>1.Mathf.DeltaAngle</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算以度为单位的两个给定角度之间的最短差。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">DeltaAngle</span>(<span class="params"><span class="built_in">float</span> current, <span class="built_in">float</span> target</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(Mathf.DeltaAngle(<span class="number">1080</span>, <span class="number">90</span>));<span class="comment">//输出90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="2-Mathf-LerpAngle"><a href="#2-Mathf-LerpAngle" class="headerlink" title="2.Mathf.LerpAngle"></a>2.Mathf.LerpAngle</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与 Lerp 相同，但确保值在 360 度环绕时正确插值。</span></span><br><span class="line"><span class="comment">//参数 t 被限制在 [0, 1] 范围内。 变量 a 和 b 以度为单位。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">LerpAngle</span>(<span class="params"><span class="built_in">float</span> a, <span class="built_in">float</span> b, <span class="built_in">float</span> t</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="Quaternion"><a href="#Quaternion" class="headerlink" title="Quaternion"></a>Quaternion</h2><h4 id="1-Quaternion-AngleAxis"><a href="#1-Quaternion-AngleAxis" class="headerlink" title="1.Quaternion.AngleAxis"></a>1.Quaternion.AngleAxis</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建围绕axis旋转angle度的四元数</span></span><br><span class="line"><span class="comment">//个人理解：创建一个围绕axis向量的四元数，然后相对于这个四元数旋转的角度，就是angle。最后得出来的返回值，就是一个基于世界坐标系的旋转后角度（四元数）</span></span><br><span class="line"><span class="comment">//angle 旋转角度的量值</span></span><br><span class="line"><span class="comment">//axis 被围绕的旋转轴</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Quaternion <span class="title">AngleAxis</span>(<span class="params"><span class="built_in">float</span> angle, Vector3 axis</span>)</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-Quaternion-LookRotation与Quaternion-FromToRotation"><a href="#2-Quaternion-LookRotation与Quaternion-FromToRotation" class="headerlink" title="2.Quaternion.LookRotation与Quaternion.FromToRotation"></a>2.Quaternion.LookRotation与Quaternion.FromToRotation</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建具有指定向前和向上方向的旋转四元数</span></span><br><span class="line"><span class="comment">//Z 轴将与向前对齐，X 轴将与向前和向上之间的叉积对齐，Y 轴将与 Z 和 X 之间的叉积对齐。</span></span><br><span class="line"><span class="comment">//如果 forward 的幅度为零，则返回标识。</span></span><br><span class="line"><span class="comment">//如果向前和向上共线，或者向上的幅度为零，则结果与 Quaternion.FromToRotation 相同，其中 fromDirection 设置为正 Z 轴 (0, 0, 1)，toDirection 设置为规范化的向前方向。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Quaternion <span class="title">LookRotation</span>(<span class="params">Vector3 forward, Vector3 upwards = Vector3.up</span>)</span>;</span><br><span class="line"></span><br><span class="line">/创建从 fromDirection 到 toDirection 的旋转。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Quaternion <span class="title">FromToRotation</span>(<span class="params">Vector3 fromDirection, Vector3 toDirection</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标方向 Vector3 target = new Vector3(1, 1, 1);</span></span><br><span class="line"><span class="comment">//FromToRotation</span></span><br><span class="line">Quaternion ToRotation = Quaternion.FromToRotation(Vector3.forward, target);</span><br><span class="line">Vector3 forward1 = ToRotation * Vector3.forward;</span><br><span class="line">Vector3 up1 = ToRotation * Vector3.up;</span><br><span class="line">Vector3 right1 = ToRotation * Vector3.right;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LookRotation Quaternion lookRotation = Quaternion.LookRotation(target);</span></span><br><span class="line">Vector3 forward2 = lookRotation * Vector3.forward;</span><br><span class="line">Vector3 up2 = lookRotation * Vector3.up;</span><br><span class="line">Vector3 right2 = lookRotation * Vector3.right;</span><br></pre></td></tr></table></figure><p>两种方式得到的结果完全不一样。</p><p>一 .LookRotation 几何意义是朝向变化（默认会保持在forward轴的旋转为0）–多用与角色朝向<br>二. FromToRotation 几何意义只是描述向量1 转向向量2的旋转四元素 两者没有任何直接关系。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity四元数，欧拉角，矩阵欧拉角</title>
      <link href="/2022/08/11/50042a392484/"/>
      <url>/2022/08/11/50042a392484/</url>
      
        <content type="html"><![CDATA[<h2 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h2><p>优点：三个角度组成，直观，容易理解。</p><p>优点：可以进行从一个方向到另一个方向旋转大于180度的角度。</p><p>优点：由三个数字实现旋转效率相比要高。</p><p>弱点：死锁问题。</p><h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><p>内部由四个数字（在Unity中称为x，y，z和w）组成，然而这些数字不表示角度或轴，并且通常不需要直接访问它们。除非你特别有兴趣深入了解四元数学，你只需要知道四元数表示三维空间中的旋转，你通常不需要知道或修改x，y和z属性。</p><p>优点：四元旋转不存在万向节锁问题。</p><p>优点：存储空间小，计算效率高。</p><p>弱点：单个四元数不能表示在任何方向上超过180度的旋转。</p><p>弱点：四元数的数字表示不直观。</p><h2 id="矩阵旋转"><a href="#矩阵旋转" class="headerlink" title="矩阵旋转"></a>矩阵旋转</h2><p>优点：与四元数一样，不存在万向节锁问题</p><p>优点：可以表示围绕任意轴的旋转，四元数的旋转轴均为通过物体中心点的轴，矩阵则不受限</p><p>缺点：矩阵旋转使用4x4矩阵，记录16个数值，而四元数只需要4个数值。计算复杂，效率低。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity本地离线文档开启卡顿解决</title>
      <link href="/2022/08/11/3bb87375cdd3/"/>
      <url>/2022/08/11/3bb87375cdd3/</url>
      
        <content type="html"><![CDATA[<p>这是因为每一页都会访问GOOGLE的域名，解决办法有两种，一种是断网使用，另一种是删除.html文件中的所有相关脚本</p><p>这里提供一个批量删除.html文件中所有相关脚本的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFile</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rootFilePath = <span class="string">@&quot;D:\Unity\Unity文档\2021.2文档&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> htmlFilePath <span class="keyword">in</span> System.IO.Directory.EnumerateFiles(rootFilePath, <span class="string">&quot;*.html&quot;</span>, System.IO.SearchOption.AllDirectories))</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">var</span> htmlText = System.IO.File.ReadAllText(htmlFilePath);</span><br><span class="line">        <span class="keyword">var</span> newHtmlText = htmlText.Replace(<span class="string">&quot;&lt;/script&gt;&lt;link href=\&quot;https://fonts.googleapis.com/css?family=Roboto&amp;amp;display=swap\&quot; rel=\&quot;stylesheet\&quot;&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        newHtmlText = newHtmlText.Replace(<span class="string">&quot;&lt;/script&gt;&lt;link href=\&quot;https://fonts.googleapis.com/css?family=Roboto&amp;amp;display=swap\&quot; rel=\&quot;stylesheet\&quot; /&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.IO.File.WriteAllText(htmlFilePath, newHtmlText, System.Text.Encoding.UTF8);</span><br><span class="line">    &#125;</span><br><span class="line">    Debug.LogError(<span class="string">&quot;完成！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity特殊文件夹名称说明</title>
      <link href="/2022/08/11/55d8054a1558/"/>
      <url>/2022/08/11/55d8054a1558/</url>
      
        <content type="html"><![CDATA[<p>通常可为创建的文件夹选择任何名称来组织 Unity 项目。但是，Unity 会将许多文件夹名称解释为应以特殊方式处理文件夹内容的指令。例如，必须将 Editor 脚本放在名为 <strong>Editor</strong> 的文件夹中才能使这些脚本正常工作。</p><p>本页面包含 Unity 使用的特殊文件夹名称的完整列表。</p><h4 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h4><p><strong>Assets</strong> 文件夹是包含 Unity 项目使用的资源的主文件夹。Editor 中的 Project 窗口的内容直接对应于 Assets 文件夹的内容。大多数 API 函数都假定所有内容都位于 Assets 文件夹中，因此不要求显式提及该文件夹。但是，有些函数需要将 Assets 文件夹作为路径名的一部分添加（例如，AssetDatabase 类中的一些函数）。</p><h4 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h4><p>放在名为 <strong>Editor</strong> 的文件夹中的脚本被视为 Editor 脚本而不是运行时脚本。这些脚本在开发期间向 Editor 添加功能，并在运行时在构建中不可用。</p><p>可在 Assets 文件夹中的任何位置添加多个 Editor 文件夹。应将 Editor 脚本放在 Editor 文件夹内或其中的子文件夹内。</p><p>Editor 文件夹的具体位置会影响其脚本相对于其他脚本的编译时间（有关此方面的完整说明，请参阅特殊文件夹和脚本编译顺序的相关文档）。使用 Editor 脚本中的 EditorGUIUtility.Load 函数可从 Editor 文件夹中的 Resources 文件夹加载资源。这些资源只能通过 Editor 脚本加载，并会从构建中剥离。</p><p><strong>注意：</strong>如果脚本位于 Editor 文件夹中，Unity 不允许将派生自 MonoBehaviour 的组件分配给游戏对象。</p><h4 id="Editor-Default-Resources"><a href="#Editor-Default-Resources" class="headerlink" title="Editor Default Resources"></a>Editor Default Resources</h4><p>Editor 脚本可以使用通过 EditorGUIUtility.Load 函数按需加载的资源文件。此函数在名为 <strong>Editor Default Resources</strong> 的文件夹中查找资源文件。</p><p>只能有一个 Editor Default Resources 文件夹，且必须将其放在项目的根目录；直接位于 Assets 文件夹中。将所需的资源文件放在此 Editor Default Resources 文件夹内或其中的子文件夹内。如果资源文件位于子文件夹中，请始终在传递给 EditorGUIUtility.Load 函数的路径中包含子文件夹路径。</p><h4 id="Gizmos"><a href="#Gizmos" class="headerlink" title="Gizmos"></a>Gizmos</h4><p>Gizmos 允许将图形添加到 Scene 视图，以帮助可视化不可见的设计细节。Gizmos.DrawIcon 函数在场景中放置一个图标，作为特殊对象或位置的标记。必须将用于绘制此图标的图像文件放在名为 <strong>Gizmos</strong> 的文件夹中，这样才能被 DrawIcon 函数找到。</p><p>只能有一个 Gizmos 文件夹，且必须将其放在项目的根目录；直接位于 Assets 文件夹中。将所需的资源文件放在此 Gizmos 文件夹内或其中的子文件夹内。如果资源文件位于子文件夹中，请始终在传递给 Gizmos.DrawIcon 函数的路径中包含子文件夹路径。</p><h4 id="Plug-ins"><a href="#Plug-ins" class="headerlink" title="Plug-ins"></a>Plug-ins</h4><p>可为项目添加插件来扩展 Unity 的功能。插件是通常用 C&#x2F;C++ 编写而成的本机 DLL。这些插件可以访问第三方代码库、系统调用和其他 Unity 内置功能。请始终将插件放在名为 <strong>Plugins</strong> 的文件夹中，这样才能被 Unity 检测到。</p><p>只能有一个 Plugins 文件夹，且必须将其放在项目的根目录；直接位于 Assets 文件夹中。</p><p>请参阅特殊文件夹和脚本编译顺序以了解有关此文件夹如何影响脚本编译的更多信息；并参阅 Plugin Inspector 以了解有关管理不同目标平台的插件的更多信息。</p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>可从脚本中按需加载资源，而不必在场景中创建资源实例以用于游戏。为此，应将资源放在一个名为 <strong>Resources</strong> 的文件夹中。通过使用 Resources.Load 函数即可加载这些资源。</p><p>可在 Assets 文件夹中的任何位置添加多个 Resources 文件夹。将所需的资源文件放在 Resources 文件夹内或其中的子文件夹内。如果资源文件位于子文件夹中，请始终在传递给 Resources.Load 函数的路径中包含子文件夹路径。</p><p>请注意，如果 Resources 文件夹是 Editor 的子文件夹，则其中的资源可通过 Editor 脚本加载，但会从构建中剥离。</p><h4 id="Standard-Assets"><a href="#Standard-Assets" class="headerlink" title="Standard Assets"></a>Standard Assets</h4><p>导入标准资源包（菜单：<strong>Assets</strong> &gt; Import Package__）时，资源将放在一个名为 Standard Assets__ 的文件夹中。除了包含资源之外，这些文件夹还会对脚本编译顺序产生影响；请参阅关于特殊文件夹和脚本编译顺序的页面以了解更多详细信息。</p><p>只能有一个 Standard Assets 文件夹，且必须将其放在项目的根目录；直接位于 Assets 文件夹中。将所需的资源文件放在此 Standard Assets 文件夹内或其中的子文件夹内。</p><h4 id="StreamingAssets"><a href="#StreamingAssets" class="headerlink" title="StreamingAssets"></a>StreamingAssets</h4><p>尽管将资源直接合并到构建中更为常见，但有时可能希望资源以其原始格式作为单独的文件提供。例如，需要从文件系统访问视频文件，而不是用作 MovieTexture 在 iOS 上播放该视频。将一个文件放在名为 <strong>StreamingAssets</strong> 的文件夹中，这样就会将其按原样复制到目标计算机，然后就能从特定文件夹中访问该文件。请参阅关于流媒体资源 (Streaming Assets) 的页面以了解更多详细信息。</p><p>只能有一个 StreamingAssets 文件夹，且必须将其放在项目的根目录；直接位于 Assets 文件夹中。将所需的资源文件放在此 StreamingAssets 文件夹内或其中的子文件夹内。如果资源文件位于子文件夹中，请始终在用于引用流媒体资源的路径中包含子文件夹路径。</p><h4 id="隐藏的资源"><a href="#隐藏的资源" class="headerlink" title="隐藏的资源"></a>隐藏的资源</h4><p>在导入过程中，Unity 完全忽略 <strong>Assets</strong> 文件夹（或其子文件夹）中的以下文件和文件夹：</p><ul><li><p>隐藏的文件夹。</p></li><li><p>以“**.**”开头的文件和文件夹。</p></li><li><p>以“**~**”结尾的文件和文件夹。</p></li><li><p>名为 <strong>cvs</strong> 的文件和文件夹。</p></li><li><p>扩展名为 <strong>.tmp</strong> 的文件。</p></li></ul><p>这是为了防止导入由操作系统或其他应用程序创建的特殊文件和临时文件。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity踩坑记录</title>
      <link href="/2022/08/11/35fbf9bf3237/"/>
      <url>/2022/08/11/35fbf9bf3237/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Canvas设置overrideSorting无效的解决方案"><a href="#1-Canvas设置overrideSorting无效的解决方案" class="headerlink" title="1.Canvas设置overrideSorting无效的解决方案"></a>1.Canvas设置overrideSorting无效的解决方案</h2><h4 id="问题：需要手动通过代码添加Canvas并且设置SortOrder，但是发现设置无效"><a href="#问题：需要手动通过代码添加Canvas并且设置SortOrder，但是发现设置无效" class="headerlink" title="问题：需要手动通过代码添加Canvas并且设置SortOrder，但是发现设置无效"></a>问题：需要手动通过代码添加Canvas并且设置SortOrder，但是发现设置无效</h4><hr><h4 id="原因1："><a href="#原因1：" class="headerlink" title="原因1："></a>原因1：</h4><h5 id="首先需要判断当前挂载的GameObject是否刚生成，如果是刚生成的话，因为默认是在世界节点下，此时overrideSorting属性不允许修改，所以设置无效"><a href="#首先需要判断当前挂载的GameObject是否刚生成，如果是刚生成的话，因为默认是在世界节点下，此时overrideSorting属性不允许修改，所以设置无效" class="headerlink" title="首先需要判断当前挂载的GameObject是否刚生成，如果是刚生成的话，因为默认是在世界节点下，此时overrideSorting属性不允许修改，所以设置无效"></a>首先需要判断当前挂载的GameObject是否刚生成，如果是刚生成的话，因为默认是在世界节点下，此时overrideSorting属性不允许修改，所以设置无效</h5><h4 id="解决1："><a href="#解决1：" class="headerlink" title="解决1："></a>解决1：</h4><h5 id="解决方案就是，生成后延迟一帧设置，或着是设置到指定父物体下后去设置"><a href="#解决方案就是，生成后延迟一帧设置，或着是设置到指定父物体下后去设置" class="headerlink" title="解决方案就是，生成后延迟一帧设置，或着是设置到指定父物体下后去设置"></a>解决方案就是，生成后延迟一帧设置，或着是设置到指定父物体下后去设置</h5><hr><h4 id="原因2："><a href="#原因2：" class="headerlink" title="原因2："></a>原因2：</h4><h5 id="当前挂载的GameObject需要处于active状态，如果没有处于active状态（当前物体activeSelf-x3D-x3D-true，父物体-activeSelf-x3D-x3D-false也算）-则设置无效"><a href="#当前挂载的GameObject需要处于active状态，如果没有处于active状态（当前物体activeSelf-x3D-x3D-true，父物体-activeSelf-x3D-x3D-false也算）-则设置无效" class="headerlink" title="当前挂载的GameObject需要处于active状态，如果没有处于active状态（当前物体activeSelf &#x3D;&#x3D; true，父物体 activeSelf &#x3D;&#x3D; false也算）,则设置无效"></a>当前挂载的GameObject需要处于active状态，如果没有处于active状态（当前物体activeSelf &#x3D;&#x3D; true，父物体 activeSelf &#x3D;&#x3D; false也算）,则设置无效</h5><h4 id="解决2："><a href="#解决2：" class="headerlink" title="解决2："></a>解决2：</h4><h5 id="解决方案是，在设置之前进行一次检测，检测不通过，就先激活一下GameObject再修改值，最后再重置GameObject的状态"><a href="#解决方案是，在设置之前进行一次检测，检测不通过，就先激活一下GameObject再修改值，最后再重置GameObject的状态" class="headerlink" title="解决方案是，在设置之前进行一次检测，检测不通过，就先激活一下GameObject再修改值，最后再重置GameObject的状态"></a>解决方案是，在设置之前进行一次检测，检测不通过，就先激活一下GameObject再修改值，最后再重置GameObject的状态</h5><h2 id="2-Unity-HideInInspector踩坑"><a href="#2-Unity-HideInInspector踩坑" class="headerlink" title="2.Unity HideInInspector踩坑"></a>2.Unity HideInInspector踩坑</h2><p>Unity的Inspector面板上可以显示我们所序列化的数据。</p><p>然而当我们不想把我们想要的序列化数据暴露在Inspector面板上时，可以利用<strong>【HideInInspector】特性</strong>，隐藏当前数据。</p><p>然而这一隐藏有个弊端，就是，Inspector的Debug模式，也会无法看到当前数据，对调试十分不便。</p><h2 id="3-Unity卡死解决方案"><a href="#3-Unity卡死解决方案" class="headerlink" title="3.Unity卡死解决方案"></a>3.Unity卡死解决方案</h2><h3 id="1-Unity2019未响应，重启开不起来"><a href="#1-Unity2019未响应，重启开不起来" class="headerlink" title="1.Unity2019未响应，重启开不起来"></a>1.Unity2019未响应，重启开不起来</h3><p>偶尔UnityEditor出现未响应的情况，只能强制结束，重启后发现一直进不去，但后台进程是有Unity.exe的。解决方案：</p><p>删除以下文件夹，重启</p><p>C:\Users\用户名\AppData\Local\Unity</p><p>C:\Users\用户名\AppData\LocalLow\Unity</p><h3 id="2-Unity-Hub-打开低版本的Unity项目会闪退回Hub界面（比如打开2017-4-2f）"><a href="#2-Unity-Hub-打开低版本的Unity项目会闪退回Hub界面（比如打开2017-4-2f）" class="headerlink" title="2.Unity Hub 打开低版本的Unity项目会闪退回Hub界面（比如打开2017.4.2f）"></a>2.Unity Hub 打开低版本的Unity项目会闪退回Hub界面（比如打开2017.4.2f）</h3><p>碰到这种情况，极有可能是许可证的激活问题，需要手动打开旧版本的Unity登录激活一下许可证，之后再用Hub就能打开了</p><h3 id="3-偶尔Unity里面不知道改了什么代码出现了-Made-a-Backup-Go-Ahead的字眼点击后，再也开不起工程"><a href="#3-偶尔Unity里面不知道改了什么代码出现了-Made-a-Backup-Go-Ahead的字眼点击后，再也开不起工程" class="headerlink" title="3.偶尔Unity里面不知道改了什么代码出现了 Made a Backup,Go Ahead的字眼点击后，再也开不起工程"></a>3.偶尔Unity里面不知道改了什么代码出现了 Made a Backup,Go Ahead的字眼点击后，再也开不起工程</h3><p>如果碰到这种情况，可以删除工程根目录下的Library文件重新进入</p><h2 id="4-Unity如何准确的在Hierachy面板上搜索Scene依赖"><a href="#4-Unity如何准确的在Hierachy面板上搜索Scene依赖" class="headerlink" title="4.Unity如何准确的在Hierachy面板上搜索Scene依赖"></a>4.Unity如何准确的在Hierachy面板上搜索Scene依赖</h2><h4 id="需求-查询脚本-Controller-cs在TestScene挂载的GameObject对象"><a href="#需求-查询脚本-Controller-cs在TestScene挂载的GameObject对象" class="headerlink" title="需求:查询脚本 Controller.cs在TestScene挂载的GameObject对象"></a>需求:查询脚本 Controller.cs在TestScene挂载的GameObject对象</h4><hr><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="1-找到脚本的相对路径：Assets-x2F-Scripts-x2F-Controller-cs"><a href="#1-找到脚本的相对路径：Assets-x2F-Scripts-x2F-Controller-cs" class="headerlink" title="1.找到脚本的相对路径：Assets&#x2F;Scripts&#x2F;Controller.cs"></a>1.找到脚本的相对路径：Assets&#x2F;Scripts&#x2F;Controller.cs</h5><h5 id="2-在Hierachy面板上的搜索框输入：ref-Assets-x2F-Scripts-x2F-Controller-cs，即可找到该脚本挂载的GameObject对象"><a href="#2-在Hierachy面板上的搜索框输入：ref-Assets-x2F-Scripts-x2F-Controller-cs，即可找到该脚本挂载的GameObject对象" class="headerlink" title="2.在Hierachy面板上的搜索框输入：ref:Assets&#x2F;Scripts&#x2F;Controller.cs，即可找到该脚本挂载的GameObject对象"></a>2.在Hierachy面板上的搜索框输入：ref:Assets&#x2F;Scripts&#x2F;Controller.cs，即可找到该脚本挂载的GameObject对象</h5><h5 id="3-如果是高版本Unity，可以通过对脚本右键，选择Find-References-In-Scene，一样会自动执行步骤2"><a href="#3-如果是高版本Unity，可以通过对脚本右键，选择Find-References-In-Scene，一样会自动执行步骤2" class="headerlink" title="3.如果是高版本Unity，可以通过对脚本右键，选择Find References In Scene，一样会自动执行步骤2"></a>3.如果是高版本Unity，可以通过对脚本右键，选择Find References In Scene，一样会自动执行步骤2</h5><h5 id="4-如果是资源文件，或者Prefab，同样可以通过步骤3来完成查找场景依赖"><a href="#4-如果是资源文件，或者Prefab，同样可以通过步骤3来完成查找场景依赖" class="headerlink" title="4.如果是资源文件，或者Prefab，同样可以通过步骤3来完成查找场景依赖"></a>4.如果是资源文件，或者Prefab，同样可以通过步骤3来完成查找场景依赖</h5><h2 id="5-Unity在Editor模式下的Screen-width和Screen-height会被鼠标聚焦窗口所影响发生变化"><a href="#5-Unity在Editor模式下的Screen-width和Screen-height会被鼠标聚焦窗口所影响发生变化" class="headerlink" title="5.Unity在Editor模式下的Screen.width和Screen.height会被鼠标聚焦窗口所影响发生变化"></a>5.Unity在Editor模式下的Screen.width和Screen.height会被鼠标聚焦窗口所影响发生变化</h2><p><font size = 5> 当我们在**<font color = red>Editor</font><strong>模式下，测试某些操作可能会需要用到</strong><font color = red>Screen.width</font><strong>跟</strong><font color = red>Screen.height</font>** </font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> width;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> height;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">width = Screen.width;</span><br><span class="line">height = Screen.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/11/35fbf9bf3237/1-1.gif" class="" title="1-1"><p><font size = 5>可以从上面GIF看出，**当鼠标从Game视图移动到Scene视图时，<font color = red>Screen.width</font>与<font color = red>Screen.height</font>的值会发生<font color = red>变化</font>**。</font></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asmdef文件(程序集定义文件 Assembly Definition File)详解</title>
      <link href="/2022/08/11/b669316eaa86/"/>
      <url>/2022/08/11/b669316eaa86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>.asmdef是Unity2017.3增加的功能。得益于此功能，开发者可以在一个文件夹中自定义程序集。定义明晰的依赖关系，可以确保脚本更改后，只会重新生成必需的程序集，减少编译时间。</p><p>项目越大脚本越多，编译时间必然会越长。在进行项目迭代时，这很容易制约效率，因此设置好程序集定义文件可以提高工作效率，减少脚本编译的时间。</p><p>![1-1](asmdef文件(程序集定义文件 Assembly Definition File)详解&#x2F;1-1.png)</p><p>如上图，如果你仅更改了Main.dll中的脚本，其它程序集都不需要重新编译。由于Main.dll包含的脚本更少，因此它的编译速度比Assembly-CSharp.dll更快。 同样，Stuff.dll的更改仅会导致Main.dll和Stuff.dll重新编译。</p><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><p>通过 Assets &gt; Create &gt; Assembly Definition菜单来创建，文件扩展名为.asmdef。我们称之为ADF文件。<br>ADF文件会把其所在文件夹下的脚本打入同一个程序集中。</p><h3 id="多层级ADF"><a href="#多层级ADF" class="headerlink" title="多层级ADF"></a>多层级ADF</h3><p>如果一个文件夹及子文件夹中，有多个ADF，每个脚本被添加到离这个脚本最短路径的ADF中去。<br>如果你搞不清楚一个脚本究竟被包含在了哪个ADF中，只需要选中这个脚本，在Inspector面板中就会清楚的看到</p><h3 id="设置引用"><a href="#设置引用" class="headerlink" title="设置引用"></a>设置引用</h3><p>如本文开头提到的，我在一个已经打成ADF的脚本中调用另一个程序集中的单例类，那么就必须为该ADF添加对单例类所在程序集的引用。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>若你的Unity项目分为美术工程和客户端工程，一定要有一致的ADF文件。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写出坑害你同事的代码</title>
      <link href="/2022/08/11/c7a62384c6d3/"/>
      <url>/2022/08/11/c7a62384c6d3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-除法替换成乘法"><a href="#1-除法替换成乘法" class="headerlink" title="1.除法替换成乘法"></a>1.除法替换成乘法</h3><p>案例：有两个屏幕分辨率比例(16:9)跟(25:10)，我想要计算两个不同屏幕分辨率的倍率。</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> scaler = (<span class="number">16</span> / <span class="number">9</span>) / (<span class="number">25</span> / <span class="number">10</span>);<span class="comment">//除法做法，理解容易（×）</span></span><br><span class="line"><span class="built_in">float</span> scaler2 = (<span class="number">16</span> * <span class="number">10</span>) / (<span class="number">9</span> * <span class="number">25</span>);<span class="comment">//将其中某个除法改成了乘法，理解难度一下子就上去了（√）</span></span><br></pre></td></tr></table></figure><h3 id="2-do-while-false-写法"><a href="#2-do-while-false-写法" class="headerlink" title="2.do{}while(false)写法"></a>2.do{}while(false)写法</h3><p>案例：我们经常会需要进行一些嵌套的if判断，以下给出伪代码。</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嵌套if做法，理解容易（×）</span></span><br><span class="line"><span class="keyword">if</span>(子弹进入角色身体)&#123;</span><br><span class="line">   <span class="keyword">if</span>(角色身上没有护甲)&#123;</span><br><span class="line">       <span class="keyword">if</span>(角色血量大于<span class="number">2</span>)&#123;</span><br><span class="line">           扣血--</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//do&#123;&#125;while写法，莫名其妙写三个if跳出，混淆视线，阅读难度+1（√）</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(子弹没进入角色身体) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(角色身上有护甲) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(角色血量小于等于<span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">    扣血--</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="3-提前简化公式，不写完整思路"><a href="#3-提前简化公式，不写完整思路" class="headerlink" title="3.提前简化公式，不写完整思路"></a>3.提前简化公式，不写完整思路</h3><p>案例：有一个需求，我们有个最小值min，和一个最大值max，想通过一个区间[0,1]的进度percent来获取这两个值的中间指定进度值。</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单做法，利用二元一次方程式y = kx +b，将对应的值代入求k跟b,最后直接利用得到的公式求解，理解清晰（×）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">float</span> x1, <span class="built_in">float</span> y1, <span class="built_in">float</span> x2, <span class="built_in">float</span> y2, <span class="built_in">float</span> percent</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> k = (y2 - y1) / (x2 - x1);<span class="comment">//利用y2 = kx2 + b减去y1 =kx1 + b可以得出</span></span><br><span class="line">    <span class="built_in">float</span> b = y1 - k * x1;<span class="comment">//直接代入任意已知值就行</span></span><br><span class="line">    <span class="keyword">return</span> k * percent + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">float</span> <span class="keyword">value</span> = GetValue(<span class="number">0</span>, min, <span class="number">1</span>, max, <span class="number">0.5f</span>); <span class="comment">//这样就能得到中间指定进度值</span></span><br><span class="line"><span class="comment">//恶意做法，直接提前算好公式，一句话带过，阅读难度+1（√）</span></span><br><span class="line"><span class="built_in">float</span> <span class="keyword">value</span> = (max -min) * percent + min;<span class="comment">//因为是区间0~1，所以b的值可以直接得出为min，之后直接等式相减然后简化，就是这个公式了</span></span><br><span class="line"><span class="comment">//更恶意写法，直接调用差值API，没有任何注释和说明，阅读难度+2（√）</span></span><br><span class="line"><span class="built_in">float</span> <span class="keyword">value</span> = Mathf.Lerp(min,max,percent);<span class="comment">//利用Unity的API</span></span><br></pre></td></tr></table></figure><h3 id="4-利用多余的-配合同名变量制造陷阱"><a href="#4-利用多余的-配合同名变量制造陷阱" class="headerlink" title="4.利用多余的{}配合同名变量制造陷阱"></a>4.利用多余的{}配合同名变量制造陷阱</h3><p>案例：在一个Update方法里面写滑动判断的时候，需要获取滑动对象的坐标，这里就可以利用这个操作</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_dragging &amp;&amp; _velocity != <span class="number">0f</span>)&#123;</span><br><span class="line">        Vector3 position = _camTran.position;<span class="comment">//这里需要获取滑动对象的坐标</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... <span class="comment">//中间略干代码</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//正道做法，直接再来一个if，理解清晰（×）</span></span><br><span class="line">    <span class="keyword">if</span>(_dragging)&#123;</span><br><span class="line">        Vector3 position = _camTran.position;<span class="comment">//这里y需要获取滑动对象的坐标</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//邪道做法，在return的下面，再加一个大括号，然后来一个同名变量，只要中间的代码过长。当有人把&#123;&#125;移除，就会报错，恶意+1（√）</span></span><br><span class="line">    <span class="keyword">if</span>(!_dragging) <span class="keyword">return</span>;</span><br><span class="line">    &#123;</span><br><span class="line">       Vector3 position = _camTran.position; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-部分关键字前后颠倒不妨碍编译"><a href="#5-部分关键字前后颠倒不妨碍编译" class="headerlink" title="5.部分关键字前后颠倒不妨碍编译"></a>5.部分关键字前后颠倒不妨碍编译</h3><p>案例：我们平常可能会在继承的脚本里重载一些方法，或着是声明静态方法，可以这么写</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大家常用写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;&#125;<span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>&#123;&#125;<span class="comment">//重载方法</span></span><br><span class="line"><span class="comment">//但是可以把前面两个关键字反过来</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>&#123;&#125;</span><br><span class="line"><span class="comment">//也可以混合交替使用，让人应接不暇，通过障眼法故意混淆视线！</span></span><br></pre></td></tr></table></figure><h3 id="6-函数式编程，lambda-Func结合，其乐无穷"><a href="#6-函数式编程，lambda-Func结合，其乐无穷" class="headerlink" title="6.函数式编程，lambda+Func结合，其乐无穷"></a>6.函数式编程，lambda+Func结合，其乐无穷</h3><p>案例：众所周知，a+b这种简单的加法运算，一般都能通过一行代码调用轻松写好。那么有没有什么办法可以增加这种运算逻辑的抽象程度呢？答案是有！</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大家常用的写法</span></span><br><span class="line"><span class="keyword">value</span> = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">value</span> = Add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line"><span class="comment">//函数式编程写法</span></span><br><span class="line"><span class="comment">//利用lambda表达式配合Func，完成一个套娃委托</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; <span class="keyword">add</span> = a =&gt; b =&gt; a + b;</span><br><span class="line"><span class="keyword">value</span> = <span class="keyword">add</span>(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">value</span> = Add(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//这里写Add方法，主要是用来阐明这个写法在普通方法里的思路</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">int</span> b</span>)</span>&#123; <span class="keyword">return</span> a + b;&#125;</span><br><span class="line">    <span class="keyword">return</span> GetValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-位运算，与-或-异或-再加个位移"><a href="#7-位运算，与-或-异或-再加个位移" class="headerlink" title="7.位运算，与 或 异或 再加个位移"></a>7.位运算，与 或 异或 再加个位移</h3><p>如果不加注释说明的话，位运算只会让代码变成谜语人，一举一动都跟猜谜一样。</p><p>案例：a*2，是一种很简单的乘法运算，但是有没有什么可以减少计算量，并且抽象的写法呢？具体如下。</p><p>做法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用写法</span></span><br><span class="line"><span class="keyword">value</span> = a * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//歪门邪道做法</span></span><br><span class="line"><span class="keyword">value</span> = a &lt;&lt; <span class="number">1</span>;<span class="comment">//利用左移运算符，这个的值，是等价的</span></span><br></pre></td></tr></table></figure><h3 id="8-所有数字变量都用double定义"><a href="#8-所有数字变量都用double定义" class="headerlink" title="8.所有数字变量都用double定义"></a>8.所有数字变量都用double定义</h3><p>这种是纯粹的害人不浅了，这个的威力可能没那么快体现，但内存消耗越来越大，后面想优化得每行代码看过去。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给自定义的Package包创建Demo案例</title>
      <link href="/2022/08/11/9a5533278c31/"/>
      <url>/2022/08/11/9a5533278c31/</url>
      
        <content type="html"><![CDATA[<p><strong>1.首先将我们的Demo案例处理好，并整理到一个文件夹内，文件夹可以自由命名</strong></p><img src="/2022/08/11/9a5533278c31/1-1.png" class="" title="1-1"><p><strong>2.找到自定义的Package包地址并打开，一般在<font color = red>[工程路径]&#x2F;Packages目录</font>下</strong></p><p><strong>3.查看目录下是否存在类似结构的名称：<font color = red>[文件名]~</font>，如果不存在的话自己创建一个，并将我们整理好的Demo文件夹放入</strong></p><img src="/2022/08/11/9a5533278c31/1-2.png" class="" title="1-2"><img src="/2022/08/11/9a5533278c31/1-3.png" class="" title="1-3"><p><strong>4.一般自定义的Package包目录下都会有一个<font color = red>package.json</font>文件，将其打开编辑，一般是如下格式，如果不存在samples部分的话，复制下面的描述</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;包的名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具的名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具的描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="comment">//工具版本号</span></span><br><span class="line">  <span class="attr">&quot;unity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019.4&quot;</span><span class="punctuation">,</span> <span class="comment">//unity版本号</span></span><br><span class="line">  <span class="attr">&quot;samples&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo的描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo的路径&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="/2022/08/11/9a5533278c31/1-4.png" class="" title="1-4"><p><strong>这里假定我们Package包目录下的<font color = red>[文件名]<del></font>为<font color = red>Sample</del></font>，并且我们整理好的Demo文件名称为<font color = red>Demo</font>，那么path路径就如下所示：</strong></p><p><strong>path路径：”<font color = red>Samples~&#x2F;Demo</font>“</strong></p><p><strong>5.最后在PackageManager里打开对应的插件，就可以看到下面出现了Samples面板，并且可以导入案例到项目工程当中</strong></p><img src="/2022/08/11/9a5533278c31/1-5.png" class="" title="1-5">]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于UNITY_EDITOR使用的一些思考</title>
      <link href="/2022/08/11/2b1a8ca2658c/"/>
      <url>/2022/08/11/2b1a8ca2658c/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p> 在程序中我们想要根据不同的运行环境去执行不同的代码时使用。比如我们在PC上和安卓上需要执行不同的代码，我们就可以使用Unity自带的宏定义来区分。</p><p>编写方式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    Debug.Log(<span class="string">&quot;UNITY_EDITOR&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> UNITY_ANDROID</span></span><br><span class="line">    Debug.Log(<span class="string">&quot;UNITY_ANDROID&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>最近在开发场景数据读取的编辑器工具的时候，碰上了一些问题，为了能够识别数据，以字符串作为key的形式，来为每一条数据进行了标记。然而这些字符串信息，在游戏正式环境下，是不需要的。只是为了方便编辑器工具的显示。</p><p>然而这些数据也不能简单的放到Editor文件夹中，因为在mono类里面实际上会对这些数据进行调用（只在编辑器里头使用），而且大家都存好的数据，总不能说挪掉就挪掉吧，所以还得从别的方向下手。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>当时一直在思考，是否存在一种优化的方式，毕竟真的打包运行游戏，这些序列化的数据，就是平白无故的占用内存。</p><p>直到，在写某一行<code>#region</code>代码的时候，忽然意识到，虽然我不能把那些序列化数据丢到Editor文件夹下面，但是我可以通过宏定义的方式，来让那些数据在非Editor模式下不生效！</p><p>就像是一道光在脑中闪过！似乎可以这样！</p><p>假设说原先的类是这样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyData</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Key;</span><br><span class="line">    <span class="keyword">public</span> Object Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那<code>Key</code>实际上是不需要的东西，经过一番修改：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyData</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Key;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">public</span> Object Data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子Key实际上，只在编辑器模式下生效，打包以后，就不再生效，代码也不会运行到它！优化效果达到！</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>既然数据可以通过这种方式，来进行剔除，那么我们是不是可以做一些更加机智的操作，比如对接口，例子如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假如说，在编辑器模式下，我们的类需要继承一个IData接口，但是这个接口在运行模式是不必要的东西，里面的方法，也不需要</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyData</span></span><br><span class="line">    : <span class="title">IData</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这么修改：(这样接口就不生效了！)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyData</span></span><br><span class="line">#<span class="title">if</span> <span class="title">UNITY_EDITOR</span></span><br><span class="line">    : <span class="title">IData</span></span><br><span class="line">#<span class="title">endif</span>        </span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM 局部安装</title>
      <link href="/2022/08/06/da295b66f175/"/>
      <url>/2022/08/06/da295b66f175/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局安装 hexo</span></span><br><span class="line">npm install -g hexo</span><br><span class="line"> </span><br><span class="line"><span class="comment">#局部安装</span></span><br><span class="line">npm install hexo <span class="comment">##安装在当前目录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs常见错误解决</title>
      <link href="/2022/08/06/ccce16d64409/"/>
      <url>/2022/08/06/ccce16d64409/</url>
      
        <content type="html"><![CDATA[<h2 id="1-报错：npm-WARN-config-global-–global-–local-are-deprecated-Use-–location"><a href="#1-报错：npm-WARN-config-global-–global-–local-are-deprecated-Use-–location" class="headerlink" title="1.报错：npm WARN config global –global, –local are deprecated. Use –location"></a>1.报错：npm WARN config global –global, –local are deprecated. Use –location</h2><p>第一步：找到安装的目录，并打开要修改的2个配置文件（npm.cmd 和 npm)如下图：</p><img src="/2022/08/06/ccce16d64409/nodejs%E7%9B%AE%E5%BD%95.png" class="" title="nodejs目录"><p>第二步：进行修改</p><p>初次打开可能没有修改权限，在属性里面改一下即可</p><p>将prefix -g替换为prefix –location&#x3D;global</p><img src="/2022/08/06/ccce16d64409/nodejs-npm%E6%96%87%E4%BB%B6.png" class="" title="nodejs-npm文件"><img src="/2022/08/06/ccce16d64409/nodejs-npm.md%E6%96%87%E4%BB%B6.png" class="" title="nodejs-npm.md文件"><p>第三步：测试</p><p>修改完之后、关闭之前的命令行窗口。重新打开一个新的命令行窗口，检查一下。如果还有报错，则继续修改下面的<strong>npx文件</strong>与<strong>npx.cmd文件</strong></p><img src="/2022/08/06/ccce16d64409/npm%E7%89%88%E6%9C%AC%E5%91%BD%E4%BB%A4%E9%AA%8C%E8%AF%81.png" class="" title="npm版本命令验证">]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recorder插件</title>
      <link href="/2022/07/31/a63cd3bb4349/"/>
      <url>/2022/07/31/a63cd3bb4349/</url>
      
        <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><blockquote><p>注意： Recorder只能在 Unity Editor 中使用。</p></blockquote><p>Unity Recorder 允许您在Play模式期间从Unity 编辑器捕获和保存数据：动画、视频、图像、音频等。</p><p>相对于直接录屏的优点：</p><ul><li><p>可以直接录Game视图，还可以录不同相机的视图（需要给相机设置Tag）</p></li><li><p>可以自定义输出分辨率，不再受限于屏幕的分辨率</p></li><li><p>支持多种类型的输出（Animation Clip、视频、序列帧，GIF等）</p></li></ul><p>缺点：</p><ul><li><p>不能像一些录屏软件那样，边录屏边对屏幕进行图画（进行标记，写字啥的），只能后期处理</p></li><li><p>默认情况下录不了鼠标（需要手动调用API：<code>Cursor.SetCursor(&lt;texture&gt;, &lt;hotspot&gt;, &lt;CursorMode&gt;)</code>，才能看见鼠标）</p></li><li><p>没做特殊处理的情况下不能录制外部音源</p></li></ul><h2 id="二-快速上手"><a href="#二-快速上手" class="headerlink" title="二.快速上手"></a>二.快速上手</h2><h3 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1.简单使用"></a>1.简单使用</h3><p>①.首先要打开录制面板：<strong>菜单栏 -&gt; Window -&gt; General -&gt; Recorder -&gt; Recorder window</strong></p><p><img src="/Recorder/Recorder-%E9%9D%A2%E6%9D%BF%E5%9C%B0%E5%9D%80.png" alt="Recorder-面板地址"></p><p>②.点击<strong>Add Recorder</strong>，添加一个录制类型，这里选择<strong>Movie</strong>。</p><p><img src="/Recorder/Recorder-%E5%BD%95%E5%88%B6%E7%B1%BB%E5%9E%8B.png" alt="Recorder-录制类型"></p><p>③.点击**<font color =red>START RECORDING</font>按钮<strong>，或着</strong><font color = red>Play</font>按钮<strong>来进行视频录制。一般</strong><font color =red>没特殊需求，使用默认配置</font>**即可。</p><p><img src="/Recorder/Recorder-Movie%E9%9D%A2%E6%9D%BF.png" alt="Recorder-Movie面板"></p><p>④.视频的输出目录，可以通过点击**<font color = blue>蓝色边框区域</font>快捷按钮**开启。</p><h3 id="2-设置录制源"><a href="#2-设置录制源" class="headerlink" title="2.设置录制源"></a>2.设置录制源</h3><p><img src="/Recorder/Recorder-Movie%E9%9D%A2%E6%9D%BF-Source.png" alt="Recorder-Movie面板-Source"></p><p>Recorder录屏有多种不同的录制方式：</p><p><strong>Game View</strong>：录制源为整个Game视窗</p><p><strong>Targeted Camera</strong>：将录制源改成场景相机</p><ul><li>ActiveCamera：使用当前Acitve的相机</li><li>MainCamera：使用tag为MainCamera的相机</li><li>TaggedCamera：使用与GameObject标签匹配的第一个相机</li></ul><p><strong>360 View（部分太抽象，用的机翻）</strong>：</p><ul><li>Output Dimensions：输出尺寸，360 度视频的宽度和高度（以像素为单位）</li><li>Cube Map Size：立体贴图大小，360 度视频的立方体贴图的边长（以像素为单位）</li><li>Record in Stereo：立体音响，分别录制 360 度视频的左右立体视图。Recorder将两个视图包含在同一图像中：左视图位于顶部，右视图位于底部</li><li>Stereo Separation：立体声分离，所选摄像机 Y 轴上左右视图之间的角度</li></ul><p><strong>Render Texture Asset</strong>：将录制源设置为指定的RenderTexture</p><ul><li>Render Texture：将需要录制的RenderTexture拖入即可</li></ul><p><strong>Texture Sampling</strong>：</p><ul><li>Aspect Ratio：宽高比，输出的宽高比</li><li>Supersampling Grid：超级采样网格，用于超级采样模式的子像素网格的大小。</li><li>Rendering Resolution：渲染分辨率，采样输入的分辨率</li><li>Output Resolution：输出分辨率，采样输出的分辨率</li></ul><p><strong>其他参数说明:</strong></p><ul><li>Include UI：在录制中包含UI对象（只有ActiveCamera模式才有用）</li><li>Filp Vertical：垂直翻转最终输出的视频</li></ul><h3 id="3-设置录制的分辨率"><a href="#3-设置录制的分辨率" class="headerlink" title="3.设置录制的分辨率"></a>3.设置录制的分辨率</h3><p><img src="/Recorder/Recorder-%E5%BD%95%E5%88%B6%E5%88%86%E8%BE%A8%E7%8E%87.png" alt="Recorder-录制分辨率"></p><p>Recorder可以通过调整<strong>Cpature</strong>下拉面板里的<strong>Output Resolution</strong>参数来设置不同的分辨率。</p><p>默认状况下是：<strong>Match Window Size（匹配当前Game视图的分辨率）</strong>,如果有特殊的分辨率需求，除了官方提供好的几个选项外，可以选择<strong>Custom</strong>来自定义分辨率参数。</p><h3 id="4-设置录制的视频格式以及质量"><a href="#4-设置录制的视频格式以及质量" class="headerlink" title="4.设置录制的视频格式以及质量"></a>4.设置录制的视频格式以及质量</h3><p><img src="/Recorder/Recorder-%E8%A7%86%E9%A2%91%E8%B4%A8%E9%87%8F%E8%AE%BE%E7%BD%AE.png" alt="Recorder-视频质量设置"></p><p><strong>Media File Format：</strong>媒体文件格式，记录输出的文件编码格式，默认为<strong>H265.MP4</strong></p><p><strong>Quality：</strong>输出视频的质量，有中，高，低，三种选择</p><h3 id="5-设置导出的文件名称"><a href="#5-设置导出的文件名称" class="headerlink" title="5.设置导出的文件名称"></a>5.设置导出的文件名称</h3><p><img src="/Recorder/Recorder-%E8%BE%93%E5%87%BA%E9%9D%A2%E6%9D%BF.png" alt="Recorder-输出面板"></p><p><strong>File Name：</strong>输出文件的名称。主要包括普通文本和动态占位符（使用“+Wildcards（通配符）”按钮）。</p><p><strong>Path：</strong>Recorder保存输出文件的文件夹路径，目录的绝对路径会直接显示在下一行。这里简单介绍下路径选项。</p><p><img src="/Recorder/Recorder-%E8%BE%93%E5%87%BA%E6%A0%B9%E7%9B%AE%E5%BD%95.png" alt="Recorder-输出根目录"></p><p><strong><font color = red>红色区域</font>：</strong>根目录选项，指定输出路径相对于哪个根位置的选项（或者该路径是绝对路径）</p><ul><li>Project：项目文件的相对路径（Assets目录的父级）</li><li>Assets Folder：Assets目录下的相对路径</li><li>Streaming Assets：StreamingAssets目录下的相对路径</li><li>Persistent Data：PersistentData目录下的相对路径</li><li>Temporary Cache：Temporary Cache目录下的相对路径</li><li>Absolute：绝对路径</li></ul><p><strong><font color = green>绿色区域</font>：</strong>子文件夹名称，如果为空，则会直接创建在上面**<font color = red>红色区域</font><strong>所指定的目录下。不为空，则会输出到</strong><font color = red>红色区域</font>**所指定的目录下对应名称的文件夹。</p><p><strong>Take Number</strong>： Recorder用于对记录进行编号的值。 每次录制后增加1。与**<font color =red>&lt;Take&gt;</font>通配符关联**。</p><h3 id="6-其他说明"><a href="#6-其他说明" class="headerlink" title="6.其他说明"></a>6.其他说明</h3><h4 id="①-录制类型介绍"><a href="#①-录制类型介绍" class="headerlink" title="①.录制类型介绍"></a>①.录制类型介绍</h4><p>Unity Recorder 默认包括以下Recorder类型：</p><ul><li><p><strong>Animation Clip</strong>：生成 Unity 动画格式（.anim 扩展名）的动画剪辑。</p></li><li><p><strong>Movie</strong>：生成  H.265 MP4、H.264 MP4、VP9 WebM 或 ProRes QuickTime 格式的视频。</p></li><li><p><strong>Image Sequence</strong>：生成 JPEG、PNG 或 EXR (OpenEXR) 格式的图像文件序列。</p></li><li><p><strong>GIF Animation</strong>：生成动画 GIF 文件。</p></li><li><p><strong>Audio</strong>：生成 WAV 格式的音频剪辑。</p></li></ul><h4 id="②-录制面板介绍"><a href="#②-录制面板介绍" class="headerlink" title="②.录制面板介绍"></a>②.录制面板介绍</h4><p><img src="/Recorder/Recorder-%E5%BD%95%E5%88%B6%E9%9D%A2%E6%9D%BF.png" alt="Recorder-录制面板"></p><p><strong>Play按钮</strong>：开始录制视频。如果尚未运行场景，它会自动播放当前场景</p><p><strong>START RECORDING</strong>：与<strong>Play按钮</strong>功能相同</p><p><strong>Exit Play Mode</strong>：录制停止时退出播放模式</p><p><strong>Recording Mode</strong>：指定录制固定帧或录制固定的时间段</p><ul><li><strong>Manual</strong>：手动录制模式，记录开始和停止之间的每一帧</li><li><strong>Single Frame</strong>：根据指定的帧号记录一帧（比如说，填10，那么就会在开始录制之后的第10帧停止，并且只会记录第10帧，不会记录前几帧，有点类似截屏）</li><li><strong>Frame Interval</strong>：根据指定的起始帧号和结束帧号记录帧间隔内的所有帧（起始帧-&gt;终止帧，如果填【10，20】，那么会在开始录制的第10帧开始记录，到20帧后录制停止）</li><li>**Time Interval(sec)**：根据指定的开始时间和结束时间记录一个时间间隔内的所有帧（起始秒-&gt;终止秒）</li></ul><p>![Recorder-Recording Mode](Recorder&#x2F;Recorder-Recording Mode.png)</p><p><strong>Playback</strong>：录制时使用的帧率类型：Constant（恒定的）或Variable（变化的）</p><ul><li><strong>Constant</strong>：即使实际帧速率较低或较高，帧速率在录制过程中也不会发生变化</li><li><strong>Variable</strong>：应用程序的帧速率，在录制过程中可能会有所不同。 并非所有Recorder都支持此选项</li></ul><p><strong>TargetFPS</strong>：用于录制的恒定帧速率，与捕获源的帧速率无关（可以理解为每秒录制的帧数）</p><p><strong>Cap FPS</strong>：当捕获源的帧速率快于目标帧速率时，限制它的帧速率</p><h4 id="③-Animation-Clip参数说明"><a href="#③-Animation-Clip参数说明" class="headerlink" title="③.Animation Clip参数说明"></a>③.Animation Clip参数说明</h4><p><img src="/Recorder/Recorder-AnimationClip%E9%9D%A2%E6%9D%BF.png" alt="Recorder-AnimationClip面板"></p><p><strong>Capture面板</strong>：</p><p><strong>GameObject</strong>：需要录制Animation Clip的对象</p><p><strong>Recorded Components</strong>：要录制的游戏组件（GameObject上的），可以选择多个组件</p><p><strong>Record Hierarchy</strong>：将目标对象的所有子物体一起进行录制</p><p><strong>Clamped Tangents</strong>：启用后，将生成的动画关键点切线设置为 ClampedAuto，否则设置为 Auto（旧版）</p><p><strong>Anim.Compression</strong>：用来压缩录制的动画曲线数据的关键帧缩减水平</p><h4 id="④-Image-Sequence参数说明"><a href="#④-Image-Sequence参数说明" class="headerlink" title="④.Image Sequence参数说明"></a>④.Image Sequence参数说明</h4><p><img src="/Recorder/Recorder-ImageSequence%E9%9D%A2%E6%9D%BF.png" alt="Recorder-ImageSequence面板"></p><p><strong>Format面板</strong>：</p><p><strong>Media File Format</strong>：记录输出的文件编码格式</p><p><strong>Include Alpha</strong>：图片中包括Alpha通道。在高清渲染管道（HDRP）中，你需要将缓冲区格式设置为R16G16B16A16</p><p><strong>Compression</strong>：使用EXR格式时要应用的数据压缩方法</p><p><strong>Color Space</strong>：在输出图像中使用的色彩空间（gamma曲线，gamut）。如果你选择了一个选项来获得非箝制值，你必须： （1）使用高清渲染管道（HDRP）； （2）在你的场景中禁用任何色调映射； （3）在选定的相机上禁用抖动。</p><h4 id="⑤-GIF-Animation参数说明"><a href="#⑤-GIF-Animation参数说明" class="headerlink" title="⑤.GIF Animation参数说明"></a>⑤.GIF Animation参数说明</h4><p><img src="/Recorder/Recorder-GIFAnimation%E9%9D%A2%E6%9D%BF.png" alt="Recorder-GIFAnimation面板"></p><p><strong>Format面板</strong>：</p><p><strong>Quality</strong>：GIF图片的采样精度，值越高图片越清晰</p><p><strong>Frame Rate</strong>：GIF帧率</p><p><strong>Loop</strong>：是否循环</p><h4 id="⑥-如何录制鼠标"><a href="#⑥-如何录制鼠标" class="headerlink" title="⑥.如何录制鼠标"></a>⑥.如何录制鼠标</h4><p>录制鼠标需要手动调用Unity API接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursor.SetCursor(Texture2D,Vector2,CursorMode);</span><br></pre></td></tr></table></figure><h4 id="⑦-在开着Recorder窗口的时候，可以用快捷键F10开启录制"><a href="#⑦-在开着Recorder窗口的时候，可以用快捷键F10开启录制" class="headerlink" title="⑦.在开着Recorder窗口的时候，可以用快捷键F10开启录制"></a>⑦.在开着Recorder窗口的时候，可以用快捷键F10开启录制</h4>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ILRuntime优化以及注意事项</title>
      <link href="/2022/07/11/8737eb127630/"/>
      <url>/2022/07/11/8737eb127630/</url>
      
        <content type="html"><![CDATA[<h2 id="1-不要使用foreach"><a href="#1-不要使用foreach" class="headerlink" title="1.不要使用foreach"></a>1.不要使用foreach</h2><h2 id="2-如果有遍历需求，尽量把数组的Length或着List的Count存下来"><a href="#2-如果有遍历需求，尽量把数组的Length或着List的Count存下来" class="headerlink" title="2.如果有遍历需求，尽量把数组的Length或着List的Count存下来"></a>2.如果有遍历需求，尽量把数组的Length或着List的Count存下来</h2><h2 id="3-不要额外声明Unity里的结构体类型作为局部变量"><a href="#3-不要额外声明Unity里的结构体类型作为局部变量" class="headerlink" title="3.不要额外声明Unity里的结构体类型作为局部变量"></a>3.不要额外声明Unity里的结构体类型作为局部变量</h2><p><strong>错误：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 targetPos = moveVelocity * moveSpeedScale * deltaTime; <span class="comment">//在ILRuntime里面相当于new了一个对象</span></span><br><span class="line">transform.position += targetPos;</span><br></pre></td></tr></table></figure><p><strong>正确：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.position += moveVelocity * moveSpeedScale * deltaTime;</span><br></pre></td></tr></table></figure><h2 id="4-如果有多个float跟Vector3进行相乘，需要先进行float运算"><a href="#4-如果有多个float跟Vector3进行相乘，需要先进行float运算" class="headerlink" title="4.如果有多个float跟Vector3进行相乘，需要先进行float运算"></a>4.如果有多个float跟Vector3进行相乘，需要先进行float运算</h2><p><strong>错误：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vector3 moveVelocity;</span><br><span class="line"><span class="built_in">float</span> moveSpeedScale;</span><br><span class="line"><span class="built_in">float</span> deltaTime;</span><br><span class="line">Vector3 targetPos = moveVelocity * moveSpeedScale * deltaTime;<span class="comment">//这个相当于，moveVelocity * moveSpeedScale创建了一个Vector3，之后又就行了一次Vector3乘法，因为是Vector3 * float * float</span></span><br></pre></td></tr></table></figure><p><strong>正确：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vector3 moveVelocity;</span><br><span class="line"><span class="built_in">float</span> moveSpeedScale;</span><br><span class="line"><span class="built_in">float</span> deltaTime;</span><br><span class="line">Vector3 targetPos = moveSpeedScale * deltaTime * moveVelocity;<span class="comment">//这样写的话，只会创建1次Vector3，因为是float * float * Vector3</span></span><br></pre></td></tr></table></figure><h2 id="5-尽量少用主工程的值类型（int，float之类的C-基本类型没事），因为这会导致多余的开销"><a href="#5-尽量少用主工程的值类型（int，float之类的C-基本类型没事），因为这会导致多余的开销" class="headerlink" title="5.尽量少用主工程的值类型（int，float之类的C#基本类型没事），因为这会导致多余的开销"></a>5.尽量少用主工程的值类型（int，float之类的C#基本类型没事），因为这会导致多余的开销</h2><h2 id="6-transform-position-x3D-vector3-forward可以替换成transform-Translate-translation-Space-World"><a href="#6-transform-position-x3D-vector3-forward可以替换成transform-Translate-translation-Space-World" class="headerlink" title="6.transform.position+&#x3D; vector3.forward可以替换成transform.Translate(translation, Space.World)"></a>6.transform.position+&#x3D; vector3.forward可以替换成transform.Translate(translation, Space.World)</h2><p>但是要注意，这里用到了Unity的枚举类型<strong>Space.World</strong>，所以需要在主工程里面写上优化的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TranslateWorld</span>(<span class="params"><span class="keyword">this</span> Transform transform, Vector3 translation</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    transform.Translate(translation, Space.World);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后再利用工具对这个代码进行<strong>CLR绑定</strong>，消耗就会降到最小</p><h2 id="7-对外部数组进行遍历时，尽量把数组作为临时变量放for外面"><a href="#7-对外部数组进行遍历时，尽量把数组作为临时变量放for外面" class="headerlink" title="7.对外部数组进行遍历时，尽量把数组作为临时变量放for外面"></a>7.对外部数组进行遍历时，尽量把数组作为临时变量放for外面</h2><p><strong>错误：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">var</span> steering = holderFish.steerings[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确：（二者之间差了40B的GC）</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> steerings = holderFish.steerings;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">var</span> steering = steerings[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-调用外部其他对象里的引用类型时，涉及到重复调用的，尽量存成临时变量使用"><a href="#8-调用外部其他对象里的引用类型时，涉及到重复调用的，尽量存成临时变量使用" class="headerlink" title="8.调用外部其他对象里的引用类型时，涉及到重复调用的，尽量存成临时变量使用"></a>8.调用外部其他对象里的引用类型时，涉及到重复调用的，尽量存成临时变量使用</h2><p><strong>错误：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (holderFish.activeSteerings != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    steeringForce += holderFish.activeSteerings.force * holderFish.activeSteerings.weight;</span><br><span class="line">    totalWeight += holderFish.activeSteerings.weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> steering = holderFish.activeSteerings; </span><br><span class="line"><span class="keyword">if</span> (steering != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    steeringForce += steering.force * steering.weight;</span><br><span class="line">    totalWeight += steering.weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-不能使用多维数组，如下"><a href="#9-不能使用多维数组，如下" class="headerlink" title="9.不能使用多维数组，如下:"></a>9.不能使用多维数组，如下:</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[,,] Num;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> ILRuntime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ILRuntime </tag>
            
            <tag> 热更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>补间动画（MTween）</title>
      <link href="/2022/07/09/135ad8c5dc8e/"/>
      <url>/2022/07/09/135ad8c5dc8e/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="43c67148bb4353a6dea893ca072bebb6125059872042a93ba3bb5604d2b6b8c0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章正在施工中。。。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> Unity游戏框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> Unity游戏框架 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架设计</title>
      <link href="/2022/06/17/9b282eca8b8d/"/>
      <url>/2022/06/17/9b282eca8b8d/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="260cbfdaf444360c0b1183855bdd38caa4c93127e9c98aa8ce125ea88a292d94">9a7ea7b4a01c0482802dd2526153cdab65140cf400c9812306a527320605f3f9519554463a33ddf12c1d62c9881062bbcce02b06ed8456b1a2fd070f90f43a029f9791d3d4c4e67e1628d5c70f1f0cded5936333825fb2e154d958254a1ece9e5bc06f320b6b7f04f7122595e72ad7116aaa09def019a2c79253a975008a8be3cdd97126104fbf68e58d6eb73e5a80efefc3bbe69147d542c9b72b9337703c64d1c1d9abc39a1a991d1679e418f1066cdf510b162acf0c64206c1d71f5822a387ca0308f24420607e03dac2f16a2e8066f897e650a1b3cea377dc56f772a51d1560f9dec36c9a9db3a0564c9af5fec8e5f51f15a90a06758d2b1b9b878ddf8a1f5fb3d14f12109d085329b7135dfc09a980bc2d0746a2eba7194b70ccd4d2a97f7ee15dc49a1d2ed9d0b54ccf06515883693b190561cdd0568b0f17ac0159d6b129023fea6b677c8863a322c4f725f33f06caa03184d8b88947ed139638577b84d184f763b0a4c335f495dcedb5c30eabd1075c6371eed80756b4be93be14c6f74764a6024c9ff9cbfb7276a442ee6661be9a2c9002f7047d58b928ac3976f6c4a4db3fe9c1b7b088053518d7991ed201151265135d214daa679096f69fd48959c022960653bb131767332d0858f1e95e80c7e86b54e1d2fc0f96293f23ab5f48f2077e9876176434388f8d83af4068f93cfa5e20989d78c3f723fdadf6a58256940a1c26e9a55fcbf36c149131caad2948c194e10b62d9657c07c4c9d2bb477bedda1b665508358c43839e6121fb51c144998d53d95d2f6e8b2e305d2932dadda1164a051d8a974ab62cbba41582223d07c29d90c6a1f0a8531974609d01953e2d2ebb2a4338b044f8be650f0d6d5abfebfbd118e3b12b0cee0fc70305220806d236c17ef29e070ed0a2d61c3e4bdb51ba3d0205008d7a18ca3c8482943fbaf12a7665ab85b418cf3c2df78c30ca9cd3f6050db5d8f648142b9b75b7e0089663aed4ed4d93bf730e660a4abb06329b8fcfb4b65095dac1d815c1f999056e99e7f33e1506ab66159d3cab9d5ec19d7c838a613453e9491daafde06b31efe466bafa3432730e78b376ad7434e19d2b2ce59455ea11dbf5990513dde5094a268855823d314fa975b89d90d826e7309133cf430a252184974612f0652e666291da96aeb995485a212fcccba169535569e590f67122943680bcb0777f7394efc8cfffed60b390e36436e46049b8200d309a7cb8700e5fa0659acace572ca5eb074d392002d3598088768c20cf090f846faeb5e025a8b23dfca72be7c913ad2de1af1c426dc49e4c2151e59547b932fa7bb0967ae2b58bda95deaf548cb41156879632ed312e2b5c311eaf6baa057290bc25146a385ba6a15820d016e93ff84c54acf90ca66ce6b39513edc117a2b5a9ddcc7abf8ce904e7791429091c681c688cbd9c7739e23b0a0230e7303fda5b5a7fb03455f74f3ee43677455163996eabd85277d091e70e643c01e3396bc8340ca370291bcfed914a3708a8395969c6b998294d448e97c1faca004ec5981ba94aa85a95fd94ed69ebdbc10abbc57d8606a0b7678b10c7a5b69ca387c38f6c872c5e16be58d8e150d9b4f97a7899eee018919aa6d064c27c4f2f085f192f6544da634e78f19c8dfc85a4e5b0237be2f9cfc34512bd273271d346d894d1345dda6f13043797f9f95b289a957d71b4a3fafed44a2a54e84c04ca7a20de324f0f38d27f2c45d0c2915c9463a976b61b0fe6413250537a3315b181d25e96c0d51f6527fe5dc6635c8bf0f8fea8ac0e1c89c997faf7fd8cf4fbdd6557f6c3252474b51c52f837bf43cee8cab7361108f7246b613fa8fbce6c03ecd8680e6b81100b1b6f173386fed78a8be83b3957c2800355629cc489446ee40ccbef781e251cb049603036a7a14d3b5172d848fc56db24f40c0f475901304f13285365b9850e62659817d3f0bf75c08205b404846db6b22472f9173530a06f02b8aaa9567ab3d7c61128f750885984eb933b1f91fa1e20a52a8b6053e43f53ac0ca7161f74ac02e9991369c914061c7b322773aea4438788a8450a08609cad35d4658749d6458126a7b5c215a2b77750a8587aaaabb4f47a33e091516ddf612bf19c4268e53ea614afb0f1a9f773d9b0f1b0faab03dab7246da1ab9abe17c1d616adbc156cb2edd057d78bb6a4a379db7db00a45b51cdb3bae1d6a211889c7a0ee37da44b0205febec8c55b69bf40f338e422c97b2353b46ee0bf04701d1a262d922d59e55b27a2a120ff5000010ae6a56ab0ea49e751e53477bbb71e0d997353cedb9a5cf73710e7bf0b6d19d4aadde9946d213d8e0dff14d6c76e2cee6e7cda70473dd97895bf57e76bfcf6dfa582545f8ba90418cc5d38f60ce3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章正在施工中。。。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> Unity游戏框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> Unity游戏框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Risk of Rain 2 基础</title>
      <link href="/2022/06/04/7f1f259dcffc/"/>
      <url>/2022/06/04/7f1f259dcffc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-道具共享"><a href="#1-道具共享" class="headerlink" title="1.道具共享"></a>1.道具共享</h2><p>原版代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AttemptGrant</span>(<span class="params"><span class="keyword">ref</span> PickupDef.GrantContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Inventory inventory = context.body.inventory;</span><br><span class="line">    PickupDef pickupDef = PickupCatalog.GetPickupDef(context.controller.pickupIndex);</span><br><span class="line">    inventory.GiveUtem((pickupDef != <span class="literal">null</span>) ? pickupDef.itemIndex : ItemIndex.None, <span class="number">1</span>);</span><br><span class="line">    context.shouldDestroy = <span class="literal">true</span>;</span><br><span class="line">    context.shouldNotify = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AttemptGrant</span>(<span class="params"><span class="keyword">ref</span> PickupDef.GrantContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Inventory inventory = context.body.inventory;</span><br><span class="line">    PickupDef pickupDef = PickupCatalog.GetPickupDef(context.controller.pickupIndex);</span><br><span class="line">    <span class="keyword">if</span>(pickupDef.isLunar) <span class="comment">//如果是月亮道具，则只有自己获取</span></span><br><span class="line">    &#123;</span><br><span class="line">        inventory.GiveUtem((pickupDef != <span class="literal">null</span>) ? pickupDef.itemIndex : ItemIndex.None, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//否则遍历所有角色对象，给每个对象生成一个道具</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> player <span class="keyword">in</span> PlayerCharacterMasterController.instances)</span><br><span class="line">        &#123;</span><br><span class="line">            player.master.inventory.GiveUtem((pickupDef != <span class="literal">null</span>) ? pickupDef.itemIndex : ItemIndex.None, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inventory.GiveUtem((pickupDef != <span class="literal">null</span>) ? pickupDef.itemIndex : ItemIndex.None, <span class="number">1</span>);</span><br><span class="line">    context.shouldDestroy = <span class="literal">true</span>;</span><br><span class="line">    context.shouldNotify = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pickupDef里有一个枚举变量：itemTier，主要是判断道具类型</p><p>如果需要对其他道具进行限制，只需要判断当前这个itemTier类型即可</p><h2 id="2-箱子飞出多个道具"><a href="#2-箱子飞出多个道具" class="headerlink" title="2.箱子飞出多个道具"></a>2.箱子飞出多个道具</h2><p>原版代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原版</span></span><br><span class="line">PickupDropletController.CreatePickupDroplet(<span class="keyword">this</span>.dropPickup, <span class="keyword">this</span>.dropTransform.position + Vector3.up * <span class="number">1.5f</span>, Vector3.up * <span class="keyword">this</span>.dropUpVelocityStrength + <span class="keyword">this</span>.dropTransform.forward * <span class="keyword">this</span>.dropForwardVelocityStrength);</span><br></pre></td></tr></table></figure><p>修改代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)<span class="comment">//for循环掉落2个道具</span></span><br><span class="line">&#123;</span><br><span class="line">    PickupDropletController.CreatePickupDroplet(<span class="keyword">this</span>.dropPickup, <span class="keyword">this</span>.dropTransform.position + Vector3.up * <span class="number">1.5f</span>, Vector3.up * <span class="keyword">this</span>.dropUpVelocityStrength + <span class="keyword">this</span>.dropTransform.forward * <span class="keyword">this</span>.dropForwardVelocityStrength);</span><br><span class="line">    <span class="keyword">this</span>.RollItem();<span class="comment">//掉落1次随机一次，避免重复</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 游戏修改 </category>
          
          <category> Risk of Rain 2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stone Story RPG 基础</title>
      <link href="/2022/06/04/934e7aa72e2f/"/>
      <url>/2022/06/04/934e7aa72e2f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-修改最大箱子数量"><a href="#1-修改最大箱子数量" class="headerlink" title="1.修改最大箱子数量"></a>1.修改最大箱子数量</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetTreasurePickupLimit</span>() <span class="comment">//利用dnSpy找到这一行</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> + <span class="number">5</span> * XPController.singleton.currentLevel; <span class="comment">//修改这个值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-修改气水晶购买"><a href="#2-修改气水晶购买" class="headerlink" title="2.修改气水晶购买"></a>2.修改气水晶购买</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleBuyOnePressed</span>(<span class="params">DialogButton button</span>)()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num = ShopController.ComputeKiCost(<span class="keyword">this</span>.entryData);</span><br><span class="line">    num = <span class="number">100</span>;<span class="comment">//这里增加绝对判断，保证气水晶数量可以达到购买标准</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">long</span>)num &lt; <span class="keyword">this</span>.Money()) <span class="comment">//判断气水晶数量是否可以购买</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.insufficientResourcesTicsRemaining = <span class="number">20</span>;</span><br><span class="line">SfxController.singleton.Play(<span class="string">&quot;click&quot;</span>, <span class="literal">true</span>, <span class="number">0f</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="number">0</span>;<span class="comment">//这里加代码，直接把扣除的数量改成0</span></span><br><span class="line">    <span class="keyword">this</span>._DeductMoney((<span class="built_in">long</span>)num);</span><br><span class="line">    <span class="keyword">this</span>._GrantItem(<span class="number">1</span>);</span><br><span class="line">    ShopData.Entry entryData = <span class="keyword">this</span>.entryData;</span><br><span class="line">    entryData.amountPurchased = ++entryData.amountPurchased;</span><br><span class="line">    <span class="keyword">this</span>._CheckSoldOut();</span><br><span class="line">    AnalyticsMacros.ShopPurchase(<span class="keyword">base</span>.item, num);</span><br><span class="line">    SfxController.singleton.Play(<span class="string">&quot;buy&quot;</span>, <span class="literal">true</span>, <span class="number">0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 游戏修改 </category>
          
          <category> Stone Story RPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nice Vibrations插件</title>
      <link href="/2022/05/15/5a80b535f0ed/"/>
      <url>/2022/05/15/5a80b535f0ed/</url>
      
        <content type="html"><![CDATA[<h2 id="1-判断设备是否支持Haptics振动"><a href="#1-判断设备是否支持Haptics振动" class="headerlink" title="1.判断设备是否支持Haptics振动"></a>1.判断设备是否支持Haptics振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isSupported = MMVibrationManager.HapticsSupported();</span><br></pre></td></tr></table></figure><h2 id="2-播放简单的振动"><a href="#2-播放简单的振动" class="headerlink" title="2.播放简单的振动"></a>2.播放简单的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.Vibrate();</span><br></pre></td></tr></table></figure><h2 id="3-播放指定类型的振动"><a href="#3-播放指定类型的振动" class="headerlink" title="3.播放指定类型的振动"></a>3.播放指定类型的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.Haptic(HapticTypes.Selection);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.Success);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.Warning);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.Failure);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.LightImpact);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.MediumImpact);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.HeavyImpact);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.RigidImpact);</span><br><span class="line">MMVibrationManager.Haptic(HapticTypes.SoftImpact);</span><br></pre></td></tr></table></figure><h2 id="4-播瞬间的振动"><a href="#4-播瞬间的振动" class="headerlink" title="4.播瞬间的振动"></a>4.播瞬间的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.TransientHaptic(强度<span class="number">0</span><span class="number">-1</span>, 感知度<span class="number">0</span><span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h2 id="5-播放连续的振动"><a href="#5-播放连续的振动" class="headerlink" title="5.播放连续的振动"></a>5.播放连续的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.ContinuousHaptic(强度<span class="number">0</span><span class="number">-1</span>, 感知度<span class="number">0</span><span class="number">-1</span>,持续时间,振动类型,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h2 id="6-停止所有振动"><a href="#6-停止所有振动" class="headerlink" title="6.停止所有振动"></a>6.停止所有振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.StopAllHaptics();</span><br></pre></td></tr></table></figure><h2 id="7-停止所有连续的振动"><a href="#7-停止所有连续的振动" class="headerlink" title="7.停止所有连续的振动"></a>7.停止所有连续的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMVibrationManager.StopContinuousHaptic();</span><br></pre></td></tr></table></figure><h2 id="8-播放复杂的振动"><a href="#8-播放复杂的振动" class="headerlink" title="8.播放复杂的振动"></a>8.播放复杂的振动</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AdvancedHapticPattern</span>(<span class="params"><span class="built_in">string</span> iOSJSONString,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="built_in">long</span>[] androidPattern, <span class="built_in">int</span>[] androidAmplitudes, <span class="built_in">int</span> androidRepeat,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="built_in">long</span>[] rumblePattern, <span class="built_in">int</span>[] rumbleLowFreqAmplitudes, <span class="built_in">int</span>[] rumbleHighFreqAmplitudes, <span class="built_in">int</span> rumbleRepeat,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                HapticTypes fallbackOldiOS = HapticTypes.None,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                MonoBehaviour coroutineSupport = <span class="literal">null</span>, <span class="built_in">int</span> controllerID = <span class="number">-1</span>, <span class="built_in">bool</span> threaded = <span class="literal">false</span></span>)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法的时间与空间复杂度</title>
      <link href="/2022/03/17/9da0c5302a94/"/>
      <url>/2022/03/17/9da0c5302a94/</url>
      
        <content type="html"><![CDATA[<p>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别。</p><p>那么我们应该如何去衡量不同算法之间的优劣呢？</p><p>主要还是从算法所占用的「时间」和「空间」两个维度去考量。</p><ul><li>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。</li><li>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>首先，要了解一个比较通用的方法「 <strong>大O符号表示法</strong> 」，即 T(n) &#x3D; O(f(n))。</p><p>在 大O符号表示法中，时间复杂度的公式是： T(n) &#x3D; O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：<strong>算法的渐进时间复杂度</strong>。</p><p>常见的时间复杂度量级有：</p><ul><li>常数阶O(1)</li><li>对数阶O(log N)</li><li>线性阶O(n)</li><li>线性对数阶O(n log N)</li><li>平方阶O(n²)</li><li>立方阶O(n³)</li><li>K次方阶O(n^k)</li><li>指数阶O(2^n)</li></ul><p>上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p><p>下面按顺序来讲解一下：</p><h4 id="1-常数阶O-1"><a href="#1-常数阶O-1" class="headerlink" title="1.常数阶O(1)"></a>1.常数阶O(1)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;        <span class="comment">//执行1次</span></span><br><span class="line">i++;              <span class="comment">//执行1次</span></span><br><span class="line">print(i);         <span class="comment">//执行1次</span></span><br></pre></td></tr></table></figure><p>这个算法的运行次数f(n) &#x3D; <strong>3</strong>，根据推导大O阶的方法，第一步是将<strong>3</strong>改为<strong>1</strong>，再保留最高阶项，它没有最高阶项，因此这个算法的时间复杂度为O(1)；</p><p>无论这类代码有多长，只要是没有循环等复杂结构，即使有几万几十万行，都可以用**O(1)**来表示它的时间复杂度。</p><h4 id="2-对数阶O-log-N"><a href="#2-对数阶O-log-N" class="headerlink" title="2.对数阶O(log N)"></a>2.对数阶O(log N)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;        </span><br><span class="line"><span class="keyword">while</span> (i &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)的程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看到，在while循环里面，每次都会乘以<strong>2</strong>。因为总次数为<strong>n</strong>，设我们的执行次数为<strong>x</strong>，则可以推导出：<br>$$<br>2^x &#x3D; n<br>$$<br><strong>2</strong>的<strong>x</strong>次方就是<strong>n</strong>，通过求幂的逆运算，得：<br>$$<br>x &#x3D; log_2n<br>$$</p><p>根据推导大O阶的方法，将<strong>2</strong>简化，保留最高项，因此这个代码的时间复杂度为：<strong>O(log N)</strong></p><h4 id="3-线性阶O-n"><a href="#3-线性阶O-n" class="headerlink" title="3.线性阶O(n)"></a>3.线性阶O(n)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)的程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，for循环里面的代码会执行<strong>n</strong>遍，它消耗的时间是随着<strong>n</strong>的变化而变化的，因此时间复杂度为：<strong>O(n)</strong></p><h4 id="4-线性对数阶O-n-log-N"><a href="#4-线性对数阶O-n-log-N" class="headerlink" title="4.线性对数阶O(n log N)"></a>4.线性对数阶O(n log N)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i * <span class="number">2</span></span><br><span class="line">        <span class="comment">//时间复杂度为O(1)的程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性对数阶O(n log N) 其实非常容易理解，将时间复杂度为O(log N)的代码循环<strong>n</strong>遍的话，那么它的时间复杂度就是 **n * O(log N)<strong>，也就是了</strong>O(n log N)**。</p><h4 id="5-平方阶O-n²"><a href="#5-平方阶O-n²" class="headerlink" title="5.平方阶O(n²)"></a>5.平方阶O(n²)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//时间复杂度为O(1)的程序       </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平方阶<strong>O(n²)</strong> 就更容易理解了，如果把<strong>O(n) <strong>的代码再嵌套循环一遍，它的时间复杂度就是</strong>O(n²)<strong>了。如果把其中的一个</strong>n</strong>改成<strong>m</strong>，那时间复杂度就是<strong>O(n*m)</strong></p><h4 id="6-立方阶O-n³-与K次方阶O-n-k"><a href="#6-立方阶O-n³-与K次方阶O-n-k" class="headerlink" title="6.立方阶O(n³)与K次方阶O(n^k)"></a>6.立方阶O(n³)与K次方阶O(n^k)</h4><p>与平方阶<strong>O(n²)</strong> 类似，嵌套次数不同，次方数就不同。</p><h4 id="7-指数阶O-2-n"><a href="#7-指数阶O-2-n" class="headerlink" title="7.指数阶O(2^n)"></a>7.指数阶O(2^n)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">function</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> function(n - <span class="number">1</span>) + function(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据数学归纳法可以求出，时间复杂度就是<strong>O(2^n)</strong></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>既然时间复杂度不是用来计算程序具体耗时的，那么我也应该明白，空间复杂度也不是用来计算程序实际占用的空间的。</p><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。</p><p>空间复杂度比较常用的有：O(1)、O(n)、O(n²)，我们下面来看看：</p><h4 id="1-空间复杂度-O-1"><a href="#1-空间复杂度-O-1" class="headerlink" title="1.空间复杂度 O(1)"></a>1.空间复杂度 O(1)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;        </span><br><span class="line">i++;              </span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>代码中的 i、b所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) &#x3D; O(1)</p><h4 id="2-空间复杂度O-n"><a href="#2-空间复杂度O-n" class="headerlink" title="2.空间复杂度O(n)"></a>2.空间复杂度O(n)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] m = <span class="keyword">new</span> <span class="built_in">int</span>[n]</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，第一行new了一个数组出来，这个数据占用的大小为n，这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) &#x3D; O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具扩展优化技巧</title>
      <link href="/2022/03/17/c2c0c3b0fb4c/"/>
      <url>/2022/03/17/c2c0c3b0fb4c/</url>
      
        <content type="html"><![CDATA[<h2 id="1-出现需求"><a href="#1-出现需求" class="headerlink" title="1.出现需求"></a>1.出现需求</h2><p>以前写过一个换装工具有一个特定的序列化配置参数类，主要是用来处理换装后BlendShape无法被动作控制的问题。</p><p>但是现在出现了一个情况，因为我们未来的动作播放工具，可能<strong>不再依赖于AnimatorController</strong>，那么就必须对当前这个类进行修改优化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChangeClothesOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Animator Ani;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> LayerIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsReplay = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChangeClothesRole</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ChangeClothesOption DefaultClothesOption;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeCloth</span>(<span class="params"><span class="built_in">string</span> clothName, ChangeClothesOption option = <span class="literal">null</span></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决需求"><a href="#2-解决需求" class="headerlink" title="2.解决需求"></a>2.解决需求</h2><p><strong>首先我们要理清楚需要处理的问题：</strong></p><ul><li>首先，这个类是序列化的类，所以我们**<font color = red>不能破坏已有的内部结构，导致旧项目序列化数据丢失</font>**。</li><li>新增的模块，需要**<font color = red>抽象化处理</font>**，这样就可以轻松的对未来的工具替换做扩展。</li></ul><p>既然要给它添加上可扩展模块，那么**<font color = red>接口类型</font><strong>就派上用场了，毕竟它足够抽象。我们可以定义一个</strong><font color = red>接口类型</font>**：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IChangeClothesOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateOption</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最理想的情况就是，我们给之前旧的那个**<font color = red>ChangeClothesOption类</font><strong>添加上</strong><font color = red>IChangeClothesOption接口</font><strong>，之后实现对应的方法即可。然后将所有传入</strong><font color = red>ChangeClothesOption对象参数</font><strong>的地方，全改成传入</strong><font color = red>IChangeClothesOption接口对象</font>**。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChangeClothesOption</span> : <span class="title">IChangeClothesOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Animator Ani;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> LayerIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsReplay = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//实现对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateOption</span>()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChangeClothesRole</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IChangeClothesOption DefaultClothesOption;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeCloth</span>(<span class="params"><span class="built_in">string</span> clothName, IChangeClothesOption option = <span class="literal">null</span></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这很显然是不现实的，因为这个工具是已经投入使用的，然而因为历史遗留的设计原因，再去逐个修改已有的线上项目，**<font color = red>成本太大了</font>**。</p><p>而且这么改，也会**<font color =red>直接动到旧项目MonoBehaviour上已经序列好的ChangeClothesOption数据</font><strong>，所以我们就需要另辟蹊径。我们的</strong><font color = red>ChangeClothesOption类</font><strong>继承关系保持不变，然后添加一个新的变量，这样就</strong><font color =red>不会影响到已有的序列化数据</font>**。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChangeClothesOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Animator Ani;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> LayerIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsReplay = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">SerializeReference</span>] <span class="keyword">public</span> IChangeClothesOption Option = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateOption</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Option != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Option.UpdateOption();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行旧的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color = red>[SerializeReference]接口：可以序列化抽象类型，只要传入继承抽象类型的实体类，就可以显示对应的参数配置</font></strong></p><p>通过这种方式，我们就已经为MonoBehaviour添加上了一个扩展插槽，之后如果有新的扩展模块，就可以自由插入这个插槽，而且脚本的其他信息都不需要更新修改。</p>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 经验思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 经验思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 集合List与HashSet的区别</title>
      <link href="/2022/02/02/ac0abb660b40/"/>
      <url>/2022/02/02/ac0abb660b40/</url>
      
        <content type="html"><![CDATA[<p>HashSet 存储的数据是无序并且唯一的，底层使用HashMap存储数据。</p><p>List存储的数据是有序并且可以重复的。 采用索引访问存储数据。</p><p>因HashSet存储的数据时唯一的，可以使用HashSet来判定集合中是否存在重复的元素。</p><p>简单说，一个时间复杂度O(1)，一个时间复杂度O(n)。</p><p>而且HashSet无序不重，和List完全不同。</p><p>如果拆开来看，List<T>里面是线序集，HashSet<T>里面是散列表。</p><p>与Dictionary&lt;K,V&gt;相比，List<T>可以看成下标到值的映射，HashSet<T>可以看成值自己到自己的映射。判断一个值是否存在，前者相当于是用值去找下标，要遍历一遍容器；后者相当于用映射前的值去找映射后的值，只需要计算出来值的hash，然后直接访问就好了。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPBehave行为树</title>
      <link href="/2022/01/13/cb77cd702e03/"/>
      <url>/2022/01/13/cb77cd702e03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NPBehave - 一个事件驱动的行为树。</p><p>NPBehave致力于：</p><ul><li>轻量，快速，简洁</li><li>事件驱动</li><li>易于拓展</li><li>一个用代码定义AI行为的框架，目前没有可视化编辑器支持</li></ul><p>NPBehave基于功能强大且灵活的基于代码的方法，从behavior库定义行为树，并混合了虚幻引擎的一些很棒的行为树概念。与传统的行为树不同，事件驱动的行为树不需要每帧从根节点遍历。它们保持当前状态，只有在实际需要时才继续遍历。这使得它们的性能更高，使用起来也更简单。</p><p>在NPBehave中，您将发现大多数节点类型来自传统的行为树，但也有一些类似于虚幻引擎中的节点类型。不过，添加您自己的自定义节点类型也相当容易。</p><p>开源链接：<a href="https://github.com/meniku/NPBehave">https://github.com/meniku/NPBehave</a></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Common（通用）"><a href="#Common（通用）" class="headerlink" title="Common（通用）"></a>Common（通用）</h3><h4 id="Clock—————时钟类，负责管理每帧调用的委托和定时调用的委托"><a href="#Clock—————时钟类，负责管理每帧调用的委托和定时调用的委托" class="headerlink" title="Clock—————时钟类，负责管理每帧调用的委托和定时调用的委托"></a>Clock—————时钟类，负责管理每帧调用的委托和定时调用的委托</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每帧调用委托集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;System.Action&gt; updateObservers;</span><br><span class="line"><span class="comment">//间隔调用委托字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;System.Action, Timer&gt; timers;</span><br><span class="line"><span class="comment">//待移除的每帧调用委托集合</span></span><br><span class="line"><span class="keyword">private</span> HashSet&lt;System.Action&gt; removeObservers;</span><br><span class="line"><span class="comment">//待添加的每帧调用委托集合</span></span><br><span class="line"><span class="keyword">private</span> HashSet&lt;System.Action&gt; addObservers</span><br><span class="line"><span class="comment">//待移除的间隔调用委托集合    </span></span><br><span class="line"><span class="keyword">private</span> HashSet&lt;System.Action&gt; removeTimers;</span><br><span class="line"><span class="comment">//待添加的间隔调用委托字典  </span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;System.Action, Timer&gt; addTimers;</span><br><span class="line"><span class="comment">//当前Clock是否处于Update状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isInUpdate;</span><br><span class="line"><span class="comment">//已经经过的时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> elapsedTime;</span><br><span class="line"><span class="comment">//计时器对象池</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Timer&gt; timerPool;</span><br><span class="line"><span class="comment">//当前对象池内的计时器索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentTimerPoolIndex;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每帧调用的委托数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> NumUpdateObservers;</span><br><span class="line"><span class="comment">//间隔调用的委托数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> NumTimers;</span><br><span class="line"><span class="comment">//当前Clock已经经过的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> ElapsedTime;</span><br><span class="line"><span class="comment">//间隔调用委托计时器对象池的计时器数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> DebugPoolSize;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加一个间隔调用委托：每隔time时间调用一次action，重复repeat+1次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTimer</span>(<span class="params"><span class="built_in">float</span> time, <span class="built_in">int</span> repeat, System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//添加一个间隔调用委托：每隔delay（时间值依据randomVariance随机上下扰动）时间调用一次action，重复repeat+1次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTimer</span>(<span class="params"><span class="built_in">float</span> delay, <span class="built_in">float</span> randomVariance, <span class="built_in">int</span> repeat, System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//移除一个间隔调用委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveTimer</span>(<span class="params">System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//判断是否存在指定的间隔调用委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasTimer</span>(<span class="params">System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//添加一个每帧调用委托：每帧调用action</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddUpdateObserver</span>(<span class="params">System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//移除一个每帧调用委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveUpdateObserver</span>(<span class="params">System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//判断是否存在指定的每帧调用委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasUpdateObserver</span>(<span class="params">System.Action action</span>)</span>;</span><br><span class="line"><span class="comment">//Update方法：每帧调用，并更新对应的deltaTime（增量时间）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> deltaTime</span>)</span>;</span><br><span class="line"><span class="comment">//从计时器对象池中取出一个计时器对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Timer <span class="title">getTimerFromPool</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>Timer—————计时器类</strong></p><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预定的时间，用来判断计时器是否达到下一次调用委托的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> scheduledTime;</span><br><span class="line"><span class="comment">//调用委托的重复次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> repeat;</span><br><span class="line"><span class="comment">//当前计时器是否被使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> used;</span><br><span class="line"><span class="comment">//计时器间隔调用时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> delay;</span><br><span class="line"><span class="comment">//随机变量，用来给间隔时间做一个随机处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> randomVariance;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新下次调用委托时的预定时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScheduleAbsoluteTime</span>(<span class="params"><span class="built_in">double</span> elapsedTime</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Blackboard—————黑板类，黑板是一种AI记忆，负责管理用户存储的数据和用户更新数据时触发的回调函数"><a href="#Blackboard—————黑板类，黑板是一种AI记忆，负责管理用户存储的数据和用户更新数据时触发的回调函数" class="headerlink" title="Blackboard—————黑板类，黑板是一种AI记忆，负责管理用户存储的数据和用户更新数据时触发的回调函数"></a>Blackboard—————黑板类，黑板是一种AI记忆，负责管理用户存储的数据和用户更新数据时触发的回调函数</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时钟对象，用来控制黑板里数据增删修改，以防在添加修改时导致二义性错误</span></span><br><span class="line"><span class="keyword">private</span> Clock clock;</span><br><span class="line"><span class="comment">//数据字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; data;</span><br><span class="line"><span class="comment">//更新数据时触发的回调函数字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;System.Action&lt;Type, <span class="built_in">object</span>&gt;&gt;&gt; observers;</span><br><span class="line"><span class="comment">//当前是否处于NotifiyObservers中，是否正在向所有父子黑板派发数据变化的通知</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isNotifiyng;</span><br><span class="line"><span class="comment">//待添加的回调函数字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;System.Action&lt;Type, <span class="built_in">object</span>&gt;&gt;&gt; addObservers;</span><br><span class="line"><span class="comment">//待移除的回调函数字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;System.Action&lt;Type, <span class="built_in">object</span>&gt;&gt;&gt; removeObservers;</span><br><span class="line"><span class="comment">//数据变化时通知的消息集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Notification&gt; notifications;</span><br><span class="line"><span class="comment">//数据变化时需要真正派发通知的消息集合（因为有的数据可能会临时移除，或者突然新增，以此产生的新消息需要得到处理）</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Notification&gt; notificationsDispatch;</span><br><span class="line"><span class="comment">//父节点黑板</span></span><br><span class="line"><span class="keyword">private</span> Blackboard parentBlackboard;</span><br><span class="line"><span class="comment">//所有子节点黑板集合</span></span><br><span class="line"><span class="keyword">private</span> HashSet&lt;Blackboard&gt; children;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加或更新对应key的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">string</span> key];</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化黑板，设置父节点parent，设置时钟对象clock</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Blackboard</span>(<span class="params">Blackboard parent, Clock clock</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化黑板,设置时钟对象clock</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Blackboard</span>(<span class="params">Clock clock</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动黑板，将自身添加到父节点黑板的子节点黑板列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enable</span>()</span>;</span><br><span class="line"><span class="comment">//关闭黑板，同时将自身从父节点黑板的子节点黑板列表中移除，并且时钟移除间隔调用委托NotifiyObservers</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Disable</span>()</span>;</span><br><span class="line"><span class="comment">//添加对应key的数据，并设置为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//添加或更新对应key的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="comment">//删除对应key的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Unset</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//获取对应key的数据，并转换成指定类型T</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Get</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//获取对应key的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//检测key是否存在于当前黑板中，或者是否存在于父级的黑板里</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Isset</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//添加一个更新对应key数据时触发的回调函数observer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddObserver</span>(<span class="params"><span class="built_in">string</span> key, System.Action&lt;Type, <span class="built_in">object</span>&gt; observer</span>)</span>;</span><br><span class="line"><span class="comment">//移除一个更新对应key数据时触发的回调函数observer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params"><span class="built_in">string</span> key, System.Action&lt;Type, <span class="built_in">object</span>&gt; observer</span>)</span>;</span><br><span class="line"><span class="comment">//通知所有observers数据发生变化，包括父级黑板与子级黑板</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotifiyObservers</span>()</span>;</span><br><span class="line"><span class="comment">//从回调函数字典target中获取黑板更新对应key数据时触发的回调函数集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;System.Action&lt;Type, <span class="built_in">object</span>&gt;&gt; GetObserverList(Dictionary&lt;<span class="built_in">string</span>, List&lt;System.Action&lt;Type, <span class="built_in">object</span>&gt;&gt;&gt; target, <span class="built_in">string</span> key);</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前黑板里所有key集合</span></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; Keys;</span><br><span class="line"><span class="comment">//黑板数据变化时触发的回调函数数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> NumObservers;</span><br></pre></td></tr></table></figure><p><strong>Type—————黑板数据变化枚举</strong></p><p><strong>枚举：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据变化枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Type</span><br><span class="line">&#123;</span><br><span class="line">    ADD,<span class="comment">//添加数据</span></span><br><span class="line">    REMOVE,<span class="comment">//移除数据</span></span><br><span class="line">    CHANGE,<span class="comment">//更新数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Notification—————黑板数据变化消息结构体</strong></p><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据key</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> key;</span><br><span class="line"><span class="comment">//数据变化枚举</span></span><br><span class="line"><span class="keyword">public</span> Type type;</span><br><span class="line"><span class="comment">//新数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化数据key，数据变化枚举type，以及新数据value</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Notification</span>(<span class="params"><span class="built_in">string</span> key, Type type, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Node—————节点类，所有节点都由它派生"><a href="#Node—————节点类，所有节点都由它派生" class="headerlink" title="Node—————节点类，所有节点都由它派生"></a>Node—————节点类，所有节点都由它派生</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前节点的状态</span></span><br><span class="line"><span class="keyword">protected</span> State currentState;</span><br><span class="line"><span class="comment">//根节点</span></span><br><span class="line"><span class="keyword">public</span> Root RootNode;</span><br><span class="line"><span class="comment">//父节点</span></span><br><span class="line"><span class="keyword">private</span> Container parentNode;</span><br><span class="line"><span class="comment">//节点标签</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> label;</span><br><span class="line"><span class="comment">//节点名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> name;</span><br></pre></td></tr></table></figure><p><strong>抽象属性:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根节点的黑板</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> Blackboard Blackboard;</span><br><span class="line"><span class="comment">//根节点的时钟</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> Clock Clock;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前节点的状态</span></span><br><span class="line"><span class="keyword">public</span> State CurrentState;</span><br><span class="line"><span class="comment">//父节点</span></span><br><span class="line"><span class="keyword">public</span> Container ParentNode;</span><br><span class="line"><span class="comment">//节点标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Label;</span><br><span class="line"><span class="comment">//节点名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line"><span class="comment">//当前节点是否处于关闭状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsStopRequested;</span><br><span class="line"><span class="comment">//当前节点是否处于激活状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsActive;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：传入name作为节点名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置根节点rootNode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetRoot</span>(<span class="params">Root rootNode</span>)</span>;</span><br><span class="line"><span class="comment">//激活节点时调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//停用节点：STOP_REQUESTED-&gt;INACTIVE，这个方法必须是最后一次调用，并且调用后不能再修改任何的节点状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Stopped</span>(<span class="params"><span class="built_in">bool</span> success</span>)</span>;</span><br><span class="line"><span class="comment">//当某个父级Composite节点被停用时调用，用来收尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ParentCompositeStopped</span>(<span class="params">Composite composite</span>)</span>;</span><br><span class="line"><span class="comment">//停用父级Composite节点时调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoParentCompositeStopped</span>(<span class="params">Composite composite</span>)</span>;</span><br><span class="line"><span class="comment">//输出节点的信息：节点名称+节点标签</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置父节点parent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParent</span>(<span class="params">Container parent</span>)</span>;</span><br><span class="line"><span class="comment">//激活节点：INACTIVE-&gt;ACTIVE</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点：ACTIVE-&gt;STOP_REQUESTED</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>()</span>;</span><br><span class="line"><span class="comment">//获取当前节点在树里的路径</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="built_in">string</span> <span class="title">GetPath</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上一次关闭节点的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> DebugLastStopRequestAt;</span><br><span class="line"><span class="comment">//上一次停用节点的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> DebugLastStoppedAt;</span><br><span class="line"><span class="comment">//激活节点次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> DebugNumStartCalls;</span><br><span class="line"><span class="comment">//关闭节点次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> DebugNumStopCalls;</span><br><span class="line"><span class="comment">//停用节点次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> DebugNumStoppedCalls;</span><br><span class="line"><span class="comment">//上一次节点结果（true or false）</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> DebugLastResult;</span><br></pre></td></tr></table></figure><p><strong>State—————节点状态枚举</strong></p><p><strong>枚举：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点状态枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> State</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//处于停用状态</span></span><br><span class="line">    INACTIVE,</span><br><span class="line">    <span class="comment">//处于激活状态</span></span><br><span class="line">    ACTIVE,</span><br><span class="line">    <span class="comment">//处于关闭状态，等待父节点收尾</span></span><br><span class="line">    STOP_REQUESTED,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Container—————容器类，容器提供抽象方法，子节点关闭时的收尾回调"><a href="#Container—————容器类，容器提供抽象方法，子节点关闭时的收尾回调" class="headerlink" title="Container—————容器类，容器提供抽象方法，子节点关闭时的收尾回调"></a>Container—————容器类，容器提供抽象方法，子节点关闭时的收尾回调</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否处于崩溃状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> collapse;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否处于崩溃状态</span></span><br><span class="line">public <span class="type">bool</span> Collapse;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化节点名称name</span></span><br><span class="line">public <span class="title function_">Container</span><span class="params">(<span class="built_in">string</span> name)</span> : <span class="title function_">base</span><span class="params">(name)</span></span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子节点停用时的回调</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> succeeded</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子节点停用时的收尾方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> succeeded</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有的子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Node[] DebugChildren;</span><br></pre></td></tr></table></figure><h4 id="UnityContext—————Unity环境类，管理共享黑板以及全局时钟"><a href="#UnityContext—————Unity环境类，管理共享黑板以及全局时钟" class="headerlink" title="UnityContext—————Unity环境类，管理共享黑板以及全局时钟"></a>UnityContext—————Unity环境类，管理共享黑板以及全局时钟</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UnityContext instance;</span><br><span class="line"><span class="comment">//黑板字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, Blackboard&gt; blackboards = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Blackboard&gt;();</span><br><span class="line"><span class="comment">//时钟对象</span></span><br><span class="line"><span class="keyword">private</span> Clock clock = <span class="keyword">new</span> Clock();</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取单例对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> UnityContext <span class="title">GetInstance</span>()</span>;</span><br><span class="line"><span class="comment">//获取全局时钟对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Clock <span class="title">GetClock</span>()</span>;</span><br><span class="line"><span class="comment">//获取共享黑板对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blackboard <span class="title">GetSharedBlackboard</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"><span class="comment">//Unity生命周期函数，用来管理时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Root—————行为树根节点类，管理黑板Blackboard和时钟Clock。只有根节点才能拥有黑板和时钟。根节点管理主节点mainNode，主节点是行为树程序的入口，是根节点的唯一子节点，也是根节点的被装饰节点。"><a href="#Root—————行为树根节点类，管理黑板Blackboard和时钟Clock。只有根节点才能拥有黑板和时钟。根节点管理主节点mainNode，主节点是行为树程序的入口，是根节点的唯一子节点，也是根节点的被装饰节点。" class="headerlink" title="Root—————行为树根节点类，管理黑板Blackboard和时钟Clock。只有根节点才能拥有黑板和时钟。根节点管理主节点mainNode，主节点是行为树程序的入口，是根节点的唯一子节点，也是根节点的被装饰节点。"></a>Root—————行为树根节点类，管理黑板Blackboard和时钟Clock。只有根节点才能拥有黑板和时钟。根节点管理主节点mainNode，主节点是行为树程序的入口，是根节点的唯一子节点，也是根节点的被装饰节点。</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被装饰的节点，也是行为树的主节点，唯一入口</span></span><br><span class="line"><span class="keyword">private</span> Node mainNode;</span><br><span class="line"><span class="comment">//数据黑板</span></span><br><span class="line"><span class="keyword">private</span> Blackboard blackboard;</span><br><span class="line"><span class="comment">//时钟对象</span></span><br><span class="line"><span class="keyword">private</span> Clock clock;</span><br></pre></td></tr></table></figure><p><strong>抽象属性:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据黑板</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> Blackboard Blackboard;</span><br><span class="line"><span class="comment">//时钟对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> Clock Clock;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化主节点mainNode，并从UnityContext获取时钟对象，同时创建一个新的黑板</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Root</span>(<span class="params">Node mainNode</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Root&quot;</span>, mainNode</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化黑板blackboard和主节点mainNode，并从UnityContext获取时钟对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Root</span>(<span class="params">Blackboard blackboard, Node mainNode</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Root&quot;</span>, mainNode</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化黑板blackboard，时钟对象clock，主节点mainNode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Root</span>(<span class="params">Blackboard blackboard, Clock clock, Node mainNode</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Root&quot;</span>, mainNode</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置rootNode为根节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetRoot</span>(<span class="params">Root rootNode</span>)</span>;</span><br><span class="line"><span class="comment">//激活根节点，开启黑板，同时启动主节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭主节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点node停用时调用并返回结果success，如果根节点处于关闭状态，则返回结果success并停用树，否则重启节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node node, <span class="built_in">bool</span> success</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前行为树Start的全部次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> TotalNumStartCalls;</span><br><span class="line"><span class="comment">//当前行为树Stop的全部次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> TotalNumStopCalls;</span><br><span class="line"><span class="comment">//当前行为树Stopped的全部次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> TotalNumStoppedCalls;</span><br></pre></td></tr></table></figure><h4 id="Operator—————操作黑板数据逻辑枚举：更新行为树黑板中的数据时，会触发回调，并且对比前后数据，判断当前分支是否满足指定条件逻辑"><a href="#Operator—————操作黑板数据逻辑枚举：更新行为树黑板中的数据时，会触发回调，并且对比前后数据，判断当前分支是否满足指定条件逻辑" class="headerlink" title="Operator—————操作黑板数据逻辑枚举：更新行为树黑板中的数据时，会触发回调，并且对比前后数据，判断当前分支是否满足指定条件逻辑"></a>Operator—————操作黑板数据逻辑枚举：更新行为树黑板中的数据时，会触发回调，并且对比前后数据，判断当前分支是否满足指定条件逻辑</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作黑板数据的条件枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Operator</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//黑板中存在key(?=)</span></span><br><span class="line">    IS_SET,</span><br><span class="line">    <span class="comment">//黑板中不存在key(?!=)</span></span><br><span class="line">    IS_NOT_SET,</span><br><span class="line">    <span class="comment">//两个数据相等(==)</span></span><br><span class="line">    IS_EQUAL,</span><br><span class="line">    <span class="comment">//两个数据不等(!=)</span></span><br><span class="line">    IS_NOT_EQUAL,</span><br><span class="line">    <span class="comment">//两个数据是大于等于关系(&gt;=)</span></span><br><span class="line">    IS_GREATER_OR_EQUAL,</span><br><span class="line">    <span class="comment">//两个数据是大于关系(&gt;)</span></span><br><span class="line">    IS_GREATER,</span><br><span class="line">    <span class="comment">//两个数据是小于等于关系(&lt;=)</span></span><br><span class="line">    IS_SMALLER_OR_EQUAL,</span><br><span class="line">    两个数据是小于关系(&lt;)</span><br><span class="line">    IS_SMALLER,</span><br><span class="line">    <span class="comment">//总是返回true</span></span><br><span class="line">    ALWAYS_TRUE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stops—————终止原则枚举：一些装饰器有一个stopsOnChange参数，允许自定义stop规则，该参数允许装饰器停用其父组合（Composite）中正在运行的子树"><a href="#Stops—————终止原则枚举：一些装饰器有一个stopsOnChange参数，允许自定义stop规则，该参数允许装饰器停用其父组合（Composite）中正在运行的子树" class="headerlink" title="Stops—————终止原则枚举：一些装饰器有一个stopsOnChange参数，允许自定义stop规则，该参数允许装饰器停用其父组合（Composite）中正在运行的子树"></a>Stops—————终止原则枚举：一些装饰器有一个stopsOnChange参数，允许自定义stop规则，该参数允许装饰器停用其父组合（Composite）中正在运行的子树</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终止原则枚举：一些装饰器有一个stopsOnChange参数，允许自定义stop规则，该参数允许装饰器停用其父组合（Composite）中正在运行的子树</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Stops</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//装饰器只会在启动时检查一次它的状态，并且永远不会停用任何正在运行的节点。</span></span><br><span class="line">    NONE,</span><br><span class="line">    <span class="comment">//装饰器将在启动时检查一次它的条件状态，如果满足，它将继续观察黑板的变化。一旦不再满足该条件，它将终止自身，并让父组合继续处理它的下一个节点。</span></span><br><span class="line">    SELF,</span><br><span class="line">    <span class="comment">//装饰器将在启动时检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停用比此结点优先级较低的节点，允许父组合继续处理下一个节点。</span></span><br><span class="line">    LOWER_PRIORITY,</span><br><span class="line">    <span class="comment">//装饰器将同时停用:自己和低优先级的节点。</span></span><br><span class="line">    BOTH,</span><br><span class="line">    <span class="comment">//一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停用优先级较低的节点，并命令父组合立即重启此装饰器。</span></span><br><span class="line">    IMMEDIATE_RESTART,</span><br><span class="line">    <span class="comment">//一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停用优先级较低的节点，并命令父组合立即重启装饰器。正如在这两种情况下，一旦不再满足条件，它也将停用自己。</span></span><br><span class="line">    LOWER_PRIORITY_IMMEDIATE_RESTART</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Composite（组合节点）"><a href="#Composite（组合节点）" class="headerlink" title="Composite（组合节点）"></a>Composite（组合节点）</h3><h4 id="Composite—————组合节点基类，可以管理多个子节点"><a href="#Composite—————组合节点基类，可以管理多个子节点" class="headerlink" title="Composite—————组合节点基类，可以管理多个子节点"></a>Composite—————组合节点基类，可以管理多个子节点</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子节点</span></span><br><span class="line"><span class="keyword">protected</span> Node[] Children;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化组合节点名称name,以及所有子节点children</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Composite</span>(<span class="params"><span class="built_in">string</span> name, Node[] children</span>) : <span class="title">base</span>(<span class="params">name</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置根节点rootNode</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetRoot</span>(<span class="params">Root rootNode</span>)</span>;</span><br><span class="line"><span class="comment">//停用组合节点，停用前对所有子节点进行收尾处理</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Stopped</span>(<span class="params"><span class="built_in">bool</span> success</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点child请求关闭所有子节点时的回调，immediateRestart为true时子节点希望立即重置当前节点，为false时子节点希望停用当前节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node child, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> Node[] DebugChildren;</span><br><span class="line"><span class="comment">//所有激活状态的子节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">DebugGetActiveChild</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Selector—————选择执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回true，中止执行，停用并返回true，如果找不到下一个节点，停用并返回false"><a href="#Selector—————选择执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回true，中止执行，停用并返回true，如果找不到下一个节点，停用并返回false" class="headerlink" title="Selector—————选择执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回true，中止执行，停用并返回true，如果找不到下一个节点，停用并返回false"></a>Selector—————选择执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回true，中止执行，停用并返回true，如果找不到下一个节点，停用并返回false</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前启动的子节点索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：传入所有子节点children</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Selector</span>(<span class="params"><span class="keyword">params</span> Node[] children</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Selector&quot;</span>, children</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化当前启动的子节点索引，启动第一个子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//当前节点关闭回调，关闭当前子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时调用，result为true时停用当前节点，并返回true。result为false时，按顺序启用下一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点请求关闭当前节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为true，当前启动的子节点索引设置为发出请求的节点索引。</span></span><br><span class="line"><span class="comment">//immediateRestart为false，当前启动的子节点索引设置为总子节点长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node abortForChild, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出当前子节点索引</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动下一子节点。</span></span><br><span class="line"><span class="comment">//所有子节点执行完毕则停用当前节点并返回false。</span></span><br><span class="line"><span class="comment">//如果当前节点是关闭状态，停用当前节点并返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessChildren</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Sequence—————顺序执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回false，中止执行，停用并返回false，如果找不到下一个节点，停用并返回true"><a href="#Sequence—————顺序执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回false，中止执行，停用并返回false，如果找不到下一个节点，停用并返回true" class="headerlink" title="Sequence—————顺序执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回false，中止执行，停用并返回false，如果找不到下一个节点，停用并返回true"></a>Sequence—————顺序执行，组合节点类，串行执行所有子节点，执行过程中有子节点返回false，中止执行，停用并返回false，如果找不到下一个节点，停用并返回true</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前启动的子节点索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：传入所有子节点children</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sequence</span>(<span class="params"><span class="keyword">params</span> Node[] children</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Sequence&quot;</span>, children</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化当前启动的子节点索引，启动第一个子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//当前节点关闭回调，关闭当前子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时调用，result为true时，按顺序启用下一个子节点。result为false时，停用当前节点并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点请求关闭当前节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为true，当前启动的子节点索引设置为发出请求的节点索引。</span></span><br><span class="line"><span class="comment">//immediateRestart为false，当前启动的子节点索引设置为总子节点长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node abortForChild, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出当前子节点索引</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动下一子节点。</span></span><br><span class="line"><span class="comment">//所有子节点执行完毕则停用当前节点并返回true。</span></span><br><span class="line"><span class="comment">//如果当前节点是关闭状态，停用当前节点并返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessChildren</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Parallel—————并行执行，组合节点类，并行执行所有子节点，根据成功原则和失败原则，决定节点停用时机"><a href="#Parallel—————并行执行，组合节点类，并行执行所有子节点，根据成功原则和失败原则，决定节点停用时机" class="headerlink" title="Parallel—————并行执行，组合节点类，并行执行所有子节点，根据成功原则和失败原则，决定节点停用时机"></a>Parallel—————并行执行，组合节点类，并行执行所有子节点，根据成功原则和失败原则，决定节点停用时机</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//失败原则</span></span><br><span class="line"><span class="keyword">private</span> Policy failurePolicy;</span><br><span class="line"><span class="comment">//成功原则</span></span><br><span class="line"><span class="keyword">private</span> Policy successPolicy;</span><br><span class="line"><span class="comment">//子节点数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> childrenCount;</span><br><span class="line"><span class="comment">//当前处于启用状态的子节点数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> runningCount;</span><br><span class="line"><span class="comment">//子节点停用时返回true的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> succeededCount;</span><br><span class="line"><span class="comment">//子节点停用时返回false的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> failedCount;</span><br><span class="line"><span class="comment">//子节点+返回结果的字典</span></span><br><span class="line"><span class="keyword">private</span> Dictionary&lt;Node, <span class="built_in">bool</span>&gt; childrenResults;</span><br><span class="line"><span class="comment">//最终的返回结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> successState;</span><br><span class="line"><span class="comment">//锁定successState防止被覆盖</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> childrenAborted;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化成功原则successPolicy和失败原则failurePolicy，以及所有子节点children，并初始化子节点+返回结果的字典</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Parallel</span>(<span class="params">Policy successPolicy, Policy failurePolicy, <span class="keyword">params</span> Node[] children</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Parallel&quot;</span>, children</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活Parallel节点时调用，初始化数据，并且启动所有子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭Parallel节点时调用，关闭所有子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停止时调用。</span></span><br><span class="line"><span class="comment">//成功原则 = ONE，失败原则 = ONE，第一个子节点停用返回true(false)后，关闭所有子节点，停用当前节点返回true(false)。</span></span><br><span class="line"><span class="comment">//成功原则 = ONE，失败原则 = ALL，当有一个子节点停用返回true后，关闭所有子节点，停用当前节点返回true，否则返回false。</span></span><br><span class="line"><span class="comment">//成功原则 = ALL，失败原则 = ONE，所有子节点停用返回true后，当前节点停用返回true，否则返回false。</span></span><br><span class="line"><span class="comment">//成功原则 = ALL，失败原则 = ALL，所有子节点停用返回true后，当前节点停用返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点请求关闭当前节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为true，重新启用当前子节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为false，抛出异常，并行组合节点所有子节点都有相同优先级。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node abortForChild, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>Policy—————并行组合原则枚举</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并行组合原则枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Policy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//有一个以上符合</span></span><br><span class="line">    ONE,</span><br><span class="line">    <span class="comment">//全部符合</span></span><br><span class="line">    ALL,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RandomSelector—————随机选择执行，组合节点类，随机打乱子节点的执行顺序，其他同Selector完全相同"><a href="#RandomSelector—————随机选择执行，组合节点类，随机打乱子节点的执行顺序，其他同Selector完全相同" class="headerlink" title="RandomSelector—————随机选择执行，组合节点类，随机打乱子节点的执行顺序，其他同Selector完全相同"></a>RandomSelector—————随机选择执行，组合节点类，随机打乱子节点的执行顺序，其他同Selector完全相同</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Random对象，用来创建随机数</span></span><br><span class="line"><span class="keyword">static</span> System.Random rng;</span><br><span class="line"><span class="comment">//当前启动的子节点索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line"><span class="comment">//用来随机的节点索引数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] randomizedOrder;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化用来随机的节点索引数组，传入所有子节点children</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomSelector</span>(<span class="params"><span class="keyword">params</span> Node[] children</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Random Selector&quot;</span>, children</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化当前启动的子节点索引，启动第一个子节点，启动前随机下顺序</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//当前节点关闭回调，关闭当前子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时调用，result为true时停用当前节点，并返回true。result为false时，按顺序启用下一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点请求关闭当前节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为true，当前启动的子节点索引设置为发出请求的节点索引。</span></span><br><span class="line"><span class="comment">//immediateRestart为false，当前启动的子节点索引设置为总子节点长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node abortForChild, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出当前子节点索引</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动下一子节点。</span></span><br><span class="line"><span class="comment">//所有子节点执行完毕则停用当前节点并返回false。</span></span><br><span class="line"><span class="comment">//如果当前节点是关闭状态，停用当前节点并返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessChildren</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试随机种子，通过随机种子seed重置Random对象</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DebugSetSeed</span>(<span class="params"><span class="built_in">int</span> seed</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="RandomSequence—————随机顺序执行，组合节点类，随机打乱子节点的执行顺序，其他同Sequence完全相同"><a href="#RandomSequence—————随机顺序执行，组合节点类，随机打乱子节点的执行顺序，其他同Sequence完全相同" class="headerlink" title="RandomSequence—————随机顺序执行，组合节点类，随机打乱子节点的执行顺序，其他同Sequence完全相同"></a>RandomSequence—————随机顺序执行，组合节点类，随机打乱子节点的执行顺序，其他同Sequence完全相同</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Random对象，用来创建随机数</span></span><br><span class="line"><span class="keyword">static</span> System.Random rng;</span><br><span class="line"><span class="comment">//当前启动的子节点索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line"><span class="comment">//用来随机的节点索引数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] randomizedOrder;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化用来随机的节点索引数组，传入所有子节点children</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomSelector</span>(<span class="params"><span class="keyword">params</span> Node[] children</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Random Selector&quot;</span>, children</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化当前启动的子节点索引，启动第一个子节点，启动前随机下顺序</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//当前节点关闭回调，关闭当前子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时调用，result为true时，按顺序启用下一个子节点。result为false时，停用当前节点并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//某个子节点请求关闭当前节点。</span></span><br><span class="line"><span class="comment">//immediateRestart为true，当前启动的子节点索引设置为发出请求的节点索引。</span></span><br><span class="line"><span class="comment">//immediateRestart为false，当前启动的子节点索引设置为总子节点长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">StopLowerPriorityChildrenForChild</span>(<span class="params">Node abortForChild, <span class="built_in">bool</span> immediateRestart</span>)</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出当前子节点索引</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动下一子节点。</span></span><br><span class="line"><span class="comment">//所有子节点执行完毕则停用当前节点并返回true。</span></span><br><span class="line"><span class="comment">//如果当前节点是关闭状态，停用当前节点并返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessChildren</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>UNITY_EDITOR:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试随机种子，通过随机种子seed重置Random对象</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DebugSetSeed</span>(<span class="params"><span class="built_in">int</span> seed</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="Decorator（装饰节点）"><a href="#Decorator（装饰节点）" class="headerlink" title="Decorator（装饰节点）"></a>Decorator（装饰节点）</h3><h4 id="Decorator—————装饰节点类，负责装饰子节点"><a href="#Decorator—————装饰节点类，负责装饰子节点" class="headerlink" title="Decorator—————装饰节点类，负责装饰子节点"></a>Decorator—————装饰节点类，负责装饰子节点</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被装饰的节点：是当前节点的子节点</span></span><br><span class="line"><span class="keyword">protected</span> Node Decoratee;</span><br></pre></td></tr></table></figure><p><strong>抽象属性:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有的子节点（装饰节点只有1个被装饰的子节点）</span></span><br><span class="line">public override Node[] DebugChildren;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：传入name作为节点名称，decoratee作为被装饰的节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorator</span>(<span class="params"><span class="built_in">string</span> name, Node decoratee</span>) : <span class="title">base</span>(<span class="params">name</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置根节点rootNode，当前装饰节点，和被装饰节点Decoratee都一起设置</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetRoot</span>(<span class="params">Root rootNode</span>)</span>;</span><br><span class="line"><span class="comment">//父Composite节点停用后，会先执行当前节点重写的ParentCompositeStopped，然后再执行子节点的ParentCompositeStopped</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ParentCompositeStopped</span>(<span class="params">Composite composite</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Service—————提供服务，装饰节点类，此节点包含一个每帧或定时调用委托，开启后，系统会按照一定间隔时间调用委托，常用于检查和更新黑板"><a href="#Service—————提供服务，装饰节点类，此节点包含一个每帧或定时调用委托，开启后，系统会按照一定间隔时间调用委托，常用于检查和更新黑板" class="headerlink" title="Service—————提供服务，装饰节点类，此节点包含一个每帧或定时调用委托，开启后，系统会按照一定间隔时间调用委托，常用于检查和更新黑板"></a>Service—————提供服务，装饰节点类，此节点包含一个每帧或定时调用委托，开启后，系统会按照一定间隔时间调用委托，常用于检查和更新黑板</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用的方法委托</span></span><br><span class="line"><span class="keyword">private</span> System.Action serviceMethod;</span><br><span class="line"><span class="comment">//调用间隔时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> interval;</span><br><span class="line"><span class="comment">//随机变量，用来给间隔时间做一个随机处理</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> randomVariation;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化调用间隔时间interval，随机变量randomVariation，调用委托service，所装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Service</span>(<span class="params"><span class="built_in">float</span> interval, <span class="built_in">float</span> randomVariation, System.Action service, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Service&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化调用间隔时间interval，调用委托service，所装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Service</span>(<span class="params"><span class="built_in">float</span> interval, System.Action service, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Service&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化调用委托service，所装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Service</span>(<span class="params">System.Action service, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Service&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：时钟注册委托，并激活被装饰的节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：关闭被装饰的节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时调用：时钟移除对应委托，停用当前节点，并返回子节点结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时钟注册带有随机时间扰动的委托</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InvokeServiceMethodWithRandomVariation</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="ObservingDecorator—————观察者，装饰节点类，此节点必须是某个组合节点的子孙节点"><a href="#ObservingDecorator—————观察者，装饰节点类，此节点必须是某个组合节点的子孙节点" class="headerlink" title="ObservingDecorator—————观察者，装饰节点类，此节点必须是某个组合节点的子孙节点"></a>ObservingDecorator—————观察者，装饰节点类，此节点必须是某个组合节点的子孙节点</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终止原则</span></span><br><span class="line"><span class="keyword">protected</span> Stops stopsOnChange;</span><br><span class="line"><span class="comment">//是否处于观察（监听）状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isObserving;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化节点名称name，终止原则stopsOnChange，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObservingDecorator</span>(<span class="params"><span class="built_in">string</span> name, Stops stopsOnChange, Node decoratee</span>) : <span class="title">base</span>(<span class="params">name, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：如果有设置终止原则则开启观察（监听），条件符合则停用节点并返回false，否则激活被装饰的节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：关闭被装饰的节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时回调：停用当前节点，并返回被装饰节点的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br><span class="line"><span class="comment">//停用父级Composite节点时调用：停止观察（监听）</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoParentCompositeStopped</span>(<span class="params">Composite parentComposite</span>)</span>;</span><br><span class="line"><span class="comment">//开始观察（监听）时的回调（时钟注册Evaluate）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">StartObserving</span>()</span>;</span><br><span class="line"><span class="comment">//停止观察（监听）时的回调（时钟移除Evaluate）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">StopObserving</span>()</span>;</span><br><span class="line"><span class="comment">//是否满足指定的条件</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="built_in">bool</span> <span class="title">IsConditionMet</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据当前条件是否被满足，重置当前节点状态与父组合节点的分支状态。</span></span><br><span class="line"><span class="comment">//终止原则 | 节点处于激活状态且条件不满足 | 节点处于停用状态且条件满足</span></span><br><span class="line"><span class="comment">//Stops.NONE | 无 | 无</span></span><br><span class="line"><span class="comment">//Stops.SELF | 停用当前节点 | 无</span></span><br><span class="line"><span class="comment">//Stops.LOWER_PRIORITY | 无 | 关闭当前启用的分支，停用父组合节点</span></span><br><span class="line"><span class="comment">//Stops.BOTH | 停用当前节点 |  关闭当前启用的分支，停用父组合节点</span></span><br><span class="line"><span class="comment">//Stops.LOWER_PRIORITY_IMMEDIATE_RESTART | 无 | 关闭当前启用的分支，启动此分支</span></span><br><span class="line"><span class="comment">//Stops.IMMEDIATE_RESTART | 停用当前节点 |  关闭当前启用的分支，启动此分支</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Evaluate</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="BlackboardCondition—————黑板条件判断，装饰节点类，管理行为树黑板中单个的键值对，当数据变化时会触发回调onValueChanged，并比较二者是否满足指定逻辑，更新各节点状态"><a href="#BlackboardCondition—————黑板条件判断，装饰节点类，管理行为树黑板中单个的键值对，当数据变化时会触发回调onValueChanged，并比较二者是否满足指定逻辑，更新各节点状态" class="headerlink" title="BlackboardCondition—————黑板条件判断，装饰节点类，管理行为树黑板中单个的键值对，当数据变化时会触发回调onValueChanged，并比较二者是否满足指定逻辑，更新各节点状态"></a>BlackboardCondition—————黑板条件判断，装饰节点类，管理行为树黑板中单个的键值对，当数据变化时会触发回调onValueChanged，并比较二者是否满足指定逻辑，更新各节点状态</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键（对应黑板里的key）</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> key;</span><br><span class="line"><span class="comment">//值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">object</span> <span class="keyword">value</span>;</span><br><span class="line"><span class="comment">//操作黑板数据逻辑枚举</span></span><br><span class="line"><span class="keyword">private</span> Operator op;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键（对应黑板里的key）</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Key;</span><br><span class="line"><span class="comment">//值</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> Value;</span><br><span class="line"><span class="comment">//操作黑板数据逻辑枚举</span></span><br><span class="line"><span class="keyword">public</span> Operator Operator;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化对应key，操作逻辑op，值value，终止原则stopsOnChange，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlackboardCondition</span>(<span class="params"><span class="built_in">string</span> key, Operator op, <span class="built_in">object</span> <span class="keyword">value</span>, Stops stopsOnChange, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;BlackboardCondition&quot;</span>, stopsOnChange, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化对应key，操作逻辑op，终止原则stopsOnChange，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlackboardCondition</span>(<span class="params"><span class="built_in">string</span> key, Operator op, Stops stopsOnChange, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;BlackboardCondition&quot;</span>, stopsOnChange, decoratee</span>)</span></span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始观察（监听）时的回调：黑板注册值变化回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StartObserving</span>()</span>;</span><br><span class="line"><span class="comment">//停止观察（监听）时的回调：黑板移除值变化回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StopObserving</span>()</span>;</span><br><span class="line"><span class="comment">//是否满足指定的条件：判断键值对条件是否满足指定的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="built_in">bool</span> <span class="title">IsConditionMet</span>()</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出操作黑板数据逻辑枚举，以及黑板对应的键，和当前条件节点所对应的值</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//黑板里值发生变化时的回调：键值对发生变化，调用Evaluate</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onValueChanged</span>(<span class="params">Blackboard.Type type, <span class="built_in">object</span> newValue</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="BlackboardQuery—————黑板查询，装饰节点类，管理行为树黑板中的多个键，当数据变化时会触发回调onValueChanged，执行给定的query函数，返回的bool结果表示当前分支是否满足条件，并更新各节点状态"><a href="#BlackboardQuery—————黑板查询，装饰节点类，管理行为树黑板中的多个键，当数据变化时会触发回调onValueChanged，执行给定的query函数，返回的bool结果表示当前分支是否满足条件，并更新各节点状态" class="headerlink" title="BlackboardQuery—————黑板查询，装饰节点类，管理行为树黑板中的多个键，当数据变化时会触发回调onValueChanged，执行给定的query函数，返回的bool结果表示当前分支是否满足条件，并更新各节点状态"></a>BlackboardQuery—————黑板查询，装饰节点类，管理行为树黑板中的多个键，当数据变化时会触发回调onValueChanged，执行给定的query函数，返回的bool结果表示当前分支是否满足条件，并更新各节点状态</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] keys;</span><br><span class="line"><span class="comment">//给定的查询方法委托</span></span><br><span class="line"><span class="keyword">private</span> System.Func&lt;<span class="built_in">bool</span>&gt; query;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化键集合keys，终止规则stopsOnChange，给定的查询方法委托query，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlackboardQuery</span>(<span class="params"><span class="built_in">string</span>[] keys, Stops stopsOnChange, System.Func&lt;<span class="built_in">bool</span>&gt; query, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;BlackboardQuery&quot;</span>, stopsOnChange, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始观察（监听）时的回调：黑板注册值变化回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StartObserving</span>()</span>;</span><br><span class="line"><span class="comment">//停止观察（监听）时的回调：黑板移除值变化回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StopObserving</span>()</span>;</span><br><span class="line"><span class="comment">//是否满足指定的条件：判断执行给定的query函数所返回的值</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsConditionMet</span>()</span>;</span><br><span class="line"><span class="comment">//重载ToString，输出所有的键名</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//黑板里值发生变化时的回调：键值对发生变化，调用Evaluate</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onValueChanged</span>(<span class="params">Blackboard.Type type, <span class="built_in">object</span> newValue</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Condition—————提供条件判断，装饰节点类，每帧或周期调用预设的condition，并返回对应结果"><a href="#Condition—————提供条件判断，装饰节点类，每帧或周期调用预设的condition，并返回对应结果" class="headerlink" title="Condition—————提供条件判断，装饰节点类，每帧或周期调用预设的condition，并返回对应结果"></a>Condition—————提供条件判断，装饰节点类，每帧或周期调用预设的condition，并返回对应结果</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预设的条件condition委托</span></span><br><span class="line"><span class="keyword">private</span> Func&lt;<span class="built_in">bool</span>&gt; condition;</span><br><span class="line"><span class="comment">//调用委托的时间间隔</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> checkInterval;</span><br><span class="line"><span class="comment">//调用委托的时间间隔扰动参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> checkVariance;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化预设的条件condition委托，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Condition</span>(<span class="params">Func&lt;<span class="built_in">bool</span>&gt; condition, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Condition&quot;</span>, Stops.NONE, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化预设的条件condition委托，终止原则stopsOnChange，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Condition</span>(<span class="params">Func&lt;<span class="built_in">bool</span>&gt; condition, Stops stopsOnChange, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Condition&quot;</span>, stopsOnChange, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化预设的条件condition委托，终止原则stopsOnChange，调用委托的时间间隔checkInterval，用委托的时间间隔扰动参数用委托的时间间隔扰动参数randomVariancerandomVariance，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Condition</span>(<span class="params">Func&lt;<span class="built_in">bool</span>&gt; condition, Stops stopsOnChange, <span class="built_in">float</span> checkInterval, <span class="built_in">float</span> randomVariance, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Condition&quot;</span>, stopsOnChange, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始观察（监听）时的回调：时钟注册Evaluate</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StartObserving</span>()</span>;</span><br><span class="line"><span class="comment">//停止观察（监听）时的回调：时钟移除Evaluate</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">StopObserving</span>()</span>;</span><br><span class="line"><span class="comment">//是否满足指定条件：返回condition委托的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsConditionMet</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Cooldown—————技能cd相关，装饰节点类，此类节点负责技能施放的逻辑，被装饰节点负责技能的施放效果"><a href="#Cooldown—————技能cd相关，装饰节点类，此类节点负责技能施放的逻辑，被装饰节点负责技能的施放效果" class="headerlink" title="Cooldown—————技能cd相关，装饰节点类，此类节点负责技能施放的逻辑，被装饰节点负责技能的施放效果"></a>Cooldown—————技能cd相关，装饰节点类，此类节点负责技能施放的逻辑，被装饰节点负责技能的施放效果</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断冷却时间是否从装饰者启动后开始</span></span><br><span class="line"><span class="comment">//true - 施放技能结束后，才进入cd</span></span><br><span class="line"><span class="comment">//false - 施放技能开始时，立即进入cd（默认）</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> startAfterDecoratee;</span><br><span class="line"><span class="comment">//底层返回失败时是否要重置定时器</span></span><br><span class="line"><span class="comment">//true - 取消技能施放时（被装饰节点停用返回false），重置cd</span></span><br><span class="line"><span class="comment">//false - 取消技能施放时，不重置cd（默认）</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> resetOnFailiure;</span><br><span class="line"><span class="comment">//在冷却状态时是否要立刻停止装饰器</span></span><br><span class="line"><span class="comment">//true - 技能没有准备好却被用户请求施放时停用当前节点返回false</span></span><br><span class="line"><span class="comment">//false - 什么也不做（默认）</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> failOnCooldown;</span><br><span class="line"><span class="comment">//冷却时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> cooldownTime;</span><br><span class="line"><span class="comment">//在冷却时间上增加了随机的变化</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> randomVariation;</span><br><span class="line"><span class="comment">//技能是否准备完毕</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isReady = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，在冷却时间上增加的随机扰动值randomVariation，startAfterDecoratee判断是否在装饰节点启动后开始，resetOnFailiure判断底层返回失败时是否要重置定时器，failOnCooldown判断在冷却状态时是否要立刻停止装饰器，被装饰的节点decoratee。</span></span><br><span class="line"><span class="comment">//Cooldown装饰器确保分支不能在给定的冷却时间内启动两次。</span></span><br><span class="line"><span class="comment">//装饰器可以立即启动冷却计时器或等到孩子停止，您可以使用`startAfterDecoratee` 参数。</span></span><br><span class="line"><span class="comment">//如果冷却计时器处于活动状态并且该节点再次启动，则默认行为是，装饰器等待冷却时间到达，然后执行底层节点。</span></span><br><span class="line"><span class="comment">//您可以使用 `failOnCooldown` 参数更改此行为，以使装饰器立即失败。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, <span class="built_in">float</span> randomVariation, <span class="built_in">bool</span> startAfterDecoratee, <span class="built_in">bool</span> resetOnFailiure, <span class="built_in">bool</span> failOnCooldown, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，startAfterDecoratee判断是否在装饰节点启动后开始，resetOnFailiure判断底层返回失败时是否要重置定时器，failOnCooldown判断在冷却状态时是否要立刻停止装饰器，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, <span class="built_in">bool</span> startAfterDecoratee, <span class="built_in">bool</span> resetOnFailiure, <span class="built_in">bool</span> failOnCooldown, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，在冷却时间上增加的随机扰动值randomVariation，startAfterDecoratee判断是否在装饰节点启动后开始，resetOnFailiure判断底层返回失败时是否要重置定时器，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, <span class="built_in">float</span> randomVariation, <span class="built_in">bool</span> startAfterDecoratee, <span class="built_in">bool</span> resetOnFailiure, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，startAfterDecoratee判断是否在装饰节点启动后开始，resetOnFailiure判断底层返回失败时是否要重置定时器，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, <span class="built_in">bool</span> startAfterDecoratee, <span class="built_in">bool</span> resetOnFailiure, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，在冷却时间上增加的随机扰动值randomVariation，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, <span class="built_in">float</span> randomVariation, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化距离下一次执行的时间cooldownTime，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cooldown</span>(<span class="params"><span class="built_in">float</span> cooldownTime, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeCooldown&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：用户请求施放技能（当前节点启动）。</span></span><br><span class="line"><span class="comment">//如果技能已经准备好，立即施放技能（启动被装饰节点）。否则，什么也不做（根据failOnCooldown决定是否停用当前节点）。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：对于状态切换类技能，用户请求关闭技能状态（关闭当前节点）。</span></span><br><span class="line"><span class="comment">//如果这个技能处于施放状态，关闭这个技能（关闭被装饰节点）。否则，什么也不做（停用当前节点）。</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：技能施放中止（被装饰节点停用返回结果）。返回结果true(技能施放成功) / false(技能被打断)。</span></span><br><span class="line"><span class="comment">//停用当前节点，并返回本次技能施放的结果。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冷却时间已过。</span></span><br><span class="line"><span class="comment">//当前节点已激活，且被装饰节点还没激活，则将当前方法添加到间隔调用回调中。并激活被装饰的技能节点。</span></span><br><span class="line"><span class="comment">//当前节点已激活，且被装饰节点也已激活，技能进入准备状态。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TimeoutReached</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Failer—————永远返回false，装饰节点类。被装饰节点返回后，停用并返回false"><a href="#Failer—————永远返回false，装饰节点类。被装饰节点返回后，停用并返回false" class="headerlink" title="Failer—————永远返回false，装饰节点类。被装饰节点返回后，停用并返回false"></a>Failer—————永远返回false，装饰节点类。被装饰节点返回后，停用并返回false</h4><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Failer</span>(<span class="params">Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Failer&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：关闭子节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：停用当前节点，并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Succeeder—————永远返回true，装饰节点类。被装饰节点返回后，停用并返回true"><a href="#Succeeder—————永远返回true，装饰节点类。被装饰节点返回后，停用并返回true" class="headerlink" title="Succeeder—————永远返回true，装饰节点类。被装饰节点返回后，停用并返回true"></a>Succeeder—————永远返回true，装饰节点类。被装饰节点返回后，停用并返回true</h4><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Succeeder</span>(<span class="params">Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Succeeder&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：关闭子节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：停用当前节点，并返回true</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Inverter—————返回子节点取反后的执行结果，装饰节点类。被装饰节点返回后，停用并返回取反后的执行结果"><a href="#Inverter—————返回子节点取反后的执行结果，装饰节点类。被装饰节点返回后，停用并返回取反后的执行结果" class="headerlink" title="Inverter—————返回子节点取反后的执行结果，装饰节点类。被装饰节点返回后，停用并返回取反后的执行结果"></a>Inverter—————返回子节点取反后的执行结果，装饰节点类。被装饰节点返回后，停用并返回取反后的执行结果</h4><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Inverter</span>(<span class="params">Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Inverter&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：关闭子节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：停用当前节点，并返回取反后的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Observer—————观察者，装饰节点类，启动时回调onStart，关闭后回调onStop，onStop决定返回的结果"><a href="#Observer—————观察者，装饰节点类，启动时回调onStart，关闭后回调onStop，onStop决定返回的结果" class="headerlink" title="Observer—————观察者，装饰节点类，启动时回调onStart，关闭后回调onStop，onStop决定返回的结果"></a>Observer—————观察者，装饰节点类，启动时回调onStart，关闭后回调onStop，onStop决定返回的结果</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动时的回调</span></span><br><span class="line"><span class="keyword">private</span> System.Action onStart;</span><br><span class="line"><span class="comment">//停用时的回调</span></span><br><span class="line"><span class="keyword">private</span> System.Action&lt;<span class="built_in">bool</span>&gt; onStop;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化启动时的回调onStart，停用时的回调onStop，以及被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Observer</span>(<span class="params">System.Action onStart, System.Action&lt;<span class="built_in">bool</span>&gt; onStop, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Observer&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：执行onStart，启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：关闭子节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：执行onStop，停用返回onStop的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Random—————概率启动节点，装饰节点类，有一定概率不启动"><a href="#Random—————概率启动节点，装饰节点类，有一定概率不启动" class="headerlink" title="Random—————概率启动节点，装饰节点类，有一定概率不启动"></a>Random—————概率启动节点，装饰节点类，有一定概率不启动</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动的概率</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> probability;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化启动概率probability，被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span>(<span class="params"><span class="built_in">float</span> probability, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Random&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：以probability的概率启动子节点（停用返回false）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：关闭子节点</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：停用当前节点，并返回执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="Repeater—————重复启动子节点，装饰节点类，子节点额外启动loopCount次"><a href="#Repeater—————重复启动子节点，装饰节点类，子节点额外启动loopCount次" class="headerlink" title="Repeater—————重复启动子节点，装饰节点类，子节点额外启动loopCount次"></a>Repeater—————重复启动子节点，装饰节点类，子节点额外启动loopCount次</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子节点额外启动次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> loopCount = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//当前已启动次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> currentLoop;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化需要启动的次数loopCount，被装饰节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Repeater</span>(<span class="params"><span class="built_in">int</span> loopCount, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Repeater&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化被装饰节点decoratee，无限循环执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Repeater</span>(<span class="params">Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Repeater&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点的时候调用：如果启动次数不为0，则启动子节点。否则停用当前节点并返回true</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点的时候调用：Clock移除重新启动子节点的回调，如果子节点是激活状态，则关闭子节点，否则停用当前节点，返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时的回调：在下一帧重启子节点，直到满足次数要求，返回子节点执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重新启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">restartDecoratee</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="TimeMax—————完成时间上界，装饰节点类，在固定时间内需要完成子节点的执行如果未完成：强制关闭子节点-x2F-等待子节点结束后停用当前节点并返回false"><a href="#TimeMax—————完成时间上界，装饰节点类，在固定时间内需要完成子节点的执行如果未完成：强制关闭子节点-x2F-等待子节点结束后停用当前节点并返回false" class="headerlink" title="TimeMax—————完成时间上界，装饰节点类，在固定时间内需要完成子节点的执行如果未完成：强制关闭子节点 &#x2F; 等待子节点结束后停用当前节点并返回false"></a>TimeMax—————完成时间上界，装饰节点类，在固定时间内需要完成子节点的执行如果未完成：强制关闭子节点 &#x2F; 等待子节点结束后停用当前节点并返回false</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有效时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> limit;</span><br><span class="line"><span class="comment">//有效时间的扰动值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> randomVariation;</span><br><span class="line"><span class="comment">//执行超时后，是否要等待子节点。</span></span><br><span class="line"><span class="comment">//true - 执行超时，等待子节点返回后，停用返回false</span></span><br><span class="line"><span class="comment">//false - 执行超时，立即强制关闭子节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> waitForChildButFailOnLimitReached;</span><br><span class="line"><span class="comment">//是否执行超时</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isLimitReached;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化有效时间limit，waitForChildButFailOnLimitReached用来判断执行超时后是否要等待子节点，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeMax</span>(<span class="params"><span class="built_in">float</span> limit, <span class="built_in">bool</span> waitForChildButFailOnLimitReached, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeMax&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化有效时间limit，有效时间的扰动值randomVariation，waitForChildButFailOnLimitReached用来判断执行超时后是否要等待子节点，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeMax</span>(<span class="params"><span class="built_in">float</span> limit, <span class="built_in">float</span> randomVariation, <span class="built_in">bool</span> waitForChildButFailOnLimitReached, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeMax&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活结点时调用：Clock注册计时函数，启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：Clock移除计时函数，关闭子节点，如果子节点处于停用状态，则停用当前节点并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时回调：未超时，停用返回子节点执行结果，否则，停用返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行超时后回调</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TimeoutReached</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="TimeMin—————完成时间下界，装饰节点类，如果子节点在达到限制时间之前返回，当前节点将等待直到达到时间限制停用并返回子节点的执行结果。"><a href="#TimeMin—————完成时间下界，装饰节点类，如果子节点在达到限制时间之前返回，当前节点将等待直到达到时间限制停用并返回子节点的执行结果。" class="headerlink" title="TimeMin—————完成时间下界，装饰节点类，如果子节点在达到限制时间之前返回，当前节点将等待直到达到时间限制停用并返回子节点的执行结果。"></a>TimeMin—————完成时间下界，装饰节点类，如果子节点在达到限制时间之前返回，当前节点将等待直到达到时间限制停用并返回子节点的执行结果。</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有效时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> limit;</span><br><span class="line"><span class="comment">//有效时间的扰动值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> randomVariation;</span><br><span class="line"><span class="comment">//子节点返回时，当前节点是否等到直到达到时间限制后才停用</span></span><br><span class="line"><span class="comment">//true - 子节点返回时，当前节点会等到直到达到时间限制后才停用</span></span><br><span class="line"><span class="comment">//false - 子节点返回false时，当前节点会立即停用并返回false</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> waitOnFailure;</span><br><span class="line"><span class="comment">//是否执行超时</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isLimitReached;</span><br><span class="line"><span class="comment">//是否子节点执行结束</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isDecorateeDone;</span><br><span class="line"><span class="comment">//是否子节点返回成功</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isDecorateeSuccess;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化有效时间limit，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeMin</span>(<span class="params"><span class="built_in">float</span> limit, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeMin&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化有效时间limit，waitOnFailure判断子节点返回时，当前节点是否等到直到达到时间限制后才停用，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeMin</span>(<span class="params"><span class="built_in">float</span> limit, <span class="built_in">bool</span> waitOnFailure, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeMin&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化有效时间limit，有效时间的扰动值randomVariation，waitOnFailure判断子节点返回时，当前节点是否等到直到达到时间限制后才停用，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeMin</span>(<span class="params"><span class="built_in">float</span> limit, <span class="built_in">float</span> randomVariation, <span class="built_in">bool</span> waitOnFailure, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;TimeMin&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：Clock注册计时函数，启动子节点</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：Clock移除计时函数，关闭子节点，如果子节点还没启用，则停用当前节点并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时回调：在任何情况，都会返回子节点的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行超时后回调</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TimeoutReached</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="WaitForCondition—————等到条件满足再启动，装饰节点类。"><a href="#WaitForCondition—————等到条件满足再启动，装饰节点类。" class="headerlink" title="WaitForCondition—————等到条件满足再启动，装饰节点类。"></a>WaitForCondition—————等到条件满足再启动，装饰节点类。</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要满足的条件</span></span><br><span class="line"><span class="keyword">private</span> Func&lt;<span class="built_in">bool</span>&gt; condition;</span><br><span class="line"><span class="comment">//间隔判断时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> checkInterval;</span><br><span class="line"><span class="comment">//间隔判断时间的随机扰动变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> checkVariance;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化需要满足的条件condition，间隔判断时间checkInterval，间隔判断时间的随机扰动变量randomVariance，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaitForCondition</span>(<span class="params">Func&lt;<span class="built_in">bool</span>&gt; condition, <span class="built_in">float</span> checkInterval, <span class="built_in">float</span> randomVariance, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;WaitForCondition&quot;</span>, decoratee</span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化需要满足的条件condition，被装饰的节点decoratee</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaitForCondition</span>(<span class="params">Func&lt;<span class="built_in">bool</span>&gt; condition, Node decoratee</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;WaitForCondition&quot;</span>, decoratee</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：满足condition才能启动子节点，不满足则Clock添加计时函数</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：关闭子节点，如果子节点还没有启用，停用返回false</span></span><br><span class="line"><span class="function"><span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br><span class="line"><span class="comment">//子节点停用时回调：在任何情况，返回子节点的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoChildStopped</span>(<span class="params">Node child, <span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查是否符合条件，符合条件则Clock移除计时函数，启用子节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkCondition</span>()</span>;</span><br></pre></td></tr></table></figure><h3 id="Task（任务节点）"><a href="#Task（任务节点）" class="headerlink" title="Task（任务节点）"></a>Task（任务节点）</h3><h4 id="Task—————任务节点基类，任务节点就是普通的叶子节点，用来处理一系列自定义的任务"><a href="#Task—————任务节点基类，任务节点就是普通的叶子节点，用来处理一系列自定义的任务" class="headerlink" title="Task—————任务节点基类，任务节点就是普通的叶子节点，用来处理一系列自定义的任务"></a>Task—————任务节点基类，任务节点就是普通的叶子节点，用来处理一系列自定义的任务</h4><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化节点名称name</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Task</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="WaitUntilStopped—————等待直到被停用，任务节点类，启动任务后，将永远不会自动关闭，直到有外部关闭当前任务"><a href="#WaitUntilStopped—————等待直到被停用，任务节点类，启动任务后，将永远不会自动关闭，直到有外部关闭当前任务" class="headerlink" title="WaitUntilStopped—————等待直到被停用，任务节点类，启动任务后，将永远不会自动关闭，直到有外部关闭当前任务"></a>WaitUntilStopped—————等待直到被停用，任务节点类，启动任务后，将永远不会自动关闭，直到有外部关闭当前任务</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//停用时返回的执行结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> sucessWhenStopped;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化停用时返回的执行结果sucessWhenStopped</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaitUntilStopped</span>(<span class="params"><span class="built_in">bool</span> sucessWhenStopped = <span class="literal">false</span></span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;WaitUntilStopped&quot;</span></span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭节点时调用：停用当前节点并返回执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="Action—————行为回调，任务节点类，分单帧执行和多帧执行，执行完毕后停用"><a href="#Action—————行为回调，任务节点类，分单帧执行和多帧执行，执行完毕后停用" class="headerlink" title="Action—————行为回调，任务节点类，分单帧执行和多帧执行，执行完毕后停用"></a>Action—————行为回调，任务节点类，分单帧执行和多帧执行，执行完毕后停用</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单帧执行委托，任务启动后立即执行，并停用节点返回结果</span></span><br><span class="line"><span class="keyword">private</span> System.Func&lt;<span class="built_in">bool</span>&gt; singleFrameFunc;</span><br><span class="line"><span class="comment">//多帧执行委托，任务启动后立即以false执行该委托，返回结果合法时停用节点并返回是否SUCCESS</span></span><br><span class="line"><span class="keyword">private</span> System.Func&lt;<span class="built_in">bool</span>, Result&gt; multiFrameFunc;</span><br><span class="line"><span class="comment">//多帧执行委托，任务启动后，立即以参数Request.START执行该委托，返回结果合法时停用节点并返回是否SUCCESS</span></span><br><span class="line"><span class="keyword">private</span> System.Func&lt;Request, Result&gt; multiFrameFunc2;</span><br><span class="line"><span class="comment">//立即执行委托，任务启动后立即执行，并停用节点返回true</span></span><br><span class="line"><span class="keyword">private</span> System.Action action;</span><br><span class="line"><span class="comment">//是否操作受阻</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> bWasBlocked;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：创建立即执行的委托action</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span>(<span class="params">System.Action action</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Action&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：创建多帧执行的委托multiframeFunc（带布尔值）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span>(<span class="params">System.Func&lt;<span class="built_in">bool</span>, Result&gt; multiframeFunc</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Action&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：创建多帧执行的委托multiframeFunc</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span>(<span class="params">System.Func&lt;Request, Result&gt; multiframeFunc2</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Action&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：创建单帧执行的委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span>(<span class="params">System.Func&lt;<span class="built_in">bool</span>&gt; singleFrameFunc</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Action&quot;</span></span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用。</span></span><br><span class="line"><span class="comment">//action：任务启动后，立即执行该委托，停用任务并返回true</span></span><br><span class="line"><span class="comment">//singleFrameFunc：任务启动后，立即执行该委托，委托返回(bool)，停用任务并返回(bool)</span></span><br><span class="line"><span class="comment">//multiFrameFunc：任务启动后，立即以参数false执行该委托</span></span><br><span class="line"><span class="comment">//multiFrameFunc2：任务启动后，立即以参数Request.START执行该委托</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用。</span></span><br><span class="line"><span class="comment">//委托类型 | 委托参数 | Result.BLOCKED | Result.PROGRESS | Result.SUCCESS | Result.FAILED</span></span><br><span class="line"><span class="comment">//multiFrameFunc | true | 停用任务并返回false | 报错 | 停用任务并返回true | 停用任务并返回false</span></span><br><span class="line"><span class="comment">//multiFrameFunc2 | Request.CANCEL | 停用任务并返回false | 报错 | 停用任务并返回true | 停用任务并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每帧调用，用来处理（带布尔值）多帧委托。</span></span><br><span class="line"><span class="comment">//Result.BLOCKED | Result.PROGRESS | Result.SUCCESS | Result.FAILED</span></span><br><span class="line"><span class="comment">//每帧以参数false被调用 | 每帧以参数false被调用 | 停用任务并返回true | 停用任务并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnUpdateFunc</span>()</span>;</span><br><span class="line"><span class="comment">//每帧调用，用来处理多帧委托。</span></span><br><span class="line"><span class="comment">//Result.BLOCKED | Result.PROGRESS | Result.SUCCESS | Result.FAILED</span></span><br><span class="line"><span class="comment">//每帧以参数Request.START被调用 | 每帧以参数Request.UPDATE被调用 | 停用任务并返回true | 停用任务并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnUpdateFunc2</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>Result—————返回状态枚举</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回状态枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Result</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//操作成功</span></span><br><span class="line">    SUCCESS,</span><br><span class="line">    <span class="comment">//操作失败</span></span><br><span class="line">    FAILED,</span><br><span class="line">    <span class="comment">//操作受到阻碍，还需要额外的数据</span></span><br><span class="line">    BLOCKED,</span><br><span class="line">    <span class="comment">//操作在进行中，还有未完成的更新操作</span></span><br><span class="line">    PROGRESS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Request—————请求状态枚举</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Request</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//准备数据中</span></span><br><span class="line">    START,</span><br><span class="line">    <span class="comment">//更新中</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">//关闭任务中</span></span><br><span class="line">    CANCEL,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Wait—————等待节点，任务节点类，成功度过等待时间停用或着手动关闭节点停用"><a href="#Wait—————等待节点，任务节点类，成功度过等待时间停用或着手动关闭节点停用" class="headerlink" title="Wait—————等待节点，任务节点类，成功度过等待时间停用或着手动关闭节点停用"></a>Wait—————等待节点，任务节点类，成功度过等待时间停用或着手动关闭节点停用</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取等待时间的委托，用来获取需要等待的时间</span></span><br><span class="line"><span class="keyword">private</span> System.Func&lt;<span class="built_in">float</span>&gt; function;</span><br><span class="line"><span class="comment">//黑板key，用来获取黑板里的数值作为等待时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> blackboardKey;</span><br><span class="line"><span class="comment">//需要等待的时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> seconds = <span class="number">-1f</span>;</span><br><span class="line"><span class="comment">//随机扰动时间的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> randomVariance;</span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机扰动时间的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> RandomVariance;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化需要等待的时间seconds，随机扰动时间的值randomVariance</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wait</span>(<span class="params"><span class="built_in">float</span> seconds, <span class="built_in">float</span> randomVariance</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Wait&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化需要等待的时间seconds</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wait</span>(<span class="params"><span class="built_in">float</span> seconds</span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Wait&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化获取等待时间的黑板键blackboardKey，随机扰动时间的值randomVariance</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wait</span>(<span class="params"><span class="built_in">string</span> blackboardKey, <span class="built_in">float</span> randomVariance = <span class="number">0f</span></span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Wait&quot;</span></span>)</span>;</span><br><span class="line"><span class="comment">//构造函数：初始化获取等待时间的委托function，随机扰动时间的值randomVariance</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wait</span>(<span class="params">System.Func&lt;<span class="built_in">float</span>&gt; function, <span class="built_in">float</span> randomVariance = <span class="number">0f</span></span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;Wait&quot;</span></span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用。获取到需要等待的时间，之后往Clock添加对应的回调。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用。Clock移除延时回调，停用当前节点并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等待后的回调方法。Clock移除延时回调，停用当前节点并返回true</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTimer</span>()</span>;</span><br></pre></td></tr></table></figure><h4 id="NavMoveTo—————导航移动到目标位置，任务节点类。"><a href="#NavMoveTo—————导航移动到目标位置，任务节点类。" class="headerlink" title="NavMoveTo—————导航移动到目标位置，任务节点类。"></a>NavMoveTo—————导航移动到目标位置，任务节点类。</h4><p><strong>字段：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目的地变化阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DESTINATION_CHANGE_THRESHOLD = <span class="number">0.0001f</span>;</span><br><span class="line"><span class="comment">//目的地变化最大检查次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">uint</span> DESTINATION_CHANGE_MAX_CHECKS = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//AI对象</span></span><br><span class="line"><span class="keyword">private</span> UnityEngine.AI.NavMeshAgent agent;</span><br><span class="line"><span class="comment">//存储坐标信息或Transform信息的黑板key</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> blackboardKey;</span><br><span class="line"><span class="comment">//最低限度距离，用来检查AI是否已经达到目标并停止任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> tolerance;</span><br><span class="line"><span class="comment">//是否启用最低限度距离判断</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> stopOnTolerance;</span><br><span class="line"><span class="comment">//更新频率</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> updateFrequency;</span><br><span class="line"><span class="comment">//随机扰动更新频率值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> updateVariance;</span><br><span class="line"><span class="comment">//上一次移动的目的地位置</span></span><br><span class="line"><span class="keyword">private</span> Vector3 lastDestination;</span><br><span class="line"><span class="comment">//上一次移动后的余下距离</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> lastDistance;</span><br><span class="line"><span class="comment">//失败检查次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">uint</span> failedChecks;</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数：初始化需要移动的对象agent，含有transform信息或者坐标信息的黑板键blackboardKey，可接受的最低限度距离tolerance，是否启用最低限度距离判断stopOnTolerance，更新频率updateFrequency，随机扰动更新频率值updateVariance</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavMoveTo</span>(<span class="params">UnityEngine.AI.NavMeshAgent agent, <span class="built_in">string</span> blackboardKey, <span class="built_in">float</span> tolerance = <span class="number">1.0f</span>, <span class="built_in">bool</span> stopOnTolerance = <span class="literal">false</span>, <span class="built_in">float</span> updateFrequency = <span class="number">0.1f</span>, <span class="built_in">float</span> updateVariance = <span class="number">0.025f</span></span>) : <span class="title">base</span>(<span class="params"><span class="string">&quot;NavMoveTo&quot;</span></span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>抽象方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活节点时调用：向黑板里添加位置变化的回调，并且往时钟里添加间隔执行回调用来监听位置变化</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStart</span>()</span>;</span><br><span class="line"><span class="comment">//关闭节点时调用：停止位移，移除黑板回调以及时钟回调，停止当前节点，并返回false</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoStop</span>()</span>;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//黑板数据变化时的回调：数据变化时更新AI位置信息，移动到指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onBlackboardValueChanged</span>(<span class="params">Blackboard.Type type, <span class="built_in">object</span> newValue</span>)</span>;</span><br><span class="line"><span class="comment">//定时回调：定时更新AI位置信息，移动到指定位置v</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onUpdateTimer</span>()</span>;</span><br><span class="line"><span class="comment">//移动到黑板key里所指定好的位置。</span></span><br><span class="line"><span class="comment">//如黑板数据不存在，停止节点，返回false。</span></span><br><span class="line"><span class="comment">//黑板数据类型不合法，停止节点，返回false。</span></span><br><span class="line"><span class="comment">//检测次数超标，停止节点，返回false。</span></span><br><span class="line"><span class="comment">//成功移动到指定位置，停止节点，返回true。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToBlackboardKey</span>()</span>;</span><br><span class="line"><span class="comment">//停止移动，移除所有监听的回调，同时停止节点，并返回对应结果result</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopAndCleanUp</span>(<span class="params"><span class="built_in">bool</span> result</span>)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 行为树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 行为树 </tag>
            
            <tag> NPBehave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改window登录凭据</title>
      <link href="/2022/01/11/605764abc649/"/>
      <url>/2022/01/11/605764abc649/</url>
      
        <content type="html"><![CDATA[<h3 id="1-进入“控制面板”"><a href="#1-进入“控制面板”" class="headerlink" title="1.进入“控制面板”"></a>1.进入“控制面板”</h3><h3 id="2-找到“用户账户”"><a href="#2-找到“用户账户”" class="headerlink" title="2.找到“用户账户”"></a>2.找到“用户账户”</h3><h3 id="3-选择“管理您的凭据”"><a href="#3-选择“管理您的凭据”" class="headerlink" title="3.选择“管理您的凭据”"></a>3.选择“管理您的凭据”</h3><h3 id="4-切换到“Windows凭据”"><a href="#4-切换到“Windows凭据”" class="headerlink" title="4.切换到“Windows凭据”"></a>4.切换到“Windows凭据”</h3><h3 id="5-改成对应想要的内容即可"><a href="#5-改成对应想要的内容即可" class="headerlink" title="5.改成对应想要的内容即可"></a>5.改成对应想要的内容即可</h3>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOT，JIT简单认知</title>
      <link href="/2022/01/09/a17cf1f1abf9/"/>
      <url>/2022/01/09/a17cf1f1abf9/</url>
      
        <content type="html"><![CDATA[<p><strong>JIT</strong>：即Just-in-time,动态(即时)编译，边运行边编译；　　</p><p><strong>AOT</strong>：Ahead Of Time，指运行前编译，是两种程序的编译方式；</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>这两种编译方式的主要区别在于是否在“运行时”进行编译</p><h3 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h3><h4 id="JIT优点："><a href="#JIT优点：" class="headerlink" title="JIT优点："></a>JIT优点：</h4><ul><li><p>可以根据当前硬件情况实时编译生成最优机器指令（ps. AOT也可以做到，在用户使用时使用字节码根据机器情况再做一次编译）</p></li><li><p>可以根据当前程序的运行情况生成最优的机器指令序列</p></li><li><p>当程序需要支持动态链接时，只能使用JIT</p></li><li><p>可以根据进程中内存的实际情况调整代码，使内存能够更充分的利用</p></li></ul><h4 id="JIT缺点："><a href="#JIT缺点：" class="headerlink" title="JIT缺点："></a>JIT缺点：</h4><ul><li><p>编译需要占用运行时资源，会导致进程卡顿</p></li><li><p>由于编译时间需要占用运行时间，对于某些代码的编译优化不能完全支持，需要在程序流畅和编译时间之间做权衡</p></li><li><p>在编译准备和识别频繁使用的方法需要占用时间，使得初始编译不能达到最高性能</p></li></ul><h4 id="AOT优点："><a href="#AOT优点：" class="headerlink" title="AOT优点："></a>AOT优点：</h4><ul><li><p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</p></li><li><p>可以在程序运行初期就达到最高性能</p></li><li><p>可以显著的加快程序的启动</p></li></ul><h4 id="AOT缺点："><a href="#AOT缺点：" class="headerlink" title="AOT缺点："></a>AOT缺点：</h4><ul><li><p>在程序运行前编译会使程序安装的时间增加</p></li><li><p>牺牲Java的一致性</p></li><li><p>将提前编译的内容保存会占用更多的外部空间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中的IEquatable&lt;T&gt;接口</title>
      <link href="/2022/01/09/759607235fb9/"/>
      <url>/2022/01/09/759607235fb9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h3><p>首先我们先来看看<code>IEquatable&lt;T&gt;</code>接口的出现解决了什么问题。</p><p>我们知道，<code>Object</code>基类的<code>Equals</code>方法存在两个明显的问题。一是<font color = red><strong>缺乏类型安全性</strong></font>，二是<font color = red><strong>对于值类型而言需要装箱</strong></font>。在本文中我们就来看下<code>IEquatable&lt;T&gt; </code>接口是如何解决这两个问题的。</p><h3 id="2-IEquatable-lt-T-gt-接口"><a href="#2-IEquatable-lt-T-gt-接口" class="headerlink" title="2.IEquatable&lt;T&gt;接口"></a>2.<code>IEquatable&lt;T&gt;</code>接口</h3><p>我们都知道的一个事实是：如果想让<code>Object</code>的<code>Equals</code>方法为所有派生类型所用，那么，它的参数就必须设计成<code>object</code>类型。</p><p><code>object</code>是<font color = red><strong>引用类型</strong></font>，这就意味着，如果传递一个<font color = red><strong>值类型</strong></font>的参数，那么该参数将被<font color = red><strong>装箱</strong></font>，这就会造成性能损失。</p><p>另外，还存在另一个问题：将<code>object</code>类型设为参数还意味着类型安全性的缺失。</p><p>解决装箱和类型安全性问题的一个办法就是定义一个新的<code>Equals</code>方法，该方法接受一个和待比较类型相同类型的参数。例如，对于字符串类型而言，定义一个接受<code>string</code>类型的<code>Equals</code>方法就能圆满解决这两个问题。</p><p>但这会面临另一个新的问题，那就是：<strong>定义强类型的方法和OOP中的继承存在根本的冲突</strong>。我们不能在<code>Object</code>基类中定义一个强类型的<code>Equals</code>方法，因为<code>Object</code>基类根本无法知晓派生类的类型。</p><p>那么，我们怎么样才能定义一个强类型的<code>Equals</code>方法，同时该方法能被所有类型使用呢？微软解决这个问题的思路就是通过提供一个<code>IEquatable&lt;T&gt;</code>接口，该接口向所有类型暴露。查看该接口的定义时，可以发现它仅暴露了一个<code>Equals</code>方法，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEquatable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params">T other</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>Equals</code>方法和<code>Object</code>基类的<code>虚Equals</code>方法的作用相同，只不过它<strong>接受一个T类型参数</strong>，因此，它是<strong>强类型</strong>的，这意味着对于值类型而言，不存在装箱的问题。</p><h3 id="3-IEquatable-lt-T-gt-接口和值类型"><a href="#3-IEquatable-lt-T-gt-接口和值类型" class="headerlink" title="3. IEquatable&lt;T&gt;接口和值类型"></a>3. <code>IEquatable&lt;T&gt;</code>接口和值类型</h3><p>我们可以通过一个简单的例子来证明<code>IEquatable&lt;T&gt;</code>接口的使用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">2</span>; </span><br><span class="line">    <span class="built_in">int</span> c = <span class="number">1</span>; </span><br><span class="line">    Console.WriteLine(a.Equals(b)); </span><br><span class="line">    Console.WriteLine(a.Equals(c)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了三个整型变量，然后使用<code>Equals</code>方法进行比较。在VS中借助智能感知，可以发现对于<code>int</code>类型而言存在两个<code>Equals</code>方法，一个接受<code>object</code>参数，另一个接受<code>int</code>类型参数。接受<code>int</code>参数的<code>Equals</code>方法实现了<code>IEquatable&lt;T&gt;</code>接口，其中，<code>T</code>为<code>int</code>类型。因为我们在调用<code>Equals</code>方法时传递的是一个<code>int</code>类型变量，而不是一个<code>object</code>变量，因此，编译器将选择实现了<code>IEquatable&lt;T&gt;</code>接口的<code>Equals</code>方法。</p><p>在平常开发中对于<code>int</code>类型的比较，我们不会像上面那样使用<code>Equals</code>方法进行比较，而是使用更加简便明了的&#x3D;&#x3D;操作符。</p><p>所有的基元类型都提供了对<code>IEquatable&lt;T&gt;</code>接口的实现，就像上面代码中的<code>int</code>类型那样，<code>int</code>类型实现了<code>IEquatable&lt;int&gt;</code>。</p><p>总体而言，<code>IEquatable&lt;T&gt;</code>接口对值类型非常有用。但微软并没有为FCL中的非基元的值类型实现该接口，因此，不能寄希望于对FCL中值类型而言总是可以使用该接口。</p><h3 id="4-IEquatable-lt-T-gt-和引用类型"><a href="#4-IEquatable-lt-T-gt-和引用类型" class="headerlink" title="4.IEquatable&lt;T&gt;和引用类型"></a>4.<code>IEquatable&lt;T&gt;</code>和引用类型</h3><p>对于引用类型而言，<code>IEquatable&lt;T&gt;</code>接口并没有那么有用。一是因为引用类型不存在像值类型那样的由装箱导致的性能问题，二是因为<code>IEquatable&lt;T&gt;</code>接口不能很好地处理继承问题。</p><p>但值的注意的是，<code>string</code>类型实现了<code>IEquatable&lt;T&gt;</code>接口，如下面所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">&quot;Hello World&quot;</span>; </span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="built_in">string</span>.Copy(s1); </span><br><span class="line">    Console.WriteLine(s1.Equals(s2); </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>上面的代码中，C#编译器将直接选择强类型的<code>Equals</code>方法。另外，<code>string</code>类型是<code>sealed</code>的，因此，你不能从它继承。这样，<strong>在相等性判定和继承之间的冲突就不存在了</strong>。</p><p>很明显，若一个类型定义了两个<code>Equals</code>方法，我们希望它们对相同的输入，产生相同的输出。关于这一点，微软提供的默认实现都严格履行了这一点。当我们自己去实现<code>IEquatable&lt;T&gt;</code>接口时，也要保证这一点。否则，别的开发者使用你定义的类型时将感到困惑。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 查看代码执行时间</title>
      <link href="/2022/01/09/afd87fef7a0c/"/>
      <url>/2022/01/09/afd87fef7a0c/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用命名空间</span></span><br><span class="line">    <span class="keyword">using</span> System.Diagnostics;</span><br><span class="line">     </span><br><span class="line">    Stopwatch swatch = <span class="keyword">new</span> Stopwatch();    <span class="comment">//创建Stopwatch 实例</span></span><br><span class="line">    swatch.Start();    <span class="comment">//开始计时</span></span><br><span class="line">    code....           <span class="comment">//需要计时的代码</span></span><br><span class="line">    swatch.Stop();     <span class="comment">//结束计时</span></span><br><span class="line">    <span class="built_in">string</span> time=swatch.Elapsed.ToString()  <span class="comment">//获取执行时间。以00:00:00(时:分:秒)格式返回。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#通过反射获取自己想要的属性与方法</title>
      <link href="/2022/01/09/e3701e28c2a0/"/>
      <url>/2022/01/09/e3701e28c2a0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-首先需要找到自己想要获取的属性（方法）的Type类型"><a href="#1-首先需要找到自己想要获取的属性（方法）的Type类型" class="headerlink" title="1.首先需要找到自己想要获取的属性（方法）的Type类型"></a>1.首先需要找到自己想要获取的属性（方法）的Type类型</h3><p>我们可以使用**<code>typeof </code>**或者 **<code>GetType</code><strong>方法来获取自己所需要的</strong><code>Type</code>**类型，但是这二者之间是存在区别的。</p><p>总得来说二者都是为了获取某个实例具体引用的数据类型**<code>System.Type</code>**。</p><blockquote><p><code>GetType</code>方法继承自<code>Object</code>，所以C#中任何对象都具有<code>GetType</code>方法，<code>x.GetType()</code>，其中x为变量名</p><p><code>typeof(x)</code>中的x，必须是具体的类名、类型名称等，不可以是变量名称</p></blockquote><h5 id="①-typeof介绍"><a href="#①-typeof介绍" class="headerlink" title="①.typeof介绍"></a>①.<code>typeof</code>介绍</h5><p><code>typeof</code>是支持强类型的，如：<code>Type type = typeof(EditorGUI); </code>前提是项目必须引用<code>EditorGUI</code>所在的程序集(<code>dll</code>)</p><h5 id="②-GetType介绍"><a href="#②-GetType介绍" class="headerlink" title="②.GetType介绍"></a>②.<code>GetType</code>介绍</h5><p><code>Type.GetType</code>是非强类型，如果参数<code>typeName</code> 类型位于当前正在执行的程序集中或者 <code>mscorlib.dll/System.Private.CoreLib.dll </code>中，则提供由命名空间限定的类型名称就足够了，否则需要<strong>完全限定名（一般是命名空间+类名）</strong></p><p><font color = red><strong>完全限定名</strong></font>:假如说，我想要获取Unity里<code>UnityEditor.dll</code>里的 <code>UnityEditor.CurveEditorWindow</code>类，那么需要输入<strong>完全限定名</strong>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type curveEditorWindowType = Type.GetType(<span class="string">&quot;UnityEditor.CurveEditorWindow,UnityEditor&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以看到，字符串里面，包括了<code>UnityEditor.CurveEditorWindow</code>，但是还存在一个分隔符<code>,</code>，分隔符后，跟着命名空间<code>UnityEditor</code>，这就是完全限定名。</p><p>这里列出部分可能用到的分隔符：</p><table><thead><tr><th>分隔符</th><th>含义</th></tr></thead><tbody><tr><td>反斜杠 ()</td><td>转义符。</td></tr><tr><td>反撇号 (“)</td><td>在一个或多个数字之前，表示泛型类型名称末尾的类型参数的数目。</td></tr><tr><td>方括号 ( [] )</td><td>为构造的泛型类型包含泛型类型参数列表;在类型参数列表中，将程序集限定的类型括起来。</td></tr><tr><td>逗号 (,)</td><td>在程序集名称之前。</td></tr><tr><td>Period (。 )</td><td>表示命名空间标识符。</td></tr><tr><td>加号 (+)</td><td>在嵌套类之前。</td></tr></tbody></table><p>不过按照上述获取，其实还是有许多的不确定性，所以可以通过先获取<code>dll</code>的方式，再通过当前获取的程序集加载指定类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果用Assembly.Load加载的话，参数只要填写程序集名称的长格式或短格式</span></span><br><span class="line"><span class="comment">//但是如果使用LoadFrom加载，参数就必须是给定程序集的文件名或路径</span></span><br><span class="line"><span class="comment">//使用LoadFile加载,参数就需要完全限定路径（绝对路径）</span></span><br><span class="line"><span class="keyword">var</span> dll = Assembly.Load(<span class="string">&quot;UnityEditor.dll&quot;</span>); </span><br><span class="line">Type curveEditorWindowType = dll.GetType(<span class="string">&quot;UnityEditor.CurveEditorWindow&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-找到自己想要的属性，或者方法名称"><a href="#2-找到自己想要的属性，或者方法名称" class="headerlink" title="2.找到自己想要的属性，或者方法名称"></a>2.找到自己想要的属性，或者方法名称</h3><blockquote><p>因为是在整理Unity的曲线编辑器时，需要获取一些私有或者内部的方法，才开始写这篇文章，所以这边的案例都以Unity里的获取为准。</p><p>不过具体思路基本上是一样，只不过沿用了Unity引擎的方法。</p></blockquote><h5 id="①-获取EditorGUI类里的SetCurveEditorWindowCurve方法，以及ShowCurvePopup方法"><a href="#①-获取EditorGUI类里的SetCurveEditorWindowCurve方法，以及ShowCurvePopup方法" class="headerlink" title="①.获取EditorGUI类里的SetCurveEditorWindowCurve方法，以及ShowCurvePopup方法"></a>①.获取<code>EditorGUI</code>类里的<code>SetCurveEditorWindowCurve</code>方法，以及<code>ShowCurvePopup</code>方法</h5><p>首先查看这两个方法的代码是什么结构：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">UnityEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">EditorGUI</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetCurveEditorWindowCurve</span>(<span class="params">AnimationCurve <span class="keyword">value</span>,SerializedProperty property,Color color</span>)</span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowCurvePopup</span>(<span class="params">Rect ranges</span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后通过反射来获取这两个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为EditorGUI是public类型，所以可以直接通过typeof的方式来获取</span></span><br><span class="line">Type type = <span class="keyword">typeof</span>(EditorGUI);</span><br><span class="line">MethodInfo setCurveEditorWindowCurveMethodInfo = type.GetMethod(</span><br><span class="line">    <span class="string">&quot;SetCurveEditorWindowCurve&quot;</span>,<span class="comment">//方法名</span></span><br><span class="line">    BindingFlags.NonPublic | BindingFlags.Static,<span class="comment">//筛选条件</span></span><br><span class="line">    Type.DefaultBinder,<span class="comment">//绑定</span></span><br><span class="line">    <span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(AnimationCurve), <span class="keyword">typeof</span>(SerializedProperty), <span class="keyword">typeof</span>(Color) &#125;,<span class="comment">//参数类型</span></span><br><span class="line">    <span class="keyword">new</span>[] &#123; <span class="keyword">new</span> ParameterModifier(<span class="number">3</span>) &#125;<span class="comment">//参数个数</span></span><br><span class="line">);</span><br><span class="line">MethodInfo showCurvePopupMethodInfo = type.GetMethod(</span><br><span class="line">    <span class="string">&quot;ShowCurvePopup&quot;</span>, </span><br><span class="line">    BindingFlags.NonPublic | BindingFlags.Static,</span><br><span class="line">    Type.DefaultBinder,</span><br><span class="line">    <span class="keyword">new</span>[] &#123;<span class="keyword">typeof</span>(Rect)&#125;,</span><br><span class="line">    <span class="keyword">new</span>[] &#123; <span class="keyword">new</span> ParameterModifier(<span class="number">1</span>) &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>方法调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OpenAnimationCurveEditorWindow</span>(<span class="params">AnimationCurve curve, SerializedProperty property, Color lineColor</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> setCurveEditorWindowCurveData = <span class="keyword">new</span>[] &#123;curve, property, (<span class="built_in">object</span>)lineColor&#125;;</span><br><span class="line">    <span class="keyword">var</span> showCurvePopupData = <span class="keyword">new</span>[] &#123;<span class="keyword">new</span> Rect() <span class="keyword">as</span> <span class="built_in">object</span>&#125;;</span><br><span class="line">    setCurveEditorWindowCurveMethodInfo.Invoke(<span class="literal">null</span>, setCurveEditorWindowCurveData);<span class="comment">//因为是静态类，所以参数1传入null即可</span></span><br><span class="line">    showCurvePopupMethodInfo.Invoke(<span class="literal">null</span>, showCurvePopupData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="②-获取CurveEditorWindow类里的curve属性"><a href="#②-获取CurveEditorWindow类里的curve属性" class="headerlink" title="②.获取CurveEditorWindow类里的curve属性"></a>②.获取<code>CurveEditorWindow</code>类里的<code>curve</code>属性</h5><p>首先查看代码结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">namespace UnityEditor</span><br><span class="line">&#123;</span><br><span class="line">  [Serializable]</span><br><span class="line">  internal <span class="class"><span class="keyword">class</span> <span class="title">CurveEditorWindow</span> :</span> EditorWindow</span><br><span class="line">  &#123;</span><br><span class="line">      public <span class="type">static</span> AnimationCurve curve&#123;get;<span class="built_in">set</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始通过代码结构信息来写反射方法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为CurveEditorWindow类是internal的，用typeof获取会编译出错，所以这里采用GetType</span></span><br><span class="line">Type curveEditorWindowType = Type.GetType(<span class="string">&quot;UnityEditor.CurveEditorWindow,UnityEditor&quot;</span>);</span><br><span class="line"><span class="comment">//获取通过属性信息，获取PropertyInfo</span></span><br><span class="line">PropertyInfo curvePropertyInfo = curveEditorWindowType.GetProperty(<span class="string">&quot;curve&quot;</span>, BindingFlags.Public | BindingFlags.Static);</span><br></pre></td></tr></table></figure><p>属性调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnimationCurve animationCurveValue = curvePropertyInfo.GetValue(<span class="literal">null</span>) <span class="keyword">as</span> AnimationCurve; <span class="comment">//因为是静态属性，所以直接传入null即可</span></span><br></pre></td></tr></table></figure><h3 id="3-如果碰上Assembly-Load，Assembly-LoadFrom全部都返回Null，报FileNotFoundException异常"><a href="#3-如果碰上Assembly-Load，Assembly-LoadFrom全部都返回Null，报FileNotFoundException异常" class="headerlink" title="3.如果碰上Assembly.Load，Assembly.LoadFrom全部都返回Null，报FileNotFoundException异常"></a>3.如果碰上Assembly.Load，Assembly.LoadFrom全部都返回Null，报FileNotFoundException异常</h3><p>碰上这种情况，通常是因为，想要查询的程序集（dll）并不是存储在应用程序的探测路径中。</p><p>所以这个时候，就需要一个新的手段来获取我们想要的程序集：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假如说这里，我想要获取Unity的Unity.Timeline.Editor.dll，但这个程序集，并不在探测路径里面，因此可以用以下手段：</span></span><br><span class="line">Assembly assembly = AppDomain.CurrentDomain.Load(<span class="string">&quot;Unity.Timeline.Editor&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过获取当前已经加载的应用程序域，来读取其中想要获取的程序集即可。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/01/09/29c3c2c3aeb0/"/>
      <url>/2022/01/09/29c3c2c3aeb0/</url>
      
        <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意</strong>：</p><p>1、单例类只能有一个实例。</p><p>2、单例类必须自己创建自己的唯一实例。</p><p>3、单例类必须给所有其他对象提供这一实例。</p><p>明确定义后，看一下代码：</p><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonEH</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment">     *是否多线程安全：是</span></span><br><span class="line"><span class="comment">     *实现难度：易</span></span><br><span class="line"><span class="comment">     *描述：这种方式比较常用，但容易产生垃圾对象。</span></span><br><span class="line"><span class="comment">     *优点：没有加锁，执行效率会提高。</span></span><br><span class="line"><span class="comment">     *缺点：类加载时就初始化，浪费内存。</span></span><br><span class="line"><span class="comment">     *它基于 classloder 机制避免了多线程的同步问题，</span></span><br><span class="line"><span class="comment">     * 不过，ins 在类装载时就实例化，虽然导致类装载的原因有很多种，</span></span><br><span class="line"><span class="comment">    * 在单例模式中大多数都是调用 Ins 方法，</span></span><br><span class="line"><span class="comment">     * 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，</span></span><br><span class="line"><span class="comment">     * 这时候初始化 ins 显然没有达到 lazy loading 的效果。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonEH ins = <span class="keyword">new</span> SingletonEH();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonEH</span> ()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonEH Ins</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;instance:&quot;</span>+ins);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;加载饿汉式....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ins; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉就是类一旦加载，就把单例初始化完成，保证调用Ins的时候，单例是已经存在的了。</p><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonLH</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment">     *是否多线程安全：否</span></span><br><span class="line"><span class="comment">     *实现难度：易</span></span><br><span class="line"><span class="comment">     *描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 lock，所以严格意义上它并不算单例模式。</span></span><br><span class="line"><span class="comment">     *这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLH ins;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLH</span> ()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLH Ins =&gt; ins ?? (ins = <span class="keyword">new</span> SingletonLH());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而懒汉比较懒，只有当调用Ins的时候，才回去初始化这个单例。</p><p><strong>1.简单线程安全：</strong></p><p>饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，</p><p>懒汉式本身是非线程安全的，为了实现线程安全有几种写法。</p><p>例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonLHsyn</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment">     *是否多线程安全：是</span></span><br><span class="line"><span class="comment">     *实现难度：易</span></span><br><span class="line"><span class="comment">     *描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</span></span><br><span class="line"><span class="comment">     *优点：第一次调用才初始化，避免内存浪费。</span></span><br><span class="line"><span class="comment">     *缺点：必须加锁 lock 才能保证单例，但加锁会影响效率。</span></span><br><span class="line"><span class="comment">     *Ins 的性能对应用程序不是很关键（该方法使用不太频繁）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLHsyn ins;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLHsyn</span> ()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLHsyn Ins </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span> (_lock)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> ins ?? (ins = <span class="keyword">new</span> SingletonLHsyn());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而上面只是简单的线程安全，通过对一个多线程共享的对象进行加锁操作，保证了在同一时刻只有一个线程在执行lock{}里的代码。当第一个线程在进行Ins判断或创建时，后续线程必须等待直到前一线程执行完毕，因此保证了只有第一个线程能够创建instance实例。</p><p>但不幸的是，因为每次对Ins的请求都会进行lock操作，其性能是不佳的。</p><p>需要注意的是，这里使用了一个private static object变量进行锁定，这是因为当如果对一个外部类可以访问的对象进行锁定时会导致性能低下甚至死锁。因此通常来说为了保证线程安全，进行加锁的对象应该是private的。</p><p><strong>2.Double-check locking的线程安全</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonLHsyn1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLHsyn1 ins;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLHsyn1</span> ()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLHsyn1 Ins </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ins != <span class="literal">null</span>) <span class="keyword">return</span> ins;</span><br><span class="line">            <span class="keyword">lock</span> (_lock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ins ?? (ins = <span class="keyword">new</span> SingletonLHsyn1());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该版本中试图去避免每次访问都进行加锁操作并实现线程安全。然后，这段代码对Java不起作用，因Java的内存模型不能保证在构造函数一定在其他对象引用Ins之前完成。还有重要的一点，它不如后面的实现方式。</p><p><strong>3.不完全懒汉式，但不加锁的线程安全</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SingletonLHsyn2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> SingletonLHsyn2 ins = <span class="keyword">new</span> SingletonLHsyn2();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 显式的静态构造函数用来告诉C#编译器在其内容实例化之前不要标记其类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">SingletonLHsyn2</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLHsyn2</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLHsyn2 Ins =&gt; ins;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本是的实现非常的简单，但是却又是线程安全的。C#的静态构造函数只有在当其类的实例被创建或者有静态成员被引用时执行，在整个应用程序域中只会被执行一次。使用当前方式明显比前面版本中进行额外的判断要快。</p><p>当然这个版本也存在一些瑕疵：</p><ul><li>不是真正意义上的懒汉模式(需要的时候才创建实例)，若单例类还存在其他静态成员，当其他类第一次引用这些成员时便会创建该ins。下个版本实现会修正这个问题；</li><li>只有.NET中才具有beforefieldinit特性，即懒汉式实现。且在.Net 1.1以前的编译器不支持，不过这个现在来看问题不大；</li></ul><p>所有版本中，只有这里将ins设置成了readonly,这不仅保证了代码的高校且显得十分短小。</p><p><strong>4.完全懒汉实例化</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SingletonLHsyn3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLHsyn3</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLHsyn3 Ins =&gt; Nested.ins;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">Nested</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">Nested</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">readonly</span> SingletonLHsyn3 ins = <span class="keyword">new</span> SingletonLHsyn3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该版本看起来稍微复杂难懂，其实只是在写法上实现了上一版本的瑕疵，通过内嵌类的方式先实现了只有在真正应用Ins时才进行实例化。其性能表现与上一版本无异。</p><p><strong>5.使用.NET 4 Lazy type 特性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SingletonLHsyn4</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;SingletonLHsyn4&gt; lazy = <span class="keyword">new</span> Lazy&lt;SingletonLHsyn4&gt;(()=&gt; <span class="keyword">new</span> SingletonLHsyn4());</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLHsyn4 Ins =&gt; lazy.Value;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLHsyn4</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用的是.NET 4或其以上版本，可以使用System.Lazy type来实现完全懒汉式。其代码看起来也很简洁且性能表现也很好。</p><p><strong>6.性能 VS 懒汉式</strong></p><p>一般情况下，我们并不需要实现完全懒汉式，除非你的构造初始化执行了某些费时的工作。因此一般的，我们使用显式的静态构造函数就能够适用。</p><p><strong>7.Exception</strong></p><p>有时候在进行构造函数初始化时可能 会抛出异常，但这对整个应用程序来说不应该是致命的，所以可能的情况下，你应该自己处理这种异常情况。</p><p><strong>8.总结</strong></p><p>上述提供的几种实现方法中，一般情况下提倡使用<code>Version 3</code>，除非遇到有时早于单列类实例化时就引用了其他静态成员。这种情况下，<code>Version 1</code>一旦被考虑，虽然它看起来会因加锁耗时，但是其实运行起来并没有你想的那么慢，关键是你很容易写对它。显然<code>Version 0</code>你永远都不应该考虑，<code>Version 2</code>在与<code>Version 4</code>的对比下也是不在考虑范围之内的。</p><h4 id="资源加载和性能："><a href="#资源加载和性能：" class="headerlink" title="资源加载和性能："></a>资源加载和性能：</h4><p>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成。</p><p>而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。</p><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><p>**应用实例： **1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。</p><p><strong>注意事项：</strong>Ins属性中需要使用同步锁 lock 防止多线程同时进入造成ins 被多次实例化。</p>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2022/01/09/d0d282db2378/"/>
      <url>/2022/01/09/d0d282db2378/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注1：本文是由作者个人为了巩固记忆而进行的总结，如有错误请指出。<br>注2：总结的内容主要来自于《Head First 设计模式》一书。</p></blockquote><p>小A做了一款模拟鸭子的游戏：SimulateDuck。游戏中会出现各种鸭子，一边游泳戏水，一边呱呱叫。他设计了一个鸭子父类（Duck）,并让各种鸭子继承此类。结构如下：</p><p><img src="/./%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/1-1.png" alt="UML"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鸭子父类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span> &#123; &#125;<span class="comment">//呱呱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span>()</span> &#123; &#125;<span class="comment">//游泳</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//鸭子外观</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绿头鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MallardDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是绿头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 红头鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedHeadDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是红头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候小A又接到了新的需求：让鸭子能飞！小J心想，这还不简单，只需要在Duck类中加上Fly()方法，然后所有鸭子都会继承Fly()，这是我大显身手的时候了。于是小A修改结构如下：</p><img src="/2022/01/09/d0d282db2378/1-2.png" class="" title="UML"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鸭子父类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span> &#123; &#125;<span class="comment">//呱呱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span>()</span> &#123; &#125;<span class="comment">//游泳</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//鸭子外观</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span> &#123; &#125;<span class="comment">//鸭子飞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了鸭子飞行功能的添加，小A又接到了新的命令，那就是添加上橡皮鸭以及诱饵鸭（木头鸭），小A很轻松的解决了需求。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 橡皮鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubberDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是橡皮鸭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 诱饵鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecoyDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是木头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可怕的问题出来了，小A在展示项目的时候，发现有很多的“橡皮鸭子”在屏幕上飞来飞去。他体会到了一件事：<strong>当涉及“维护”时，为了“复用”(reuse)目的而使用继承，结局并不完美。</strong></p><p>小A想到了<strong>继承</strong>，比如说把橡皮鸭里头的Fly()方法覆盖掉…同时他也修补上了一些自己觉得是逻辑上的BUG。于是他修改代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 橡皮鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubberDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是橡皮鸭</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//覆盖，从呱呱叫变成吱吱叫</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//覆盖，变成什么事都不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 诱饵鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecoyDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> &#123; &#125;<span class="comment">//外观是木头</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//覆盖，变成什么事都不做</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//覆盖，变成什么事都不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完代码的小A一脸烦躁，因为他忽然意识到，这样一直利用继承来提供Duck的行为，会导致许许多多的问题出现，比如说：</p><pre><code>1· 代码在多个子类中重复 2· 运行时的行为不容易改变3· 很难知道所有鸭子的行为4· 改变会牵一发动全身，造成其他鸭子不想要的改变</code></pre><p>最让人担心的事情还是发生了，小A刚刚拿到了未来的产品规划：每隔几个月更新产品（至于更新方法，还没想到）。他知道规格会常常发生改变，每当有新鸭子出现，他就要被迫检查并可能需要覆盖Fly()和Quack()…这简直就是无穷无尽的噩梦，此时，他想到了<strong>接口</strong>。具体结构如下:</p><img src="/2022/01/09/d0d282db2378/1-3.png" class="" title="UML"><p>小A知道，并非“所有”的子类都具有飞行和呱呱叫的行为，所以继承并不是适当的解决方式。虽然IFlyable与IQuackable可以解决“一部分”问题（不会再有会飞的橡皮鸭），但是却造成了代码无法复用，这不过是从一个噩梦跳进另一个噩梦。甚至，在会飞的鸭子中，飞行的动作可能还有多种的变化。于是小A决定再次重构。</p><p><strong>设计原则：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong></p><p>现在，为了要分开“变化和不会变化的部分”，小A准备建立两组类（完全远离Duck类），一个是“Fly”相关的，一个是“Quack”相关的，每一组类将实现各自的动作。具体结构如下：</p><img src="/2022/01/09/d0d282db2378/1-4.png" class="" title="UML"><p>下边是鸭子行为的接口和实现该接口的具体行为类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鸭子叫行为接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IQuackBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Quack</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鸭子飞行为接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlyWithWings</span> : <span class="title">IFlyBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//实现鸭子的飞行动作</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;普通的飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlyNoWay</span> : <span class="title">IFlyBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//什么都不做，不会飞！</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;不会飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NormalQuack</span> : <span class="title">IQuackBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//实现鸭子呱呱叫</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;呱呱叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MuteQuack</span> : <span class="title">IQuackBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//什么都不做，不会叫</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;不会叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Squeak</span> : <span class="title">IQuackBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Quack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//实现鸭子吱吱叫</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;吱吱叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是鸭子的抽象父类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 鸭子父类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为行为接口类型声明两个引用变量，所有鸭子子类都继承它们</span></span><br><span class="line">    IFlyBehavior flyBehavior;</span><br><span class="line">    IQuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PerformFly</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior.Fly(); <span class="comment">//将飞行方法委托给行为类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PerformQuack</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        quackBehavior.Quack();<span class="comment">//将鸭子叫方法委托给行为类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>;<span class="comment">//必须要实现的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swim</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//鸭子游泳</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;所有鸭子都能浮起来..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置鸭子的飞行行为</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFlyBehavior</span>(<span class="params">IFlyBehavior behavior</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = behavior;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置鸭子的叫行为</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetQuackBehavior</span>(<span class="params">IQuackBehavior behavior</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        quackBehavior = behavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是具体的鸭子类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 红头鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedHeadDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//红头鸭又会飞，又会呱呱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedHeadDuck</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> NormalQuack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//外观是红头</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;外观是红头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绿头鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MallardDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">//绿头鸭又会飞，又会呱呱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> NormalQuack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//外观是绿头</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;外观是绿头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 橡皮鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubberDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//橡皮鸭不会飞，但会吱吱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RubberDuck</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Squeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//外观是橡皮鸭</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;外观是橡皮鸭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 诱饵鸭</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecoyDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//诱饵鸭不会飞也不会叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecoyDuck</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> MuteQuack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//外观是木头</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;外观是木头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在Unity上的测试代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StrategyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明一只绿头鸭</span></span><br><span class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        mallard.PerformFly();<span class="comment">//绿头鸭飞行</span></span><br><span class="line">        mallard.PerformQuack();<span class="comment">//绿头鸭叫</span></span><br><span class="line">        mallard.Display();<span class="comment">//绿头鸭外观</span></span><br><span class="line">        mallard.Swim();<span class="comment">//绿头鸭游泳</span></span><br><span class="line">        <span class="comment">//改变绿头鸭叫的行为跟飞行行为</span></span><br><span class="line">        mallard.SetFlyBehavior(<span class="keyword">new</span> FlyNoWay());<span class="comment">//不让它飞了</span></span><br><span class="line">        mallard.SetQuackBehavior(<span class="keyword">new</span> Squeak());<span class="comment">//让它吱吱叫</span></span><br><span class="line">        mallard.PerformFly();<span class="comment">//绿头鸭再飞行</span></span><br><span class="line">        mallard.PerformQuack();<span class="comment">//绿头鸭再叫</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的结果展示：</p><p><font color = "blue">输出：<code>普通的飞</code></font></p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>呱呱叫</code></font></p><p><font color = "blue">输出：<code>外观是绿头</code></font></p><p><font color = "blue">输出：<code>所有的鸭子都能浮起来..</code></font></p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>吱吱叫</code></font></p><p><strong>设计原则：针对接口编程，而不是针对实现编程。</strong></p><p>这时候新的需求又来了，要添加一个新的鸭子：模型鸭，并且一开始模型鸭是不会飞的。可以通过后期加装火箭动力让它飞行。那么，小A又该怎么设计呢？经过一番思考，小A的代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 声明一个新的火箭飞行类实现飞行行为接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlyRocketPowered</span> : <span class="title">IFlyBehavior</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//起飞！火箭发射！</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;起飞！火箭发射！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 并且声明一只新鸭子：模型鸭 继承 Duck</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModelDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//模型鸭不会飞也不会叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> MuteQuack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//外观是模型</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;外观是模型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StrategyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明一只模型鸭</span></span><br><span class="line">        Duck model = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        model.PerformFly();<span class="comment">//让模型鸭飞，事实证明，它不会飞</span></span><br><span class="line">        model.SetFlyBehavior(<span class="keyword">new</span> FlyRocketPowered());<span class="comment">//给模型鸭安装上火箭喷射器</span></span><br><span class="line">        model.PerformFly();<span class="comment">//让模型鸭再次起飞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的结果展示：</p><p><font color = "blue">输出：<code>不会飞</code></font></p><p><font color = "blue">输出：<code>起飞！火箭发射！</code></font></p><p><strong>设计原则：多用组合，少用继承。</strong></p><p><font color = "red"><strong>最后总结：策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式的作用</title>
      <link href="/2022/01/09/d30b625ddb1c/"/>
      <url>/2022/01/09/d30b625ddb1c/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">作用范围</th><th>创建型</th><th>结构型</th><th>行为型</th></tr></thead><tbody><tr><td align="left">对象创建</td><td>Singleton(单例) <br/>Prototype(原型)<br/>Factory Method(工厂方法)<br/>Abstract Factory(抽象工厂)<br/>Builder(建造者)</td><td></td><td></td></tr><tr><td align="left">接口适配</td><td></td><td>Adapter(适配器)<br/>Bridge(桥接)<br/>Facade(外观)</td><td></td></tr><tr><td align="left">对象解耦</td><td></td><td></td><td>Mediator(中介者)<br/>Observer(观察者)</td></tr><tr><td align="left">抽象集合</td><td></td><td>Composite(组合)</td><td>Iterator(迭代器)</td></tr><tr><td align="left">行为扩展</td><td></td><td>Decorator(装饰)</td><td>Visitor(访问者)<br/>Chain of Responsibility(职责链)</td></tr><tr><td align="left">算法封装</td><td></td><td></td><td>Template Method(模板方法)<br/>Strategy(策略)<br/>Command(命令)</td></tr><tr><td align="left">访问性能</td><td></td><td>Flyweight(亨元)<br/>Proxy(代理)</td><td></td></tr><tr><td align="left">对象状态</td><td></td><td></td><td>Memento(备忘录)<br/>State(状态)</td></tr><tr><td align="left">其他</td><td></td><td></td><td>Interpreter(解释器)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载+翻译】AI之行为树：它们是如何工作的</title>
      <link href="/2022/01/09/564005f24156/"/>
      <url>/2022/01/09/564005f24156/</url>
      
        <content type="html"><![CDATA[<p><strong>——行为树简介，包含示例和深入描述，以及创建强大的表达树的一些技巧。</strong></p><blockquote><p>注意事项：</p><p>原文地址：(<a href="https://www.gamedeveloper.com/programming/behavior-trees-for-ai-how-they-work)%EF%BC%8C%E8%8B%B1%E8%AF%AD%E5%AE%9E%E5%8A%9B%E8%BF%87%E7%A1%AC%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%9C%8B%E5%8E%9F%E6%96%87">https://www.gamedeveloper.com/programming/behavior-trees-for-ai-how-they-work)，英语实力过硬可以直接看原文</a></p><p>适用人群：不清楚行为树或者想要简单入门行为树的小伙伴们</p><p>说明：文章内容都是机翻，一些比较怪的被我“本土化”了，所以可能会有丁点的不同，带“PS”字眼的，有部分是私货以及个人的理解，可以忽视</p></blockquote><h3 id="介绍（Introduction）"><a href="#介绍（Introduction）" class="headerlink" title="介绍（Introduction）"></a>介绍（Introduction）</h3><p>虽然互联网上有很多行为树的教程和指南，但在探索它们是否适用于Project Zomboid**（PS：这个作者开发的一个游戏） **项目时，我一次又一次地遇到了同样的问题。我阅读的许多指南都非常注重行为树的实际代码实现，或者纯粹关注无上下文的通用节点流，而没有任何实际的应用示例，如下图所示：</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-0.png" alt="1-0"></p><p>虽然它们在帮助我理解行为树的核心原则方面非常有价值，但我发现自己处于这样一种情况：尽管我知道行为树是如何运行的，但我实际上并不知道应该为游戏创建什么样的节点，或者一个真正完全开发的行为树应该是什么样子。</p><p>我花了大量时间进行试验。由于Project Zomboid是用Java语言编写的，所以我使用了非常棒的JBT-Java行为树(<a href="http://sourceforge.net/projects/jbt/)%E5%9B%A0%E6%AD%A4%E6%88%91%E4%B8%8D%E5%BF%85%E5%85%B3%E5%BF%83%E5%AE%9E%E9%99%85%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E3%80%82**%EF%BC%88PS%EF%BC%9A%E8%BF%99%E9%87%8C%E4%BD%9C%E8%80%85%E8%AE%B2%E7%9A%84%E5%BA%94%E8%AF%A5%E6%98%AF%E6%8C%87%E8%87%AA%E5%B7%B1%E5%8E%BB%E7%BC%96%E5%86%99%E4%B8%80%E5%A5%97%E8%A1%8C%E4%B8%BA%E6%A0%91%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81%EF%BC%89**%E7%84%B6%E8%80%8C%EF%BC%8C%E6%9C%89%E5%BE%88%E5%A4%9A%E6%95%99%E7%A8%8B%E5%85%B3%E6%B3%A8%E8%BF%99%E4%B8%80%E7%82%B9%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8%E8%AE%B8%E5%A4%9A%E5%B8%B8%E7%94%A8%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%82">http://sourceforge.net/projects/jbt/)因此我不必关心实际的代码实现。**（PS：这里作者讲的应该是指自己去编写一套行为树框架代码）**然而，有很多教程关注这一点，以及在许多常用游戏引擎中的实现。</a></p><p>有可能我在这里详述的一些更具体的装饰节点类型实际上是 JBT 原生的，而不是一般的行为树概念，但我发现它们是 Project Zomboid 行为树工作方式的关键组成部分，所以如果您的特定行为树不支持它们，那么我建议去实现它们，这很值得。</p><p>我并不觉得自己是这方面的专家，但是在 Project Zomboid NPC 的开发过程中，我感觉自己收获颇丰，所以我这里会列出一些点，这些点可以不至于让后来者走太多弯路，或者至少能知道我们可以用行为树来完成什么。我这里并不打算深入去研究它的实现，所以这里只会给出一些在 Project Zomboid 中使用的抽象示例。</p><h3 id="基础知识（Basics）"><a href="#基础知识（Basics）" class="headerlink" title="基础知识（Basics）"></a>基础知识（Basics）</h3><p>顾名思义，与有限状态机或用于 AI 编程的其他系统不同，行为树是<strong>控制 AI 实体决策流程</strong>的<strong>分层节点树</strong>。在树的范围内，<strong>叶子</strong>是控制 AI 实体的实际命令，形成<strong>分支</strong>的是各种类型的<strong>实用节点</strong>，它们控制 AI 沿着树向下走，以达到<strong>最适合该情况的命令序列</strong>。</p><p>树可以非常深，通过节点调用执行特定功能的子树，并且允许开发人员创建<strong>行为库</strong>，这些<strong>行为库</strong>可以连接在一起以<strong>提供非常有说服力的 AI  行为</strong>。开发是<strong>高度可迭代的</strong>，在这里，您可以从形成基本的行为开始，然后创建新分支来处理实现目标的替代方法，分支按其意愿排序，<strong>允许 AI 在特定行为失败时采用回退策略</strong>。<font color = red><strong>这是他们真正闪耀的地方！</strong></font></p><h3 id="数据驱动VS代码驱动（Data-Driven-vs-Code-Driven）"><a href="#数据驱动VS代码驱动（Data-Driven-vs-Code-Driven）" class="headerlink" title="数据驱动VS代码驱动（Data Driven vs Code Driven）"></a>数据驱动VS代码驱动（Data Driven vs Code Driven）</h3><p>这一区别与本指南几乎没有关系，但是应该注意，行为树有许多不同的实现方式。主要区别是在于树是否在代码库外部定义，可能是 XML 或专有格式并使用外部编辑器进行操作，或者是树的结构是通过嵌套类实例直接在代码中定义。</p><p>JBT 使用了这两者的一种奇怪的混合体，其中提供了一个编辑器，允许您可视化构建您的行为树，但是导出工具实际上会生成 java 代码来表示代码库中的行为树。</p><p>无论执行方式是什么，<strong>叶子节点</strong>（即实际执行游戏特定业务并控制您的角色或检查角色的情况或环境的节点）是需要您自己在代码中去定义。不管你是使用母语还是使用Lua或Python等脚本语言都可以。然后，您的树可以利用这些来提供复杂的行为。这些节点的表现力非常强，有时更像是一个标准库来操作树本身内的数据，而不仅仅是简单的字符命令，这真的让我兴奋不已。</p><h3 id="树的遍历（Tree-Traversal）"><a href="#树的遍历（Tree-Traversal）" class="headerlink" title="树的遍历（Tree Traversal）"></a>树的遍历（Tree Traversal）</h3><p>行为树的核心方面在于与代码库方法不同，树中的的特定节点或分支可能需要很长时间才能完成。在行为树的基本实现中，系统每帧都会从树的根节点向下遍历<strong>（PS：相对于传统行为树，事件驱动的行为树不需要每帧从根节点遍历。它们保持当前状态，只有在实际需要时才继续遍历。例如<a href="https://github.com/meniku/NPBehave">NPBehave</a>）</strong>，测试树下的每个节点看哪个处于活跃状态，重新检查沿途的每一个节点，直到到达当前活跃的节点并再次选中它。</p><p><font color =red><strong>这不是一种非常有效的处理方式，尤其是当行为树在开发过程中随着其开发和扩展而变得更深时。</strong></font>我想说的是，您实现的任何行为树都应该存储任何当前正在处理的节点，这样它们就可以直接在行为树引擎中进行标记，而不是每次遍历整个树。值得庆幸的是，JBT 属于这一类。</p><h3 id="流动（Flow）"><a href="#流动（Flow）" class="headerlink" title="流动（Flow）"></a>流动（Flow）</h3><p>行为树由几种类型的节点组成，但是某些核心功能对于行为树中的任何类型的节点都是通用的。这是因为他们可以返回三种状态之一。 （根据行为树的实现，可能有三个以上的返回状态，但是我在实践中还没有使用过其中的任何一个，并且它们与当前主题并不相关）三种常见的状态如下：</p><p><strong>成功（Success） 失败(Failure)    运行(Running)</strong></p><p>顾名思义，前两个通知它们的父节点其操作是成功还是失败。第三种意味着尚未确定成功或失败，并且该节点仍在运行。下次该树被选择时，该节点将再次被选择，此时它将再次有机会成功、失败或继续运行。</p><p>此功能是行为树功能的关键，因为它允许在游戏中持续许多次的去处理一个节点。例如，在<strong>Walk节点</strong>试图计算路径期间，它会提供<strong>Running状态</strong>。如果由于某种原因寻路失败，或者在行走过程中出现了一些其他复杂情况以阻止角色到达目标位置，则节点将<strong>Failure状态</strong>返回给父节点。如果在任何时候角色的当前位置等于目标位置，则返回<strong>Success状态</strong>，表示Walk命令成功执行。</p><p>这意味着这个单独的节点有一个明确的成功和失败契约，并且任何使用这个节点的树都可以确保它从这个节点接收到的结果。然后，这些状态传播并定义树的流，以提供沿树向下的事件序列和不同的执行路径，以确保 AI 的行为符合预期。</p><p>有了这个共同的共享功能，行为树节点有三种主要原型：</p><p><strong>复合节点（Composite） 装饰者节点（Decorator） 叶子节点（Leaf）</strong></p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-1.png" alt="1-1"></p><h4 id="复合节点（Composite）"><a href="#复合节点（Composite）" class="headerlink" title="复合节点（Composite）"></a>复合节点（Composite）</h4><p>这里我们将讨论在行为树中最常见的复合节点。还有其他的，但我们将介绍一些基本的知识，这些知识应该可以帮助您编写一些相当复杂的行为树。</p><p><strong>Sequence（PS：序列组合器，一遇到子结点返回失败则其本身返回失败，否则继续执行下一个子结点。全部成功则其本身返回成功）</strong></p><p>行为树中最简单的组合节点，它们的名称说明了一切。序列将按顺序访问每个子节点，从第一个开始，当访问成功时将调用第二个子节点，依此类推。如果任何子节点失败，它会立即将失败返回给父节点。如果序列中的最后一个子节点成功，则该序列将向其父节点返回成功。</p><p>重要的是要明确行为树中的节点类型有相当广泛的应用。Sequence最明显的用法是<font color = red><strong>定义一个必须完整完成的任务序列</strong></font>，其中一个失败意味着对该任务序列的进一步处理变得多余。例如：</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-2.png" alt="1-2"></p><p>很明显，这个Sequence会让给定的角色穿过一扇门，然后关上它。事实上，这些节点可能会更加抽象，并在生产环境中使用参数。 Walk（位置）、Open（可打开）、Walk（位置）、Close（可打开）</p><p>因此处理顺序如下：</p><p>Sequence -&gt; Walk to Door（<strong>成功</strong>）-&gt; Sequence（<strong>运行</strong>）-&gt; Open Door（<strong>成功</strong>） -&gt; Sequence（<strong>运行</strong>）-&gt; Walk through Door（<strong>成功</strong>） -&gt; Sequence（<strong>运行</strong>）-&gt; Close Door（<strong>成功</strong>）-&gt; Sequence（<strong>成功</strong>）-&gt; 此时Sequence返回<strong>成功</strong>给自己的父级</p><p>如果一个角色未能走到门口，可能是因为路被挡住了，那么尝试打开门或穿过它就不再重要了。该序列在Walk to Door失败的那一刻返回<strong>失败</strong>，然后序列的父级可以优雅地处理失败。</p><p>事实上，<strong>Sequence</strong>能够很自然地适用于角色的行动序列，并且AI行为树倾向于暗示这是它们的唯一用途，所以除了让角色做一系列“事情”外，我们可能并不清楚是否存在多种不同的方法去利用<strong>Sequence</strong>。思考一下：</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-3.png" alt="1-3"></p><p>在上面的示例中，我们没有操作列表，而是测试列表。子节点会检查角色<strong>是否饥饿</strong>，<strong>是否携带食物</strong>，<strong>是否处于安全位置</strong>，只有当所有这些都成功返回序列父节点时，角色才会吃食物。使用这样的<strong>Sequence</strong>允许您在执行操作之前测试一个或多个条件。类似于代码中的 if 语句，以及电路中的 AND 门。由于所有子节点都需要成功，并且这些子节点可以是复合节点、装饰节点或叶子节点的任意组合，因此它允许在您的 AI 大脑中进行非常强大的条件检查。</p><p>例如，考虑上一节中提到的<strong>Inverter（PS：反相器）</strong>装饰节点：</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-4.png" alt="1-4"></p><p>在功能上与前面的示例相同，在这里我们展示了如何使用<strong>Inverter（反相器）</strong>来否定任何测试，从而为您提供一个NOT<strong>（PS：逻辑门里的非门，可以理解为将原有的结果反过来）</strong>。这意味着您可以大幅减少测试角色或游戏世界条件所需的节点数量。</p><p><strong>Selector（PS：选择组合器，一遇到子结点返回成功则其本身返回成功，否则继续执行下一个子结点，全部失败则其本身返回失败）</strong></p><p>如果说<strong>Sequence</strong>是逻辑门里的AND门，只有所有子节点成功才能返回<strong>成功</strong>。<strong>Selector</strong>则跟它不同，只要它的任何子节点成功且不处理任何其他子节点的情况，<strong>Selector</strong>就会返回<strong>成功</strong>。<strong>Selector</strong>会从它的第一个子节点开始处理，如果失败将继续处理第二个子节点，还是失败的话会继续处理第三个子节点，直到到达成功为止，这时它将立即返回<strong>成功</strong>。如果所有子节点都失败了，它就会返回<strong>失败</strong>。这意味着<strong>Selector</strong>类似于逻辑门里的OR门，并且作为条件语句可以用来检查多个条件，以查看其中任何一个条件是否为真。</p><p>他们的主要力量来自于他们代表多种不同行动方案的能力，按照从最有利到最不利的优先顺序，如果在任何行动方案中成功，则返回成功。这会带来巨大的影响，您可以通过使用选择器非常快速地开发出非常复杂的 AI 行为。</p><p>让我们回到前面的开门<strong>Sequence</strong>示例，为其添加一个<strong>Selector</strong>来解决它。</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-5.png" alt="1-5"></p><p>是的，在这里我们只需使用少数几个新节点就可以智能地处理上锁的门。</p><p>那么当处理这个<strong>Selector</strong>时会发生什么呢？</p><p>首先，它将处理<strong>Open Door节点</strong>。最可取的行动是简单地打开门，没有别的其他操作。如果成功了，那么<strong>Selector</strong>就成功了，也无需进一步探索该选择器的任何其他子节点。</p><p>但是，如果门因为某个原因被锁住而无法打开，则<strong>Open Door节点</strong>将失败，将失败传递给父节点<strong>Selector</strong>。此时<strong>Selector</strong>将尝试第二个节点，或第二个更可取的行动方式，即尝试解锁门（<strong>Unlock Door 节点</strong>）。</p><p>在这里，我们创建了另一个<strong>Sequence</strong>（必须完整地完成才能将成功传递回<strong>Selector</strong>），我们首先解锁门，然后尝试打开它。</p><p>如果解锁门的任一步骤失败（也许 AI 没有钥匙，或者没有所需的开锁技能，或者他们设法撬开了锁，但在尝试打开门时发现门被钉死了？）然后它将失败返回给<strong>Selector</strong>，然后<strong>Selector</strong>将尝试第三个行动方案，将直接砸门（<strong>Smash Door 节点</strong>）！</p><p>如果角色不够强大，那么可能会失败。在这种情况下，没有更多的行动路线，<strong>Selector</strong>将失败，这反过来又会导致<strong>Selector</strong>的父节点<strong>Sequence</strong>失败，放弃穿过门的尝试（<strong>不再执行 Walk Through Door节点</strong>）。</p><p>更进一步，也许上面还有一个<strong>Selector</strong>，它会根据这个<strong>Sequence</strong>的失败选择另一个行动方案？</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-6.png" alt="1-6"></p><p>在这里，我们使用最顶层的<strong>Selector</strong>扩展了树。在左侧（最可取的一侧），我们从门进入，如果失败，我们尝试从窗户进入。事实上，实际的实现可能不会是这样的，这个主要是我们在 Project Zomboid 项目中所做工作的简化版，但它说明了这一点。稍后我们将介绍一个更通用和更有用的实现。</p><p>简而言之，我们在这里有一个“进入建筑物”行为，您可以依靠它进入相关建筑物，或者通知其父节点它未能进入。也许没有窗户？在这种情况下，最上面的<strong>Selector</strong>会失败，也许父节点<strong>Selector</strong>会告诉 AI 前往另一座建筑物？</p><p>与之前的尝试相比，行为树中的一个关键因素大大简化了 AI 开发，那就是失败不再是我正在尝试做的任何事情的终点（啊哈，寻路失败了，现在怎么办？），而是决策过程中自然和预期的一部分，自然地符合AI系统的范式。</p><p>您可以针对每种可能的情况设计分层故障保险和替代行动方案。Project Zomboid 的一个例子是 <strong>Ensure Item In Inventory （PS：确保道具在库存中）</strong>行为。</p><p>这个行为接受一个库存物品类型，并使用一个<strong>Selector</strong>来确定几个行动方案，以确保物品在NPC的库存中，包括用不同的物品参数递归调用相同的行为。</p><p>首先，它会检查该物品是否已经在角色的主要顶级库存<strong>（PS：比如随身物品栏）</strong>中。这是理想的情况，因为不需要做任何事情。如果是，则<strong>Selector</strong>成功，因此整个行为成功。<strong>Ensure Item In Inventory</strong>已成功，并且该项目可供使用。</p><p>如果该物品不在角色的物品栏中，那么他们将检查角色携带的任何包或背包的内容。如果找到该物品，他们会将物品从包中转移到他的顶级库存中。当满足成功标准时，这将成功。</p><p>如果还是失败，则<strong>Selector</strong>的第三个分支将确定该物品是否位于角色当前所在的建筑物中。如果是，则角色将前往装有该物品的容器的位置并从中取出物品。再次满足标准，所以成功！</p><p>如果这依旧失败了，那么 NPC 还有一招。它会遍历一个制作配方列表，这些配方会产生它们想要的物品，对于每一个配方，它将遍历对应的制作材料，并依次为每个材料递归调用 <strong>Ensure Item In Inventory</strong> 行为。如果这些都成功了，那么我们就知道 NPC  现在携带了制作所需物品的所有材料。然后，角色将使用这些材料制作物品，然后在满足拥有该物品的标准后返回成功。</p><p>如果上面说的依旧失败，那么 <strong>Ensure Item In Inventory</strong> 行为将失败，没有更多的回退，NPC 只会将该物品添加到所需物品的列表中，以便在搜寻任务期间寻找并在没有该物品的情况下继续生活。</p><p>这样做的结果是，如果 NPC 拥有所需的原料，或者可以从建筑物中获得这些原料，他们就可以在游戏中制作他们想要的任何物品。</p><p>由于行为的递归性质，如果他们自己没有这些材料，那么他们甚至会尝试用更底层的材料来制作它们，必要时会去建筑物里搜索，制作多个阶段的材料以便能够制作他们实际需要的物品。</p><p>突然之间，我们有了一个相当复杂且令人印象深刻的 AI 行为，实际上可以归结为相对简单的节点叠加在一起。 当我们需要NPC来确保库存中有物品时，<strong>Ensure Item In Inventory</strong> 行为就可以在许多其他树中自由使用。</p><p>我敢肯定，在开发过程中的某个时候，我们会采取另一种退路，并允许NPC专门出去寻找他们非常想要的物品，选择一个最有可能包含该物品的掠夺目标。</p><p>优先级列表中可能还有一个方法拥有更高的故障保护措施，那就是去考虑其他可能实现并且与所选项目相同目标的项目。如果有一天我们最终编码支持临时工具，那么寻找不太有效的替代品，像是用石头敲钉子，可能会胜过偷偷穿过城镇进入僵尸出没的五金店。</p><p>由于在开发过程中扩展树很容易，它很容易创建一个“完成工作”的简单行为，然后通过<strong>Selector</strong>使用额外的分支迭代地改进 NPC  行为，以满足更可靠的故障保护和后备措施以减少行为失败的可能。制作后备措施是在很后面才添加的，只是为了进一步装备 NPC 的行为，以进一步帮助他们实现目标。</p><p>此外，如果仔细确定优先级，这些后备措施尽管本质上是脚本化的行为，却赋予 AI 角色以智能问题解决和自然决策的外观。</p><p><strong>Random Selectors &#x2F; Sequences</strong></p><p>我不会详述这些，因为鉴于前面的部分，它们的行为将是显而易见的。<strong>Random Selectors &#x2F; Sequences</strong>的工作方式就像名字所说的那样，只是处理子节点的实际顺序是随机确定的。在没有明确的可能行动方案执行顺序的情况下，这些可用于为 AI 角色增加更多的不可预测性。</p><p><strong>Parallel（PS：并行组合器，全部子节点执行成功则其本身成功，有一个子结点执行失败，则终止其余子结点执行，其本身返回失败。）</strong></p><p><strong>（PS：这个原文没有，做个简单补充）</strong></p><h4 id="装饰节点（Decorator-Nodes）"><a href="#装饰节点（Decorator-Nodes）" class="headerlink" title="装饰节点（Decorator Nodes）"></a>装饰节点（Decorator Nodes）</h4><p><strong>Inverter（反相器）</strong></p><p>我们已经介绍了这一点。简单地说，它们将反转或否定其子节点的结果。成功变成失败，失败变成成功。它们最常用于条件测试。</p><p><strong>Succeeder（成功器）</strong></p><p>无论子节点实际返回了什么，<strong>Succeeder</strong>都将始终返回成功。在您要处理预计会发生故障或预期会发生故障的树的分支但不想放弃处理该分支所在的<strong>Sequence</strong>的情况下，那么这个方法就非常有用。与这种类型的节点相反的节点不是必需的，因为如果父节点需要发生故障，则<strong>Inverter</strong>会将<strong>Succeeder</strong>节点转变为“故障节点”。</p><p><strong>Repeater（重复器）</strong></p><p>每次其子节点返回结果时，<strong>Repeater</strong>都会重新处理它的子节点。这些通常用于树的最底部，以使树连续运行。<strong>Repeater</strong>可以选择在返回到它们父节点之前运行它们子节点的次数。</p><p><strong>Repeat Until Fail（重复直到失败）</strong></p><p>就像<strong>Repeater</strong>一样，这些装饰节点将继续对其子节点进行重新处理。直到子节点最终返回失败，此时它会将成功返回给其父节点。</p><h4 id="数据环境-x2F-上下文（Data-Context）"><a href="#数据环境-x2F-上下文（Data-Context）" class="headerlink" title="数据环境&#x2F;上下文（Data Context）"></a>数据环境&#x2F;上下文（Data Context）</h4><p>这方面的细节取决于行为树的实际实现、使用的编程语言以及所有其他方面，因此我们将使其保持相当抽象和概念性。</p><p>当在 AI 实体上调用行为树时，还会创建一个<strong>Data Context</strong>，**<font color = red>作为被节点解释和改变的任意变量的存储空间</font>*<em>（使用 C# 字典或 java Hash Map中的键值对，或者是 C++ string&#x2F;void</em> STL 映射，虽然我使用 C++ 已经很久了，所以可能有更好的方法来处理这个问题）</p><p>节点将能够读取或写入变量，以便为稍后处理的节点提供<strong>Data Context</strong>，并允许行为树充当一个内聚单元。一旦您开始大量利用这一点，行为树的灵活性和范围就会变得非常令人印象深刻，并且触手可及的真正力量变得显而易见。当我们重新审视我们的门窗行为<strong>（PS：指上面的那个行为逻辑）</strong>时，我们会在一段时间内解决这个问题。</p><h4 id="定义叶子节点（Defining-Leaf-Nodes）"><a href="#定义叶子节点（Defining-Leaf-Nodes）" class="headerlink" title="定义叶子节点（Defining Leaf Nodes）"></a>定义叶子节点（Defining Leaf Nodes）</h4><p>同样，这方面的细节取决于行为树的实际实现。为了给叶子节点提供功能，允许将游戏的特定功能添加到行为树中，大多数系统有两个需要实现的功能。</p><p><strong><code>init</code></strong> -  在其父节点执行期间第一次访问该节点时调用。例如，当轮到节点被处理时，序列将调用它。在父节点完成处理并将结果返回给父节点后，下次触发父节点时才会再次调用它。该函数用于初始化节点并启动节点所表示的操作。使用我们的 Walk 示例，它将检索参数并可能启动寻路工作。</p><p><strong><code>process</code></strong> - 当节点正在处理时，行为树的每一个tick都会调用这个函数。如果此函数返回 <strong>Success</strong> 或  <strong>Failure</strong>，那么它的处理将结束，结果将传递给它的父节点。如果它返回 <strong>Running</strong> ，它将在下一个tick中被重新处理，如此反复，直到它返回 <strong>Success</strong> 或 <strong>Failure</strong>。在 Walk 示例中，它将返回 <strong>Running</strong>，直到寻路成功或失败。</p><p>节点可以具有与其相关联的属性，这些属性可以是显式传递的文字参数，或者是对受控 AI 实体的<strong>Data Context</strong>中的变量的引用。</p><p>我不打算详细介绍实现，因为这不仅取决于语言，还取决于行为树实现，但行为树实例中参数和任意数据存储的概念是相当普遍的。</p><p>例如，我们可以这样描述 Walk 节点：</p><p><strong><code>Walk (character, destination)</code></strong></p><p><strong>-成功（success）：到达目的地</strong><br><strong>-失败（failure）：无法到达目的地</strong><br><strong>-运行中（running）：跑步途中</strong></p><p>在这种情况下，Walk 有两个参数，角色和目的地<strong>（character, destination）</strong>。虽然我们总是很自然地认为运行AI行为的角色是节点的主体，因此不需要作为参数进行明确传递，但最好不要做出这种假设，尽管“Walk”是一个相当安全的赌注。太多时候，特别是在条件节点上，我发现自己不得不重新编码节点，以满足测试另一个角色的状态或以某种方式与他们互动。最好的办法是多走一步，把命令适用的<strong>character</strong>传给它，即使您相当确定只有运行该行为的AI需要它。</p><p>如前所述，通过的位置可以手动输入 X、Y、Z的坐标。但更有可能的是，该位置将由另一个节点作为变量存储在<strong>Data Context</strong>中，以此获取某个游戏对象或建筑物的位置，或者计算NPC附近隐蔽的安全位置。</p><h4 id="堆栈（Stacks）"><a href="#堆栈（Stacks）" class="headerlink" title="堆栈（Stacks）"></a>堆栈（Stacks）</h4><p>当第一次研究行为树时，很自然地将其使用的节点的范围限制在角色行为上，或关于角色或其环境的条件测试。由于这种限制，有时很难看到行为树有多强大。</p><p>当我想到将堆栈操作实现为节点时，它们的实用性对我来说才真正变得明显。所以我在游戏中添加了以下节点实现：</p><p><strong><code>PushToStack(item, stackVar)</code></strong><br><strong><code>PopFromStack(stack, itemVar)</code></strong><br><strong><code>IsEmpty(stack)</code></strong></p><p>例如，如果不存在<strong>Stack</strong>，**<code>PushToStack</code><strong>将创建一个新</strong>Stack<strong>，并将其存储在传递的变量名中，然后将“Item”对象推送到该</strong>Stack**上。</p><p>类似地，**<code>PopFromStack</code><strong>从</strong>Stack<strong>中弹出一个“item”，并将其存储在 itemVar 变量中，如果</strong>Stack**已经为空则失败。</p><p><strong><code>IsEmpty</code></strong> 检查传递的<strong>Stack</strong>是否为空，如果是则返回成功，如果不是则失败。</p><p>有了这些节点，我们现在可以像这样遍历一堆对象：</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-7.png" alt="1-7"></p><p>使用<strong>Repeat Until Fail</strong>节点，我们可以反复从<strong>Stack</strong>中弹出一个item并对其进行操作，直到<strong>Stack</strong>为空，此时**<code>PopFromStack</code><strong>将返回一个失败并退出</strong>Repeat Until Fail**节点。</p><p>接下来是我经常使用的其他几个重要实用程序节点：</p><p><strong><code>SetVariable(varName, object)</code></strong></p><p><strong><code>IsNull(object)</code></strong></p><p>当<strong>Composite（复合节点）</strong>和<strong>Decorator（装饰节点）</strong>不能提供足够的粒度来获取我们需要的树上的信息时，这些允许我们在整个行为树中设置任意变量。我们马上就会遇到这样的情况，尽管我毫不怀疑有一种方法可以把它组织起来，这样它就不是必需的了。</p><p>现在假设我们添加了一个名为 <strong>Get Door Stack From Building</strong> 的节点，您在其中传递了一个建筑对象，它检索了该建筑中外部门的对象列表，用这些对象新建和填充一个<strong>Stack</strong>，并设置目标变量。那么，使用我们上面详述的东西，我们可以做什么呢？</p><p><img src="/%E3%80%90%E8%BD%AC%E8%BD%BD+%E7%BF%BB%E8%AF%91%E3%80%91AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91%EF%BC%9A%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/1-8.png" alt="1-8"></p><p>哎呀。这已经变得有点复杂了，乍一看可能有点难以确定发生了什么，但就像任何语言一样，最终会变得更容易阅读，而可读性方面的损失将在灵活性中获得好处。</p><p>那么这有什么作用呢？好吧，一开始它可能有点让人头疼，但是一旦你熟悉了节点的操作方式以及了解**成功（Success）和失败(Failure) **是如何贯穿整颗树的，它就会变得更容易理解。如果我的描述不够充分的话，我可能会扩展本节，以显示在树上的行走过程。</p><p>简而言之，这是一种行为，它将检索并尝试进入建筑物的每一个门，如果角色成功进入任何一个门，则返回成功，如果没有成功，则返回失败。</p><p>首先，它抓取一个<strong>Stack</strong>，其中包含进入建筑的每一个入口。然后它调用<strong>Repeat Until Fail</strong>节点，该节点将继续重新处理其子节点，直到其子节点返回失败。</p><p>那个子节点，一个<strong>Sequence</strong>，将首先从<strong>Stack</strong>中弹出一扇门，将其存储在门变量中。</p><p>如果<strong>Stack</strong>是空的，因为没有门，那么这个节点就会失败，并成功脱离<strong>Repeat Until Fail</strong>（Until Fail节点必然是返回成功），继续执行父<strong>Sequence</strong>，在那里我们对<code>usedDoor</code>进行倒置的**<code>IsNull</code>**检查。如果<code>usedDoor</code>是空的（它肯定是空的，因为它没有机会设置该变量），这将导致整个行为失败。</p><p>如果<strong>Stack</strong>确实设法抓住了一扇门，那么它就会调用另一个<strong>Sequence</strong>（有一个反相器），该<strong>Sequence</strong>将试图走到门前，打开它并穿过它。</p><p>如果NPC通过任何可用的手段都无法穿过这扇门（门被锁住了，而NPC太弱，无法将其打破），那么<strong>Selector</strong>将失败，并将失败返回给父节点，即<strong>Inverter（反相器）</strong>，它将失败反转为成功，这意味着它没有逃过<strong>Repeat Until Fail</strong>，后者又会重复并重新调用其<strong>Sequence</strong>，从<strong>Stack</strong>中弹出下一个门，NPC将尝试下一个门。</p><p>如果NPC成功地穿过一扇门，那么它将在<code>usedDoor</code>变量中设置该门，这时，<strong>Sequence</strong>将返回成功。这个成功将被<strong>Inverter（反相器）</strong>倒置成一个失败，这样我们就可以摆脱<strong>Repeat Until Fail</strong>。</p><p>在这种情况下，我们在 <code>usedDoor</code> 上的 <strong><code>IsNull</code></strong> 检查失败，因为它不为空。这被<strong>Inverter（反相器）</strong>反转为成功，从而导致整个行为成功。父节点知道 NPC成功地找到了一扇门，并通过它进入了建筑物。</p><p>如果失败了，也可以使用<strong>Get Window Stack From Building</strong>节点重复同样的过程，以对 Windows<strong>（PS：这里指门打不开，去找窗户）</strong>重复该过程。或者使用更多节点进行<strong>Stack</strong>操作，也许您可以紧接着调用<strong>Get Door Stack From Building</strong>和<strong>Get Window Stack From Building</strong>，并将窗户附加到门的<strong>Stack</strong>末尾，并在同一个<strong>Repeat Until Fail</strong>中处理所有的窗户，假设Open, Unlock, Smash, Close是在门和窗户的通用基础上操作的，或者运行时类型检查它们所操作的对象。</p><p>最后，你可能会注意到我添加了一个<strong>Succeeder（成功器）</strong> 来作为<strong>close door</strong>节点的父节点。这是因为我突然想到，如果一个NPC砸门，他们肯定会关不上门。</p><p>如果没有<strong>Succeeder（成功器）</strong>，这将导致序列在设置 <code>usedDoor </code> 变量并移动到下一个门之前失败。另一个解决方案是，即使门被打碎，关闭门也会被设计为总是成功。然而，我们希望保留测试关门成功的能力（例如，在 “安全屋 “行为中使用该节点会认为关门失败是因为它不再在铰链上，这与情况相当相关！ )，因此如果需要该行为，<strong>Succeeder（成功器）</strong> 可以确保失败被忽略。</p>]]></content>
      
      
      <categories>
          
          <category> 架构认知 </category>
          
          <category> 行为树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构认知 </tag>
            
            <tag> 行为树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timeline问题修复——解决Timeline最后一帧从Playable输入端获取Clip权重为0的问题</title>
      <link href="/2021/10/10/b4c777baea2b/"/>
      <url>/2021/10/10/b4c777baea2b/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="591fe63f778385729f782af28b6ebdf7ceb7195894314ed8279963cbce7c895d">9a7ea7b4a01c0482802dd2526153cdabe59a6e1e68ed6f0cc2a36eca49fe8d9088b32d1b22c58a44c03e4cf675ce19859d4ecba7e04f17f463026cafd9299322c6485faa45c9bf92b9275c4fc98ffb129ebe948a53f31ccb5030bc726347dbe6f0d9cf40e777c60e7af1129644858ae7e063cbe0b5dabf5fbcfb40dad56cbddf920c1401fb234c6f55c1f966ac46e75605a34836002dcfe74c4300b72d513b40def6d03f38c060dc84fad970b624f42ea362753814ddd391e34644653c3139e1602268de1a9cba069ac7d0daddfd36637d05249e2089b6ea9eb741ca5181ac2cc0dd32075c40e76e842c52692b729d8d35ae900a2da265d0b60950f0bedd2d0712133ec50373c36d08e3bf1ffc33e55794301a2e61295d75aa6a6d2abc4f65cd2ee6ce46870371f4c76dbc886ce01abe0980e7248129666a24e6765a93c3eeb07876902f1115c109456129b1ce02bd549981c8080d27d69078c5ce74cf458ce020a7ccd35815be88e60b1ad922983c8bdc3ddd701f83e5ec2a7a6ef6256b6240ae19720df25cde9b8cf3b915b493488a9b8afdfa86527a48ad6a617240fb90f82765ab84f7018a4f93b8d9363e0eb69a50c83f79a7c6ff9b1b1d4ca3e44827b1e85e2652d8f563f53e661afd5fe9ca3c539ce92855891451979f05fd8e20d74594552ac4bbdafd0a5da1b1c20d440eaa26fa1fa6a7141e30077c60da055f3bb21b856d2a1ef2452c9797a53d41a44d521cf4ee14ec4c8751736a45153b32e5613e2fd7d5a968fbffb0c0b34ddb804561feece051eb781be6029cb1aec27a85a91b20d4692466dd00f56dff748cddafe967bd6f44d2823f1132082b914cbeb54f56be13bdd10ec1f8f3e16c09298d4155b0a99a6f6da49d01d625dbce59d19d361387344e984ae68976b5b557bad28dc5a1834160bf23decc5b2629b4a02361ddc52d0936f46a0016650e638a64686a69a5c2defb82d84e49686e74d8fc90e83083be1855d9cc98175b450816e74586844b56e1a1298b15cba88a036ccd798376061c0a7dc437f45386dcb5c98a0bec2b442c11e0330fe0b2277d36cdaf2968fa650ddfb4555d5fc7f4f3ddeabfcac1eef125f2b6e278f1380512442f1986d7e1b790e3916514918b8c3a640ab5c5041e42bd58db6ab4fda20d809a51121fad9a3d67caac42d263f66e44ec2cf5c884406f37a39be302f5b31d622cfd7eca5a17d0239b924e6e9614165a1cec114a2b49659d38713fead59a67ffcf0aada199140b1fbc930ada521549cbac662e9302a28f6cebaec82147cea38f591e6e0e03ac92feaaa70bfcf39d7014a84cf2820500f7c1830683ca704f52d9d2484216b0dc17d021509f60a9e132cf982d76eb74b5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章正在施工中。。。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIElement知识点</title>
      <link href="/2021/09/11/826d93b57808/"/>
      <url>/2021/09/11/826d93b57808/</url>
      
        <content type="html"><![CDATA[<h3 id="1-如何获取uxml上设置的VisualElement控件"><a href="#1-如何获取uxml上设置的VisualElement控件" class="headerlink" title="1.如何获取uxml上设置的VisualElement控件"></a>1.如何获取uxml上设置的VisualElement控件</h3><p>利用控件<strong>name</strong>，以及控件<strong>类型</strong>，通过<strong>UQuery扩展方法里的 Query或者Q</strong>进行获取</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VisualElement root = rootVisualElement;<span class="comment">//获取根节点</span></span><br><span class="line">Button btn = root.Query&lt;Button&gt;(<span class="string">&quot;foo&quot;</span>).First();<span class="comment">//从根开始查找名为 foo 的第一个 Button</span></span><br><span class="line">Button btn = root.Q&lt;Button&gt;(<span class="string">&quot;foo&quot;</span>);<span class="comment">//与上面效果相同</span></span><br></pre></td></tr></table></figure><h3 id="2-EditorWindow新初始化方法CreateGUI"><a href="#2-EditorWindow新初始化方法CreateGUI" class="headerlink" title="2.EditorWindow新初始化方法CreateGUI"></a>2.EditorWindow新初始化方法CreateGUI</h3><p>2019.4.27版本，只要在继承的EditorWindow类里写上**CreateGUI()**方法，就会在窗口创建的时候自动被执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EasePreview</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;UIElement/EasePreview&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowExample</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GetWindow&lt;EasePreview&gt;().Show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="3-给VisualElement控件添加uss样式的方法"><a href="#3-给VisualElement控件添加uss样式的方法" class="headerlink" title="3.给VisualElement控件添加uss样式的方法"></a>3.给VisualElement控件添加uss样式的方法</h3><p>这里有两种添加uss样式的方法，一种是通过<strong>C#脚本控制</strong>手动添加，另一种是直接在uxml文件里通过**<code>&lt;Style&gt;</code>标签添加**</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VisualElement root = rootVisualElement;</span><br><span class="line"><span class="keyword">var</span> styleSheet = AssetDatabase.LoadAssetAtPath&lt;StyleSheet&gt;(path + <span class="string">&quot;EasePreview.uss&quot;</span>);</span><br><span class="line">root.styleSheets.Add(styleSheet);<span class="comment">//通过脚本给VisualElement控件直接添加样式</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">engine:VisualElement</span> <span class="attr">name</span> = <span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是通过直接读取相对路径来获取并设置uss样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">src</span> = <span class="string">&quot;XXXX.uss&quot;</span>/&gt;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">engine:VisualElement</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="4-Editor新的初始化方法CreateInspectorGUI"><a href="#4-Editor新的初始化方法CreateInspectorGUI" class="headerlink" title="4.Editor新的初始化方法CreateInspectorGUI()"></a>4.Editor新的初始化方法CreateInspectorGUI()</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> VisualElement <span class="title">CreateInspectorGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VisualElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-在USS中定位用VisualElement包装的容器"><a href="#5-在USS中定位用VisualElement包装的容器" class="headerlink" title="5.在USS中定位用VisualElement包装的容器"></a>5.在USS中定位用VisualElement包装的容器</h3><p>首先在我们的uxml文件里面，将我们要用uss样式的VisualElement包装起来，并做一个class标记，这样我们就可以在uss里定位它</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">engine:UXML</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:engine</span>=<span class="string">&quot;UnityEngine.UIElements&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:editor</span>=<span class="string">&quot;UnityEditor.UIElements&quot;</span> </span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在包装的VisualElement上做一个class标记 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">engine:VisualElement</span> <span class="attr">class</span>=<span class="string">&quot;horizontalContainer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:TextField</span> <span class="attr">name</span>=<span class="string">&quot;attackTxt&quot;</span> <span class="attr">label</span>=<span class="string">&quot;###&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:Button</span> <span class="attr">name</span>=<span class="string">&quot;duplicateBtn&quot;</span> <span class="attr">text</span>=<span class="string">&quot;+&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:Button</span> <span class="attr">name</span>=<span class="string">&quot;deleteBtn&quot;</span> <span class="attr">text</span>=<span class="string">&quot;X&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">engine:VisualElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">engine:UXML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后在uss里面，通过<code>.[class]</code>的方式，来进行样式匹配。不过这只是其中一种方法，具体其他方法请查阅官方文档。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.horizontalContainer</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row; <span class="comment">/* 排列设置成水平排列 */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-简单介绍一下uxml格式"><a href="#6-简单介绍一下uxml格式" class="headerlink" title="6.简单介绍一下uxml格式"></a>6.简单介绍一下uxml格式</h3><p>首先以下面代码为例子进行简单说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">engine:UXML</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:engine</span>=<span class="string">&quot;UnityEngine.UIElements&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:editor</span>=<span class="string">&quot;UnityEditor.UIElements&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">engine:VisualElement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:Style</span> <span class="attr">src</span>=<span class="string">&quot;MonsterEditor.uss&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:Label</span> <span class="attr">text</span>=<span class="string">&quot;Custom Monster Inspector&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">editor:PropertyField</span> <span class="attr">binding-path</span>=<span class="string">&quot;Kind&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">editor:PropertyField</span> <span class="attr">binding-path</span>=<span class="string">&quot;MaxHP&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">engine:VisualElement</span> <span class="attr">name</span>=<span class="string">&quot;attacksContainer&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">engine:VisualElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">engine:UXML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个XML文档都由XML序言开始，在前面的代码中的第一行便是XML序言，<code>&lt;?xml version=&quot;1.0&quot;?&gt;</code>。这一行代码会告诉解析器和浏览器，这个文件应该按照1.0版本的XML规则进行解析。encoding &#x3D; “utf-8”表示此xml文件采用utf-8的编码格式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><p><code>xmlns:engine=&quot;UnityEngine.UIElements&quot; </code>，前面的xmlns，意思是<strong>XML Namespace</strong>，就是命名空间的意思，<code>xmlns:engine</code>表示使用<strong>engine</strong>作为前缀的Namespace，当然前缀engine需要在文档中声明。这里相当于声明了<strong>engine跟editor前缀所引用的命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">engine:UXML</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:engine</span>=<span class="string">&quot;UnityEngine.UIElements&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:editor</span>=<span class="string">&quot;UnityEditor.UIElements&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">engine:UXML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个写法是获取当前相对路径下的uss样式，注意这个要在标签内才能生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">engine:Style</span> <span class="attr">src</span>=<span class="string">&quot;MonsterEditor.uss&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-在Unity里自定义VisualElement之后，如何让uxml里自动识别自定义的命名空间，并且有参数跟踪提示"><a href="#7-在Unity里自定义VisualElement之后，如何让uxml里自动识别自定义的命名空间，并且有参数跟踪提示" class="headerlink" title="7.在Unity里自定义VisualElement之后，如何让uxml里自动识别自定义的命名空间，并且有参数跟踪提示"></a>7.在Unity里自定义VisualElement之后，如何让uxml里自动识别自定义的命名空间，并且有参数跟踪提示</h3><p>假如说我们想制作一个Disable控件的功能，想要自定义一个VisualElement，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个特性必须在命名空间外面</span></span><br><span class="line"><span class="comment">//参数1是指代命名空间，参数2是命名空间前缀，就是[xmlns:engine]里的[engine]，主要是用来生成xsd文件使用</span></span><br><span class="line">[<span class="meta">assembly: UxmlNamespacePrefix(<span class="string">&quot;UIElementExtension&quot;</span>, <span class="string">&quot;uxmlExt&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UIElementExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这是我们的DisabledGroup类，通过将其他控件包裹进来，然后根据某些参数的设置，禁用自身包括内部的所有控件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DisabledGroup</span> : <span class="title">VisualElement</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为了在读取UXML文件时让UIElements实例化一个新对象，我们必须为我们的类定义一个工厂</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">class</span> <span class="title">UxmlFactory</span> : <span class="title">UxmlFactory</span>&lt;<span class="title">DisabledGroup</span>, <span class="title">UxmlTraits</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//重写uxmlName是为了方便辨识控件</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> uxmlName</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="string">&quot;DisabledGroup&quot;</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//uxmlQualifiedName是我们必须要保证控件唯一性的名字，因此这里以命名空间+.+控件名称</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> uxmlQualifiedName</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> uxmlNamespace + <span class="string">&quot;.&quot;</span> + uxmlName; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//UxmlTraits类，主要是我们uxml元素的特征，有许多用处</span></span><br><span class="line">        <span class="comment">//1.在UI Builder里的Inspector面板上可以看到我们声明的属性类型</span></span><br><span class="line">        <span class="comment">//2.如果后面生成xsd文件后，这里的参数也会被写到里面，这样我们编写uxml时，也会有相应的智能提示</span></span><br><span class="line">        <span class="comment">//3.如果有哪些参数想要暴露在面板上，但是又不想公开，也可以用这个类来实现</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">class</span> <span class="title">UxmlTraits</span> : <span class="title">VisualElement.UxmlTraits</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里定义了一个bool类型，name 是 &quot;refresh-now&quot;，具体使用看下面实例</span></span><br><span class="line">            <span class="comment">//&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line">            <span class="comment">//&lt;ui:UXML</span></span><br><span class="line">            <span class="comment">//xmlns:ui=&quot;UnityEngine.UIElements&quot;</span></span><br><span class="line">        <span class="comment">//xmlns:uc=&quot;UIElementExtension&quot; 这里引用了我们生成的命名空间，前提是要生成xsd后才能用</span></span><br><span class="line"><span class="comment">//&gt;</span></span><br><span class="line">    <span class="comment">//&lt;uc:DisabledGroup name=&quot;TestGroup&quot; refresh-now=&quot;false&quot;/&gt; </span></span><br><span class="line"><span class="comment">//&lt;/ui:UXML&gt;</span></span><br><span class="line">            <span class="keyword">readonly</span> UxmlBoolAttributeDescription _isRefreshNow = <span class="keyword">new</span> UxmlBoolAttributeDescription</span><br><span class="line">            &#123;</span><br><span class="line">                name = <span class="string">&quot;refresh-now&quot;</span>,  </span><br><span class="line">                defaultValue = <span class="literal">true</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">readonly</span> UxmlBoolAttributeDescription _isDisabled = <span class="keyword">new</span> UxmlBoolAttributeDescription</span><br><span class="line">            &#123;</span><br><span class="line">                name = <span class="string">&quot;disabled&quot;</span>,  </span><br><span class="line">                defaultValue = <span class="literal">true</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//这个Init会在每次控件发生变化的时候调用</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">VisualElement ve, IUxmlAttributes bag, CreationContext cc</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>.Init(ve, bag, cc);</span><br><span class="line">                ((DisabledGroup)ve).RefreshNow = _isRefreshNow.GetValueFromBag(bag, cc);</span><br><span class="line">                ((DisabledGroup)ve).Disabled = _isDisabled.GetValueFromBag(bag, cc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>  当ShouldDisable回调为空时，以当前参数为主</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> Disabled &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>  是否立即刷新</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _refreshNow;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DisabledGroup</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//写上需要初始化的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们的类完成之后，可以点击<strong>Assets-&gt;Update UIElements Schema</strong>，来生成<strong>xsd文件</strong>。</p><p>生成之后，我们就可以在uxml里面引用自定义的命名空间，以及实现智能代码追踪。</p><h3 id="8-如何利用USS读取我们想要的图片"><a href="#8-如何利用USS读取我们想要的图片" class="headerlink" title="8.如何利用USS读取我们想要的图片"></a>8.如何利用USS读取我们想要的图片</h3><p><strong>USS</strong>支持的<strong>数据类型</strong>有<strong>两者</strong>是支持资源读取的</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>resource</strong></td><td>表示 Resources 文件夹中的资源</td></tr><tr><td><strong>url</strong></td><td>表示通过路径指定的资源。可将路径表示为相对路径或绝对路径</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> RMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【搬运】XML文件中的xmlns、xmlns:xsi和xsi:schemaLocation、dtd文件的具体含义</title>
      <link href="/2021/09/10/a0ebaf43e1b7/"/>
      <url>/2021/09/10/a0ebaf43e1b7/</url>
      
        <content type="html"><![CDATA[<p><strong>文章摘自：<a href="http://www.cnblogs.com/zhao1949/p/5652167.html">http://www.cnblogs.com/zhao1949/p/5652167.html</a></strong></p><hr><p>相信很多人和我一样，在编写Spring或者Maven或者其他需要用到XML文档的程序时，通常都是将这些XML文档头拷贝过来，并没有理解其中元素（比如xmlns，xmlns:xsi，xsi:schemaLocation）的真正含义，不知道哪些元素是多余的，也不知道为什么要加那些元素。这样当有时候网上Copy的XML头有错的时候自己却不知道怎么下手。我也是这样的，于是今天花了点时间好好的理解了一下这些元素及其用法，现整理与此。</p><p>话不多说，先来一段Spring的XML样本，相信大家都很眼熟：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;xxx.xxx.controller&quot;</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.Xxx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxxx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个文档中，根元素<code>&lt;beans/&gt;</code>就不用说了，接下来是xmlns。那么什么是xmlns呢？xmlns其实是XML Namespace的缩写，可译为“XML命名空间”，但个人觉得，翻译后的名字反而不好理解，所以我们就叫它为XML Namespace吧。</p><h3 id="为什么需要xmlns？"><a href="#为什么需要xmlns？" class="headerlink" title="为什么需要xmlns？"></a>为什么需要xmlns？</h3><p>考虑这样两个XML文档：表示HTML表格元素的<code>&lt;table/&gt;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和描述一张桌子的<code>&lt;table/&gt;</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>African Coffee Table<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">width</span>&gt;</span>80<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">length</span>&gt;</span>120<span class="tag">&lt;/<span class="name">length</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假如这两个 XML 文档被一起使用，由于两个文档都包含带有不同内容和定义的 <code>&lt;table&gt; </code>元素，就会发生命名冲突。XML 解析器是无法确定如何处理这类冲突。为了解决上述问题，xmlns就产生了。</p><h3 id="如何是用xmlns？"><a href="#如何是用xmlns？" class="headerlink" title="如何是用xmlns？"></a>如何是用xmlns？</h3><p>很简单，使用语法： **xmlns:namespace-prefix&#x3D;”namespaceURI”**。其中namespace-prefix为自定义前缀，只要在这个XML文档中保证前缀不重复即可；namespaceURI是这个前缀对应的XML Namespace的定义。例如，</p><p>这一句定义了一个<code>http://www.springframwork.org/schema/context</code>的Namespace（这和Java类中的包的声明很相似），并将其和前缀context绑定。所以上面的Spring XML文档中会有这么一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">&quot;xxx.xxx.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>&lt;component-scan/&gt;</code>元素就来自别名为context的XML Namespace，也就是在<code>http://www.springframework.org/schema/context</code>中定义的。</p><p>我们还可以将前缀定义为abc：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:abc = &quot;namespaceURI&quot;</span><br></pre></td></tr></table></figure><p>这样再使用这个namespaceURI中的元素时，需要以abc为前缀，例如：<code>&lt;abc:xxx/&gt;</code>。再拿上面的例子解释怎么使用xmlns：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里xmlns:h=&quot;url1&quot;表示这个table是用h作为标记，table的写法在url1中定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h:table</span> <span class="attr">xmlns:h</span>=<span class="string">&quot;url1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h:tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h:tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h:table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里xmlns:f=&quot;url2&quot;表示这个table是用f作为标记，table的写法在url2中定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">f:table</span> <span class="attr">xmlns:f</span>=<span class="string">&quot;url2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f:name</span>&gt;</span>African Coffee Table<span class="tag">&lt;/<span class="name">f:name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f:width</span>&gt;</span>80<span class="tag">&lt;/<span class="name">f:width</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f:length</span>&gt;</span>120<span class="tag">&lt;/<span class="name">f:length</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">f:table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后者与前者仅仅使用不同前缀，我们为<code> &lt;table&gt;</code> 标签添加了一个 xmlns 属性，这样就为前缀赋予了一个与某个命名空间相关联的限定名称。此时再把它们放在一起，XML解析器就不会报错了。</p><p>注意：当xmlns被定义在元素的开始标签中（如这里的<code>&lt;f:table/&gt;</code>）时，所有带有相同前缀的子元素都会与同一个Namespace相关联（即<code>&lt;f:table/&gt;</code>里面的<code>&lt;f:name/&gt;</code>和<code>&lt;f:width/&gt;</code>也会使用url2定义的写法）。</p><h3 id="xmlns和xmlns-xsi有什么不同？"><a href="#xmlns和xmlns-xsi有什么不同？" class="headerlink" title="xmlns和xmlns:xsi有什么不同？"></a>xmlns和xmlns:xsi有什么不同？</h3><p>xmlns表示默认的Namespace。例如Spring XML文档中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br></pre></td></tr></table></figure><p>这一句表示该文档默认的XML Namespace为<code>http://www.springframwork.org/schema/beans</code>。<strong>对于默认的Namespace中的元素，可以不使用前缀</strong>。例如Spring XML文档中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.Xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxxx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xmlns:xsi表示使用xsi作为前缀的Namespace，当然前缀xsi需要在文档中声明。</p><h3 id="xsi-schemaLocation有何作用？"><a href="#xsi-schemaLocation有何作用？" class="headerlink" title="xsi:schemaLocation有何作用？"></a>xsi:schemaLocation有何作用？</h3><p>xsi:schemaLocation属性其实是Namespace为<code>http://www.w3.org/2001/XMLSchema-instance</code>里的schemaLocation属性，正是因为我们一开始声明了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br></pre></td></tr></table></figure><p>这里才写作xsi:schemaLocation（当然一般都使用这个前缀）。它定义了XML Namespace和<strong>对应的 XSD（Xml Schema Definition）文档的位置的关系。它的值由一个或多个URI引用对组成，两个URI之间以空白符分隔（空格和换行均可）。第一个URI是定义的 XML Namespace的值，第二个URI给出Schema文档的位置，Schema处理器将从这个位置读取Schema文档，</strong>该文档的targetNamespace必须与第一个URI相匹配。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/context </span><br><span class="line">                    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure><p>这里表示Namespace为<code>http://www.springframework.org/schema/context</code>的Schema的位置为*<a href="http://www.springframework.org/schema/context/spring-context.xsd?spm=5176.100239.blogcont40353.18.KFHYwA&file=spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a>*。这里我们可以打开这个Schema的位置，下面是这个文档的开始部分：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:beans</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:tool</span>=<span class="string">&quot;http://www.springframework.org/schema/tool&quot;</span></span></span><br><span class="line"><span class="tag">             </span></span><br><span class="line"><span class="tag">            &lt;!<span class="attr">--</span> <span class="attr">这里的targetNamespace和上方xsi:schemaLocation中的第一个URI匹配</span> <span class="attr">--</span>&gt;</span> </span><br><span class="line">            targetNamespace=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">            elementFormDefault=&quot;qualified&quot;</span><br><span class="line">            attributeFormDefault=&quot;unqualified&quot;&gt;</span><br></pre></td></tr></table></figure><p>有了上面的说明后，再去理解开始的Spring XML文档，一定会有不一样的感觉！</p>]]></content>
      
      
      <categories>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EditorCoroutine简单使用说明</title>
      <link href="/2021/09/05/b9da3890739f/"/>
      <url>/2021/09/05/b9da3890739f/</url>
      
        <content type="html"><![CDATA[<h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>关键类： <code>EditorCoroutine</code>，<code>EditorCoroutineUtility</code></p><p>关键方法： <code>StartCoroutine</code>，<code>StartCoroutineOwnerless</code>，<code>StopCoroutine</code></p><p>方法说明：</p><p>1.<code>StartCoroutine</code>：开启协程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EditorCoroutine <span class="title">StartCoroutine</span>(<span class="params">IEnumerator routine, <span class="built_in">object</span> owner</span>)</span>;</span><br></pre></td></tr></table></figure><p>2.<code>StartCoroutineOwnerless</code>：开启无主的协程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EditorCoroutine <span class="title">StartCoroutineOwnerless</span>(<span class="params">IEnumerator routine</span>)</span>;</span><br></pre></td></tr></table></figure><p>3.<code>StopCoroutine</code>:停止当前协程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StopCoroutine</span>(<span class="params">EditorCoroutine coroutine</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EditorCoroutine类是当前的协程类</span></span><br><span class="line"><span class="keyword">private</span> EditorCoroutine _outputCoroutine;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    EditorCoroutineUtility.StartCoroutine(Output(), <span class="keyword">this</span>);<span class="comment">//开启协程，并且拥有者设置为当前对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    EditorCoroutineUtility.StopCoroutine(_outputCoroutine);<span class="comment">//停止协程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Output</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Editor模式下实现Update的功能</title>
      <link href="/2021/09/05/def48e906a5d/"/>
      <url>/2021/09/05/def48e906a5d/</url>
      
        <content type="html"><![CDATA[<h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><ol><li><p>首先我们需要准备一个能够在Editor模式下按时间执行的方法，正好，Unity提供了一个编辑器的Update委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用更新的委托。</span></span><br><span class="line"><span class="comment">//可以将我们的方法添加到此委托以获取更新，会以大约100次每秒的速度得到一个更新的回调信号</span></span><br><span class="line">EditorApplication.update</span><br></pre></td></tr></table></figure></li><li><p><code>Update</code>方法中，一个很关键的参数就是<strong>Time.deltaTime</strong>（增量时间），既然我们要实现Editor模式下的Update，那么相对应的增量时间就是不可缺少的，因此我们需要自己写一个方法去简单计算。每次的时间获取，可以利用<code>Time.realtimeSinceStartup</code>得到真实时间，然后通过EditorApplication.update回调里记录上一次跟这一次的时间，来得到对应的增量时间，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="built_in">float</span> _lastUpdateTime;</span><br><span class="line">   <span class="keyword">static</span> <span class="built_in">float</span> _deltaTime;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EditorUpdateAction</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">float</span> curTime = Time.realtimeSinceStartup;</span><br><span class="line">       <span class="built_in">float</span> _lastUpdateTime = Mathf.Min (_lastUpdateTime, curTime);<span class="comment">//正常情况当前时间数值是永远小于上次记录的时间，但是为了以防万一，还是需要做一个处理，比如进入Playing状态的时候，Time.realtimeSinceStartup就会从0开始</span></span><br><span class="line">       <span class="built_in">float</span> _deltaTime = curTime - _lastUpdateTime;<span class="comment">//这就是我们的增量时间</span></span><br><span class="line">       <span class="built_in">float</span> _lastUpdateTime = curTime;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">## 代码案例</span></span><br><span class="line"></span><br><span class="line">```c<span class="meta">#</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Toolkit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EditorUpdate</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">event</span> Action&lt;<span class="built_in">float</span>&gt; _updateEvents;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">float</span> _lastUpdateTime;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">float</span> _deltaTime;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> DeltaTime =&gt; _deltaTime;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">EditorUpdate</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorApplication.update += EditorUpdateAction;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EditorUpdateAction</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">float</span> curTime = Time.realtimeSinceStartup;</span><br><span class="line">            _lastUpdateTime = Mathf.Min (_lastUpdateTime, curTime);</span><br><span class="line">            _deltaTime = curTime - _lastUpdateTime;</span><br><span class="line">            _updateEvents?.Invoke(_deltaTime);</span><br><span class="line">            _lastUpdateTime = curTime;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注册编辑器模式下的Update回调</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;update&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>(<span class="params">Action&lt;<span class="built_in">float</span>&gt; update</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">            <span class="keyword">if</span> (Application.isPlaying) <span class="keyword">return</span>; </span><br><span class="line">            _updateEvents += update;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 移除编辑器模式下的Update回调</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;update&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DeleteUpdate</span>(<span class="params">Action&lt;<span class="built_in">float</span>&gt; update</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">            <span class="keyword">if</span> (Application.isPlaying) <span class="keyword">return</span>; </span><br><span class="line">            _updateEvents -= update;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TextMeshPro优化</title>
      <link href="/2021/08/29/b920bc38b0bc/"/>
      <url>/2021/08/29/b920bc38b0bc/</url>
      
        <content type="html"><![CDATA[<p>TextMeshPro在我们更改文本内容时，都必须重新生成底层几何图形。以此就会产生GC。</p><p>以下是部分优化的方式介绍：</p><h2 id="1-字符串给定字符不变的情况下进行拼接处理"><a href="#1-字符串给定字符不变的情况下进行拼接处理" class="headerlink" title="1.字符串给定字符不变的情况下进行拼接处理"></a>1.字符串给定字符不变的情况下进行拼接处理</h2><p>当我们更改字符串或连接字符串并且给定的字符串是不可变的时，做以下这样的事情就会导致GC。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_TextComponent.text = <span class="string">&quot;You earn &quot;</span>  + numCoins + <span class="string">&quot; coins!&quot;</span>;</span><br></pre></td></tr></table></figure><p>相反，我们可以使用 <code>TMP_Text.SetText()</code> 函数，该函数允许在没有 GC 的情况下组合字符串和变量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> m_Message_01 = <span class="string">&quot;You earn &#123;0&#125; coins!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">m_TextComponent.SetText(m_Message_01, numCoins);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> TextMeshPro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> TextMeshPro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timeline功能扩展(EventMarker)——自定义Timeline的帧事件功能</title>
      <link href="/2021/08/22/9b36b034cfdb/"/>
      <url>/2021/08/22/9b36b034cfdb/</url>
      
        <content type="html"><![CDATA[<h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><p><strong>Runtime模式：</strong></p><ol start="0"><li><p><strong>Marker ID：</strong>Marker标识</p></li><li><p><strong>Jump To：</strong>需要能够切换到当前轨道的其他时间点</p><ul><li><strong>None：</strong>不做任何处理</li><li><strong>Jump To Marker：</strong>跳到当前轨道除自己外的其他标记上<ul><li><strong>Jump Marker：</strong>指定的跳转标记，只在Jump To Marker模式生效（在Editor类处理赋值）</li></ul></li><li><strong>Jump To Time：</strong>跳到当前轨道上指定的时间<ul><li><strong>Jump Time：</strong>指定的跳转时间，只在Jump To Time模式生效</li></ul></li><li><strong>Jump Count：</strong>指定最大跳转次数，小于0则忽略</li></ul></li><li><p><strong>Set Speed：</strong>设置当前轨道的播放速度</p><ul><li><strong>Speed：</strong>当Speed为0时，则轨道暂停，为1则继续播放</li></ul></li><li><p><strong>Execute Event：</strong>执行事件回调</p><ul><li><strong>None：</strong>不做任何处理</li><li><strong>Unity Event：</strong>只执行 Unity Event的事件监听系统<ul><li><strong>Target Event Index：</strong>标记当前Marker对应的Unity  Event下标（在Editor类处理赋值）</li></ul></li><li><strong>Action：</strong>只执行Runtime模式下注册的事件回调<ul><li><strong>String Key：</strong>用于调用运行时注册的事件key（不能为null或者empty）</li></ul></li><li><strong>Everything：</strong>Unity Event跟Action同时执行</li><li><strong>Execute Event Count：</strong>执行事件回调的最大次数，小于0则忽略</li></ul></li></ol><p><strong>Editor模式：</strong></p><ol><li><strong>EventMarkerReceiver脚本图标替换：</strong>主要利用反射调用，将图标样式设置成<code>SignalReceiver Icon</code></li><li><strong>EventMarker脚本图标替换：</strong>同样利用反射调用，将图标样式设置成<code>SignalEmitter Icon</code></li><li><strong>Timeline轨道上的Marker样式替换：</strong>利用特性<code>[CustomStyle(&quot;SignalEmitter&quot;)]</code>使用<code>SignalEmitter</code>的<strong>USS样式</strong></li><li><strong>重写EventMarker的InspectorGUI，优化显示</strong></li></ol><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="/Timeline%E5%8A%9F%E8%83%BD%E6%89%A9%E5%B1%95(EventMarker)%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89Timeline%E7%9A%84%E5%B8%A7%E4%BA%8B%E4%BB%B6%E5%8A%9F%E8%83%BD/3-1.png" alt="3-1"></p><p><img src="/Timeline%E5%8A%9F%E8%83%BD%E6%89%A9%E5%B1%95(EventMarker)%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89Timeline%E7%9A%84%E5%B8%A7%E4%BA%8B%E4%BB%B6%E5%8A%9F%E8%83%BD/3-1.gif" alt="3-1"></p><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><p><strong>Marker轨道类：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Playables;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Timeline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Babybus.CodingTools</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    [<span class="meta">TrackBindingType(typeof(EventMarkerReceiver))</span>]</span><br><span class="line">    [<span class="meta">TrackColor(0.4448276f, 0f, 1f)</span>]</span><br><span class="line">    [<span class="meta">ExcludeFromPreset</span>]</span><br><span class="line">    [<span class="meta">DisplayName(<span class="string">&quot;Event/EventMarkerTrack&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventMarkerTrack</span> : <span class="title">MarkerTrack</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GatherProperties</span>(<span class="params">PlayableDirector director, IPropertyCollector driver</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">            <span class="keyword">var</span> component = director.GetGenericBinding(<span class="keyword">this</span>) <span class="keyword">as</span> EventMarkerReceiver;</span><br><span class="line">            <span class="keyword">if</span> (component == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            component.ClearInvokeCount();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">base</span>.GatherProperties(director, driver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MonoReceiver类（轨道绑定对象）：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Playables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Babybus.CodingTools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> JumpType = EventMarker.JumpType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventMarkerReceiver</span> : <span class="title">MonoBehaviour</span>, <span class="title">INotificationReceiver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> ExecuteData</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> _jumpCount;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> _executeEventCount;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (index)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> _jumpCount;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> _executeEventCount;</span><br><span class="line">                        <span class="literal">default</span>: <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">set</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (index)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>: _jumpCount = <span class="keyword">value</span>; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>: _executeEventCount = <span class="keyword">value</span>; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="literal">default</span>: <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;EventMarker, ExecuteData&gt; _executeDatas;</span><br><span class="line">        </span><br><span class="line">        [<span class="meta">SerializeField, HideInInspector</span>] <span class="keyword">private</span> List&lt;UnityEvent&gt; _unityEvents = <span class="keyword">new</span> List&lt;UnityEvent&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnNotify</span>(<span class="params">Playable origin, INotification notification, <span class="built_in">object</span> context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> marker = notification <span class="keyword">as</span> EventMarker;</span><br><span class="line">            <span class="keyword">if</span> (marker == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            DispatchSignal(<span class="keyword">this</span>, marker);</span><br><span class="line">            SetSpeed(marker, origin);</span><br><span class="line">            JumpTo(<span class="keyword">this</span>, marker, origin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DispatchSignal</span>(<span class="params">EventMarkerReceiver receiver, EventMarker marker</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!marker.IsExecuteEvent) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (!IsExecuteEvent(receiver, marker)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (marker.ExecuteStringAction)&#123; receiver.InvokeEvent(marker.StringKey); &#125;</span><br><span class="line">            <span class="keyword">if</span> (marker.ExecuteUnityEvent)&#123; InvokeUnityEvent(receiver, marker.TargetEventIndex); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InvokeUnityEvent</span>(<span class="params">EventMarkerReceiver receiver, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= receiver._unityEvents.Count) <span class="keyword">return</span>;</span><br><span class="line">            receiver._unityEvents[index]?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsExecuteEvent</span>(<span class="params">EventMarkerReceiver receiver, EventMarker marker</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (marker.ExecuteEventCount &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (receiver._executeDatas == <span class="literal">null</span>) receiver._executeDatas = <span class="keyword">new</span> Dictionary&lt;EventMarker, ExecuteData&gt;();</span><br><span class="line">            <span class="keyword">if</span> (receiver._executeDatas.TryGetValue(marker, <span class="keyword">out</span> <span class="keyword">var</span> data))</span><br><span class="line">            &#123;</span><br><span class="line">                data[<span class="number">1</span>]++;</span><br><span class="line">                receiver._executeDatas[marker] = data;</span><br><span class="line">                <span class="keyword">return</span> data[<span class="number">1</span>]-- &lt; marker.ExecuteEventCount;</span><br><span class="line">            &#125;</span><br><span class="line">            receiver._executeDatas[marker] = <span class="keyword">new</span> ExecuteData();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">ClearInvokeCount</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _executeDatas?.Clear();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSpeed</span>(<span class="params">EventMarker marker, Playable origin</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!marker.SetSpeed) <span class="keyword">return</span>;</span><br><span class="line">            origin.GetGraph().GetRootPlayable(<span class="number">0</span>).SetSpeed(marker.Speed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JumpTo</span>(<span class="params">EventMarkerReceiver receiver, EventMarker marker, Playable origin</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!marker.IsExecuteJump) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (!IsExecuteJump(receiver, marker)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> playable = origin.GetGraph().GetRootPlayable(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (marker.MarkerJumpType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> JumpType.None: <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">case</span> JumpType.JumpToMarker:</span><br><span class="line">                    <span class="keyword">if</span> (marker.JumpMarker == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">                    playable.SetTime(marker.JumpMarker.time);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> JumpType.JumpToTime:</span><br><span class="line">                    <span class="keyword">if</span> (marker.JumpTime &gt; playable.GetDuration()) <span class="keyword">return</span>;</span><br><span class="line">                    playable.SetTime(marker.JumpTime);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>: <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsExecuteJump</span>(<span class="params">EventMarkerReceiver receiver, EventMarker marker</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (marker.JumpCount &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (receiver._executeDatas == <span class="literal">null</span>) receiver._executeDatas = <span class="keyword">new</span> Dictionary&lt;EventMarker, ExecuteData&gt;();</span><br><span class="line">            <span class="keyword">if</span> (receiver._executeDatas.TryGetValue(marker, <span class="keyword">out</span> <span class="keyword">var</span> data))</span><br><span class="line">            &#123;</span><br><span class="line">                data[<span class="number">0</span>]++;</span><br><span class="line">                receiver._executeDatas[marker] = data;</span><br><span class="line">                <span class="keyword">return</span> data[<span class="number">0</span>]-- &lt; marker.JumpCount;</span><br><span class="line">            &#125;</span><br><span class="line">            receiver._executeDatas[marker] = <span class="keyword">new</span> ExecuteData();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 外部事件,热更脚本注册调用</span></span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, Action&gt; _stringAction;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">AddEvent</span>(<span class="params"><span class="built_in">string</span> key, Action action, <span class="built_in">bool</span> canOverride = <span class="literal">false</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(_stringAction == <span class="literal">null</span>) _stringAction = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Action&gt;();</span><br><span class="line">            <span class="keyword">if</span> (_stringAction.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!canOverride) Debug.LogError(<span class="string">&quot;存在相同StringKey!&quot;</span>); </span><br><span class="line">                <span class="keyword">else</span> _stringAction[key] = action;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            _stringAction.Add(key, action);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">RemoveEvent</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_stringAction == <span class="literal">null</span> || _stringAction.ContainsKey(key)) <span class="keyword">return</span>;</span><br><span class="line">            _stringAction.Remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">InvokeEvent</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_stringAction == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (_stringAction.TryGetValue(key, <span class="keyword">out</span> <span class="keyword">var</span> action)) action?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> EventMarkerReceiver扩展方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EventMarkerReceiverExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddEvent</span>(<span class="params"><span class="keyword">this</span> EventMarkerReceiver receiver, <span class="built_in">string</span> key, Action action,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="built_in">bool</span> canOverride = <span class="literal">false</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            receiver.AddEvent(key, action, canOverride);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveEvent</span>(<span class="params"><span class="keyword">this</span> EventMarkerReceiver receiver, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            receiver.RemoveEvent(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InvokeEvent</span>(<span class="params"><span class="keyword">this</span> EventMarkerReceiver receiver, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            receiver.InvokeEvent(key); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Marker标记类：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Playables;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Timeline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Babybus.CodingTools</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CustomStyle(<span class="string">&quot;SignalEmitter&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventMarker</span> : <span class="title">Marker</span>, <span class="title">INotification</span>, <span class="title">INotificationOptionProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">enum</span> JumpType</span><br><span class="line">        &#123;</span><br><span class="line">            None = <span class="number">0</span>,</span><br><span class="line">            JumpToMarker = <span class="number">2</span>,</span><br><span class="line">            JumpToTime = <span class="number">4</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Flags</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">enum</span> ExecuteType</span><br><span class="line">        &#123;</span><br><span class="line">            None = <span class="number">0</span>,</span><br><span class="line">            UnityEvent = <span class="number">2</span>,</span><br><span class="line">            Action = <span class="number">4</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="built_in">bool</span> _retroactive;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="built_in">bool</span> _emitOnce;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">string</span> _markerID;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> JumpType _jumpType;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> EventMarker _jumpMarker;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> _jumpTime;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">int</span> _jumpCount = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">bool</span> _setSpeed;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> _speed;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> ExecuteType _executeEventType;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">int</span> _targetEventIndex;<span class="comment">//用来确定当前的Marker上的UnityEvent</span></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">string</span> _stringKey;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">int</span> _executeEventCount = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> Retroactive =&gt; _retroactive;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> EmitOnce =&gt; _emitOnce;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> MarkerID =&gt; _markerID;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> JumpType MarkerJumpType =&gt; _jumpType;</span><br><span class="line">        <span class="keyword">public</span> EventMarker JumpMarker =&gt; _jumpMarker;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> JumpTime =&gt; _jumpTime;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> JumpCount =&gt; _jumpCount;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsExecuteJump =&gt; _jumpType != JumpType.None;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> SetSpeed =&gt; _setSpeed;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> Speed =&gt; _speed;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> TargetEventIndex =&gt; _targetEventIndex;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> StringKey =&gt; _stringKey;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ExecuteEventCount =&gt; _executeEventCount;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsExecuteEvent =&gt; ((<span class="built_in">int</span>)_executeEventType &amp; <span class="number">0</span>) == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> ExecuteUnityEvent =&gt; ((<span class="built_in">int</span>)_executeEventType &amp; <span class="number">2</span>) == <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> ExecuteStringAction =&gt; ((<span class="built_in">int</span>)_executeEventType &amp; <span class="number">4</span>) == <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        PropertyName INotification.id =&gt; !<span class="built_in">string</span>.IsNullOrEmpty(_markerID) ? <span class="keyword">new</span> PropertyName(_markerID) : <span class="keyword">new</span> PropertyName(<span class="built_in">string</span>.Empty);</span><br><span class="line"></span><br><span class="line">        NotificationFlags INotificationOptionProvider.flags</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (Retroactive ? NotificationFlags.Retroactive : <span class="literal">default</span>) |</span><br><span class="line">                       (EmitOnce ? NotificationFlags.TriggerOnce : <span class="literal">default</span>) |</span><br><span class="line">                       NotificationFlags.TriggerInEditMode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Editor类：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.Timeline;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Timeline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Babybus.CodingTools</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CustomEditor(typeof(EventMarker))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventMarkerInspector</span> : <span class="title">Editor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _timeContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Time&quot;</span>,<span class="string">&quot;Time for the marker&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _retroactiveContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Retroactive&quot;</span>,<span class="string">&quot;即使Timeline进度在当前信号之后，也可以使用追溯发出此信号&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _emitOnceContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Emit Once&quot;</span>,<span class="string">&quot;在循环期间只会发出一次信号&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _markerIDContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Marker ID&quot;</span>,<span class="string">&quot;标记ID，用来绑定UnityEvent&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _jumpTypeContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Jump Type&quot;</span>,<span class="string">&quot;进度跳转模式选择&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _jumpTimeContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Jump Time&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _jumpCountContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Jump Count&quot;</span>,<span class="string">&quot;进度跳转的最大次数，小于0则忽略&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _setSpeedContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Set Speed&quot;</span>,<span class="string">&quot;设置Timeline当前Playable的速率&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _speedContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Speed&quot;</span>,<span class="string">&quot;需要设置的Playable速率&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _executeEventTypeContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Execute Event Type&quot;</span>,<span class="string">&quot;事件执行模式选择&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _targetEventContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Target Event&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _stringKeyContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Action Key&quot;</span>,<span class="string">&quot;用于调用运行时注册的事件key（不能为null或者empty）&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _executeEventCountContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Execute Event Count&quot;</span>,<span class="string">&quot;事件执行的最大次数，小于0则忽略&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _selectEventContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Select Event&quot;</span>,<span class="string">&quot;事件选择&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _noEventContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;不存在事件！请添加！&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _addEventContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Add Event&quot;</span>,<span class="string">&quot;添加一个事件&quot;</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> GUIContent _deleteEventContent = <span class="keyword">new</span> GUIContent(<span class="string">&quot;Delete Event&quot;</span>,<span class="string">&quot;移除当前选择的事件&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> _noMarkerContent = <span class="string">&quot;在这条轨道上没有找到标记, 请添加一个以使用此标记&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> _jumpToContent = <span class="string">&quot;Jump to&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> _noneContent = <span class="string">&quot;None&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _timeProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _retroactiveProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _emitOnceProp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _markerIDProp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _jumpTypeProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _jumpMarkerProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _jumpTimeProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _jumpCountProp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _setSpeedProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _speedProp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _executeEventTypeProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _targetEventIndexProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _stringKeyProp;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _executeEventCountProp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SerializedObject _receiverSerializedObject;</span><br><span class="line">        <span class="keyword">private</span> SerializedProperty _markerUnityEventProp;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>[] _selectValues;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _timeProp = serializedObject.FindProperty(<span class="string">&quot;m_Time&quot;</span>);</span><br><span class="line">            _retroactiveProp = serializedObject.FindProperty(<span class="string">&quot;_retroactive&quot;</span>);</span><br><span class="line">            _emitOnceProp = serializedObject.FindProperty(<span class="string">&quot;_emitOnce&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _markerIDProp = serializedObject.FindProperty(<span class="string">&quot;_markerID&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _jumpTypeProp = serializedObject.FindProperty(<span class="string">&quot;_jumpType&quot;</span>);</span><br><span class="line">            _jumpMarkerProp = serializedObject.FindProperty(<span class="string">&quot;_jumpMarker&quot;</span>);</span><br><span class="line">            _jumpTimeProp = serializedObject.FindProperty(<span class="string">&quot;_jumpTime&quot;</span>);</span><br><span class="line">            _jumpCountProp = serializedObject.FindProperty(<span class="string">&quot;_jumpCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _setSpeedProp = serializedObject.FindProperty(<span class="string">&quot;_setSpeed&quot;</span>);</span><br><span class="line">            _speedProp = serializedObject.FindProperty(<span class="string">&quot;_speed&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _executeEventTypeProp = serializedObject.FindProperty(<span class="string">&quot;_executeEventType&quot;</span>);</span><br><span class="line">            _targetEventIndexProp = serializedObject.FindProperty(<span class="string">&quot;_targetEventIndex&quot;</span>);</span><br><span class="line">            _stringKeyProp = serializedObject.FindProperty(<span class="string">&quot;_stringKey&quot;</span>);</span><br><span class="line">            _executeEventCountProp = serializedObject.FindProperty(<span class="string">&quot;_executeEventCount&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> playableDirector = TimelineEditor.inspectedDirector;</span><br><span class="line">            TrackAsset trackAsset = (target <span class="keyword">as</span> EventMarker)?.parent;</span><br><span class="line">            <span class="keyword">var</span> receiver = playableDirector.GetGenericBinding(trackAsset) <span class="keyword">as</span> EventMarkerReceiver;</span><br><span class="line">            <span class="keyword">if</span> (receiver == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            _receiverSerializedObject = <span class="keyword">new</span> SerializedObject(receiver);</span><br><span class="line">            _markerUnityEventProp = _receiverSerializedObject.FindProperty(<span class="string">&quot;_unityEvents&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_receiverSerializedObject == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            serializedObject.Update();</span><br><span class="line">            _receiverSerializedObject.Update();</span><br><span class="line">            <span class="keyword">var</span> marker = target <span class="keyword">as</span> EventMarker;</span><br><span class="line">            DrawMainArea();</span><br><span class="line">            DrawEventID();</span><br><span class="line">            DrawJump(marker);</span><br><span class="line">            DrawSetSpeed();</span><br><span class="line">            DrawEvent();</span><br><span class="line">            serializedObject.ApplyModifiedProperties();</span><br><span class="line">            _receiverSerializedObject.ApplyModifiedProperties();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawMainArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.PropertyField(_timeProp, _timeContent);</span><br><span class="line">            EditorGUILayout.PropertyField(_retroactiveProp, _retroactiveContent);</span><br><span class="line">            EditorGUILayout.PropertyField(_emitOnceProp, _emitOnceContent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawEventID</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.BeginVertical(<span class="string">&quot;HelpBox&quot;</span>);</span><br><span class="line">            EditorGUILayout.PropertyField(_markerIDProp, _markerIDContent);</span><br><span class="line">            EditorGUILayout.EndVertical();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawJump</span>(<span class="params">IMarker marker</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.BeginVertical(<span class="string">&quot;HelpBox&quot;</span>);</span><br><span class="line">            EditorGUILayout.PropertyField(_jumpTypeProp, _jumpTypeContent);</span><br><span class="line">            <span class="keyword">if</span> (_jumpTypeProp.enumValueIndex != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> isShowJumpCount = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">switch</span> (_jumpTypeProp.enumValueIndex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">var</span> eventMarkers = GetEventMarkers(marker);</span><br><span class="line">                        eventMarkers.Remove(marker <span class="keyword">as</span> EventMarker);</span><br><span class="line">                        <span class="keyword">if</span> (!eventMarkers.Any())</span><br><span class="line">                        &#123;</span><br><span class="line">                            EditorGUILayout.HelpBox(<span class="built_in">string</span>.Format(_noMarkerContent), MessageType.Info);</span><br><span class="line">                            isShowJumpCount = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            DrawJumpMarkerPopup(eventMarkers);</span><br><span class="line">                            <span class="keyword">if</span> (_jumpMarkerProp.objectReferenceValue == <span class="literal">null</span>) isShowJumpCount = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        EditorGUILayout.PropertyField(_jumpTimeProp, _jumpTimeContent);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(isShowJumpCount) EditorGUILayout.PropertyField(_jumpCountProp, _jumpCountContent);</span><br><span class="line">            &#125;</span><br><span class="line">            EditorGUILayout.EndVertical();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawSetSpeed</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.BeginVertical(<span class="string">&quot;HelpBox&quot;</span>);</span><br><span class="line">            EditorGUILayout.PropertyField(_setSpeedProp, _setSpeedContent);</span><br><span class="line">            <span class="keyword">if</span> (_setSpeedProp.boolValue)</span><br><span class="line">            &#123;</span><br><span class="line">                EditorGUILayout.PropertyField(_speedProp, _speedContent);</span><br><span class="line">            &#125;</span><br><span class="line">            EditorGUILayout.EndVertical();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawEvent</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.BeginVertical(<span class="string">&quot;HelpBox&quot;</span>);</span><br><span class="line">            EditorGUILayout.PropertyField(_executeEventTypeProp, _executeEventTypeContent);</span><br><span class="line">            <span class="built_in">int</span> index = _executeEventTypeProp.enumValueIndex;</span><br><span class="line">            <span class="keyword">if</span> (index != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">1</span> || index == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(_selectValues == <span class="literal">null</span>) _selectValues = <span class="keyword">new</span> []&#123;<span class="string">&quot;None&quot;</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span> (_selectValues.Length != _markerUnityEventProp.arraySize)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _selectValues = <span class="keyword">new</span> <span class="built_in">string</span>[_markerUnityEventProp.arraySize];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _markerUnityEventProp.arraySize; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _selectValues[i] = <span class="string">&quot;事件:&quot;</span> + (i + <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (_targetEventIndexProp.intValue &lt; <span class="number">0</span>) _targetEventIndexProp.intValue = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (_targetEventIndexProp.intValue &gt;= _markerUnityEventProp.arraySize)</span><br><span class="line">                        _targetEventIndexProp.intValue = _markerUnityEventProp.arraySize - <span class="number">1</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (_selectValues.Length != <span class="number">0</span> &amp;&amp; _targetEventIndexProp.intValue &gt;= <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _targetEventIndexProp.intValue = EditorGUILayout.Popup(_selectEventContent,</span><br><span class="line">                            _targetEventIndexProp.intValue, _selectValues);</span><br><span class="line">                        EditorGUILayout.PropertyField(_markerUnityEventProp.GetArrayElementAtIndex(_targetEventIndexProp.intValue), _targetEventContent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        EditorGUILayout.HelpBox(_noEventContent);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    EditorGUILayout.BeginHorizontal();</span><br><span class="line">                    <span class="keyword">if</span> (GUILayout.Button(_addEventContent))</span><br><span class="line">                    &#123;</span><br><span class="line">                        _markerUnityEventProp.arraySize++;</span><br><span class="line">                        _targetEventIndexProp.intValue = _markerUnityEventProp.arraySize - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (GUILayout.Button(_deleteEventContent))</span><br><span class="line">                    &#123;</span><br><span class="line">                        _markerUnityEventProp.DeleteArrayElementAtIndex(_targetEventIndexProp.intValue);</span><br><span class="line">                        _targetEventIndexProp.intValue = _markerUnityEventProp.arraySize - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    EditorGUILayout.EndHorizontal();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">2</span> || index == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorGUILayout.PropertyField(_stringKeyProp, _stringKeyContent);</span><br><span class="line">                &#125;</span><br><span class="line">                EditorGUILayout.PropertyField(_executeEventCountProp, _executeEventCountContent);</span><br><span class="line">            &#125; </span><br><span class="line">            EditorGUILayout.EndVertical();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DrawJumpMarkerPopup</span>(<span class="params">IList&lt;EventMarker&gt; eventMarkers</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> popupIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> destinationMarkerIndex = eventMarkers.IndexOf(_jumpMarkerProp.objectReferenceValue <span class="keyword">as</span> EventMarker);</span><br><span class="line">            <span class="keyword">if</span> (destinationMarkerIndex != <span class="number">-1</span>)</span><br><span class="line">                popupIndex = destinationMarkerIndex + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            EventMarker destinationMarker = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> changeScope = <span class="keyword">new</span> EditorGUI.ChangeCheckScope())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> newIndex = EditorGUILayout.Popup(_jumpToContent, popupIndex, GeneratePopupOptions(eventMarkers).ToArray());</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">if</span> (newIndex &gt; <span class="number">0</span>)</span><br><span class="line">                    destinationMarker = eventMarkers.ElementAt(newIndex - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (changeScope.changed)</span><br><span class="line">                    _jumpMarkerProp.objectReferenceValue = destinationMarker;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> IList&lt;EventMarker&gt; <span class="title">GetEventMarkers</span>(<span class="params">IMarker marker</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> eventMarkers = <span class="keyword">new</span> List&lt;EventMarker&gt;();</span><br><span class="line">            <span class="keyword">var</span> parent = marker.parent;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span>)</span><br><span class="line">                eventMarkers.AddRange(parent.GetMarkers().OfType&lt;EventMarker&gt;().ToList());</span><br><span class="line">            <span class="keyword">return</span> eventMarkers;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">GeneratePopupOptions</span>(<span class="params">IEnumerable&lt;EventMarker&gt; markers</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> _noneContent;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> marker <span class="keyword">in</span> markers)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> name = marker.MarkerID;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(name)) name = <span class="string">&quot;名字为空或重复都不生效&quot;</span>;</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具——自定义脚本的Selection Icon</title>
      <link href="/2021/08/22/60b8a5a0e061/"/>
      <url>/2021/08/22/60b8a5a0e061/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><img src="/2021/08/22/60b8a5a0e061/7-1.gif" class="" title="7-1"><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EditorToolKits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IconAssignation</span>: <span class="title">EditorWindow</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;Editor Extension/Icon Assignation&quot;</span>, priority = 4)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">EditorWindow.GetWindow&lt;IconAssignation&gt; (<span class="literal">true</span>, <span class="string">&quot;Icon Assigner&quot;</span>).Show ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> MethodInfo CopyMonoScriptIconToImporters = <span class="keyword">typeof</span>(MonoImporter).GetMethod(<span class="string">&quot;CopyMonoScriptIconToImporters&quot;</span>, BindingFlags.Static|BindingFlags.NonPublic);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> MethodInfo SetIconForObject = <span class="keyword">typeof</span>(EditorGUIUtility).GetMethod(<span class="string">&quot;SetIconForObject&quot;</span>, BindingFlags.Static|BindingFlags.NonPublic);</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>] <span class="built_in">string</span> iconName;</span><br><span class="line">[<span class="meta">SerializeField</span>] GUIContent icon;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static readonly string iconSuffix = &quot; icon&quot;;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">float</span></span><br><span class="line">iconMinSize = <span class="number">19</span>,</span><br><span class="line">iconMaxSize = <span class="number">67</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssignIcon</span>(<span class="params">Object target, GUIContent icon</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (target == <span class="literal">null</span> || icon == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentNullException ();</span><br><span class="line">Texture2D tex = icon.image <span class="keyword">as</span> Texture2D;</span><br><span class="line"><span class="keyword">if</span> (tex == <span class="literal">null</span>) &#123;</span><br><span class="line">Debug.LogError (<span class="string">&quot;Invalid Icon format : Not a Texture2D&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SetIconForObject.Invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">object</span>[]&#123;target, tex&#125;);</span><br><span class="line"></span><br><span class="line">MonoScript monoScript = target <span class="keyword">as</span> MonoScript;</span><br><span class="line"><span class="keyword">if</span> (monoScript)&#123;</span><br><span class="line">CopyMonoScriptIconToImporters.Invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">object</span>[]&#123; monoScript &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Selection.activeObject = EditorGUILayout.ObjectField (<span class="string">&quot;Target Object&quot;</span>, Selection.activeObject, <span class="keyword">typeof</span>(Object), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">EditorGUI.BeginChangeCheck ();</span><br><span class="line">iconName = EditorGUILayout.DelayedTextField (<span class="string">&quot;Icon Name&quot;</span>, iconName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EditorGUI.EndChangeCheck())&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">icon = EditorGUIUtility.IconContent (iconName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (System.Exception e)&#123;</span><br><span class="line">Debug.LogError (e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (icon == <span class="literal">null</span>)</span><br><span class="line">EditorGUILayout.LabelField (<span class="string">&quot;No icon found&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> pos = EditorGUILayout.GetControlRect (<span class="literal">false</span>, iconMaxSize);</span><br><span class="line">EditorGUI.LabelField (pos, icon);</span><br><span class="line">pos.x += iconMaxSize;</span><br><span class="line">pos.height = iconMinSize;</span><br><span class="line">EditorGUI.LabelField (pos, icon);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Selection.activeObject &amp;&amp; GUILayout.Button (<span class="string">&quot;Perform Assignation&quot;</span>))</span><br><span class="line">AssignIcon (Selection.activeObject, icon);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timeline新手上路</title>
      <link href="/2021/08/19/f1f7d45f30e6/"/>
      <url>/2021/08/19/f1f7d45f30e6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1cd61bf923a5f1084e8a361e5545caadc591ca03487908120fbd9f51618befa9">9a7ea7b4a01c0482802dd2526153cdabe59a6e1e68ed6f0cc2a36eca49fe8d908f343bd14c3df08c89620fc134ffba43f39394a8aa0f3aa1c73156682caa6d6cc14c2aae4c772f2d97e299b1752c1b03a015d57a1eb4e1ec9e650e92cd38f0495270cc4abfdb87edc283f32a54a82e96ec83ce41f215d9a0fd7da9a5ab6fceadc9fe102d9c3cc0162e47fc88814084a50062af3feb74fd34f0f07a0a2bee181af524dd33ebbf8c5a5656ca81222860c0043a14a1f4f36d4de163cb67fdd4dc73679ed1d152020382f448388c1219622cd5072267e7a61f6171f6fe17bc20cc2473d37395b0d54cefd9155f8ff3d13d4669ddab53f5e48f7ef8f8f517f90af6381ae0dec948d7ec5619fb7f21c7bcd77246396ad14bb54e654d1c7b7b5fad4d27fdc68d69292292388704a09e644abf1a40f001e2b5e5303094e6fa276a36648b6a31fad609266fc1e8016053f85aeb037b0d118ff20f460320d04e0da2bce175e3452d65d8d4c7c177f0ce4e5aa3707bc9dd79c1bf492a767b98af2581e7867515af626a9dcc18018bfdbbf3fcf23a2e92d873461d80733b6d31a4f845ce3f3f63d2853a10738bd987c5d0c018a74f331d6bb3fcca99c47e75ce42884f5ac461bb57d09a4430a66cc51937699d3953b0f6a2dbc9795ccfe4cd3f383e00a07fa1a9867d1def5de4cd369aaaabdc2ca4518b3ecfb34c24f6f966619acd12795aaad7c8deaabaf9cf88031b24225b391b4212262bfd5ff7402183222a87d3cf53dc340cc390f265875345170102656a469ab82ac5110b6ded4f7ad6121f0c1b8160e5485ed9072c3f992a23ce6191d28d73733bf7607615b77bec246d9998c191c7f0ee43c21bd4468674561a2353b12342746dd3c9259d2607e6b40910aace9931f78d574866f386649e5de63305f072b80021ae7f6dde80e8d39d950b6b79a34fa29bdbf2470f958610ebc30884a9ba12e1385b8bb635e9098505b0632694a2bd580fcc95385b72011b2ee17644ac760e7c39dd74168f7574728c73a0baa7250a1723245e0cd3d3ff40d1feefd9dac333a44ca24c957627e19faf5e9bd408c10ab8e80236491ca7d73758f0a249dc63d17d08f189bebc9e86f65aba2b6124726bf53a9a394a3db150c5767b025156f8ba25c8cbf9650dd8b666a5b3f7e46cf8e7ce68b04460fc361d1ba67d76b0afb96fe032b6b4d9e7165d4e67145b098aaa393220f8b350cc032f0446a5d2cdf75c31e2a32fa919b950223d92e5c704ade9c4d1cc72be4618a7644ce89e18a9454c3122286485cc85df2e8925c40211f43fec0035e683bf35d435db7aa063e632a647714d02bc2dfb7b51ca8cf318f82375f5304c0b59827583b16e85dced309bcc2bd9d0620bc1823fa0e0e821d1a331b03d31eee70ee33aa48baf97826b18101e517701dd3b45813e891b7c144056216650482508cc188a02f48270af8cd3671ba78557b0e6686a71b0a35912972d9bac20f18583fbb0928fe35c5d27408e3558dd1b19bc76f3d27f74ae80751175be9fb4e12cc0e4a2b5c66434b021b740e94b8613de75685d0d9d09d19f13eca7d609873736ebd2fdfed933d8fb989e7435401e0bb4e938e65f0f8a5780b2febca0d29eab12f0282f7b16b6147f96d894cfa3e6e6ea287946bffcc1e978f5438637ec68da94b4fb4eca7af34b4b4e41efc6701bc4f04349347c37cff9d437d04a14fee451f661ed668c6fe61ced6f4e8801e36771a6fd6c094f68a9f42c09d6d5866ddf27c44190c8bd785b657f28a01ed3378dbb65ee6b0ade7225a703e0f7498e2d1bb48e64278b8b3eb652fd521ffe10b0fa9d53d3865ec3097d38bee70e30eb0685d21f059f784dc727ed230d264167890024aae47f3a9641f8f8f5df626f7564e67a7487f59819fb21afc81633bf2e9a2265220e18377c51a9052b199d2dca07e3e5af54dd47b8701e420a075bf3ec398553791a8fa6b6ea91226b43dd8796b9c5b76837608e41b9c29d2b605c1ecd6f7e0bba374b25458c0b1e8b3603b04512c75f3532aa954443b548998f1c4f9938212f297ada6d645c12219624ee9df09fd6b7a3011f11390e58ab82c5b4ca97564c7897956ca710b9abfc1b9fa426994f2dfbb78ec3dbab3bf9eee535377844dc3de4a8a2f080edf0bd765bea43c5dc1c3ccd9bac1f7b2ee314fa65d0e1376fe3aece4a63086af7b3714f2a2226e2b767ca8c21ac34e4ede8007144bbe023d847dbf654fdba9c9a93d10992f13c11bf3319badab1b6460b9efe9c680f2c5402d377e089d778eaea468a50d2a3922f7e7f8829c9710a10980ebce31a486d3254ef04638c61c2851b1ccd6cf4294e0f818ff321c9d02fccdf1187387de9c1c8c7922e48f34a51e738c8762ca0caa0fbc980b8b995d8c0e314cfccb462e455a80d06ce0287ea8dd3d07dc34ad6a3a6cf2b2e7b2cb165ba429daf5a8edc7bc43609ca971ae0a31efb33127ec04b85dc3b12eae633f7b698b5ff7460ef26d9abab149777892e3f691f52311a2622ea4c29f03601c436dec3cec8cc735ab0b0db437e59603a8add26ff96ae8ba58aa7131440b5e8b2d06592568970b2f8608308d8ed3a295a812932f3a1eb3bdb9f1ce877fcf21dd0e4a83185912b85962dd2c81ef3bbf3e7eaa477cd91dfbcfc7e69ac82af5515aa8a356661fbd0ac9faff75e56b9ab59f63af1731bb20eee4ca8da70a5c1165546e764197ecf2ad077733a62ae5a7c6c114a7cd84817b6dc5061ad42402b52a52176ba605e011d88a7ff41dfa5af3fdf0b66bbace92ba6c016338b4e44a23382069845a679d4aa192f0c1da4a84f3a31374e523280f4e9798e75fdbd8611865a4a68d334c5801745069012939b349e28e10bbcfcda6025e27c54b48464f68fbf32e94a5897a1d2f56b3a344478fc4008efcff8371eddc0538fe4e9c1262da75d07ea6784a080bb974f95531886ae3016779da21f6f8021f5646e757f479caf163250acb174ad4a5119a6c4989aab6d14d0839b1b23a19c2edf0002258007442f628e04afc910818751a0f21ae21367c3e2db84ef22736f26fc3a64e8cc665f32</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章正在施工中。。。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【搬运】深入Unity序列化</title>
      <link href="/2021/08/08/efa96dc239cd/"/>
      <url>/2021/08/08/efa96dc239cd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://zhuanlan.zhihu.com/p/76247383">https://zhuanlan.zhihu.com/p/76247383</a></p></blockquote><p>序列化和持久化是游戏开发入门后绕不开的点。本文以Unity引擎的游戏开发为例讲讲遇到的坑和经验。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>如果对序列化和持久化的概念有点混淆，这里列举了二者的差异：</p><blockquote><p>\1. 序列化将对象转化成某种格式（如二进制、json、xml、csv等），以供下一步处理。<br>\2. 持久化将内存数据以某种方式（如数据库）保存到外存（如硬盘），供以后使用。</p></blockquote><p>一言以蔽之：</p><blockquote><p>序列化技术侧重于解决对象的传输问题，持久化技术侧重于解决对象的存储问题。</p></blockquote><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><p>首先，Unity引擎对<code>UnityEngine.Object</code>有自己的序列化机制，但这部分功能并没有开放成API，而且存在一些无法序列化的类型，比如<strong>泛型、字典、高维数组、委托</strong>等（不被Unity序列化的情况具体见官网的这个说明: </p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/ScriptReference/SerializeField.html">Unity - Scripting API: SerializeField</a></p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/ScriptReference/SerializeField.html">docs.unity3d.com&#x2F;ScriptReference&#x2F;SerializeField.html</a></p><p>不能被引擎序列化最直观的表现是：这些类型的字段在 编辑器的 inspector 中无法显示出来。</p><blockquote><p>2019.6.20 更新： unity 2019.3已经可以支持对引用类型的序列化。因此可以在inspector中显示接口类型的成员了，只需加一个attribute：<code>[SerializeReference]</code>，原讨论帖见这里:</p></blockquote><p><a href="https://link.zhihu.com/?target=https://forum.unity.com/threads/serializereference-attribute.678868/">SerializeReference Attribute?</a></p><p><a href="https://link.zhihu.com/?target=https://forum.unity.com/threads/serializereference-attribute.678868/">forum.unity.com&#x2F;threads&#x2F;serializereference-attribute.678868&#x2F;</a></p><p>对不能被Unity序列化的类，我这里有一些<strong>简单的折中的解决方法</strong>弥补不足：</p><blockquote><p>\1. 对于高维数组，将其低维化。即底层采用一维数组来替代。</p><p>\2. 对于字典，key和value各自存储成List，运行时用字典，序列化时用数组。</p><p>\3. 对于泛型类，用一个新类将其封装并用 <code>[Serializable]</code> 修饰新类。</p><p>\4. 对于不带返回值的委托，可以用 <code>UnityEvent</code> 来序列化。注意使用<code>UnityEvent&lt;T&gt;</code>时，要参考3中的方法处理一下才行。带返回值的委托解决方法比较复杂，以后我再说。而<code>UnityEvent</code>序列化反序列化中<strong>如何保持对象的生命周期和引用关系</strong>也比较有东西可挖，这里有一个网友给出了他做的插件，我没用过</p></blockquote><p><a href="https://link.zhihu.com/?target=https://answers.unity.com/questions/661958/how-to-make-delegatesevents-survive-assembly-reloa.html">How to make Delegates&#x2F;Events survive assembly reload?</a></p><p><a href="https://link.zhihu.com/?target=https://answers.unity.com/questions/661958/how-to-make-delegatesevents-survive-assembly-reloa.html">answers.unity.com&#x2F;questions&#x2F;661958&#x2F;how-to-make-delegatesevents-survive-assembly-reloa.html</a></p><p>以上方法使用简单，通常也能满足日常需求。除此之外，还有一些Unity序列化失败不是因为类型本身，而是因为不支持的语法特性，比如<strong>空引用、多态</strong>。</p><p>先说说空引用。有两个<code>Serializable</code>的类：A、B。类A中有一个类B对象的空引用。<strong>当Unity在对A进行序列化时，会自动构造B类对象来填补这个空引用</strong>。这一步有个小坑就是当B类存在基类且基类有不止一个构造函数时，Unity往往不能正确的序列化B的初始值。不过这个问题通常没啥大副作用。但是，当类B就是类A时，另一个无法直视的问题发生了：<strong>无限循环</strong>。Unity引擎对其有深度限制不会真的无限循环下去，但在达到这个深度前会<strong>造成严重卡顿并浪费空间</strong>。</p><p>再说说多态，在一个<code>List&lt;BaseClass&gt;</code>中，列表项实际指向的对象<code>BaseClass</code>的派生类，但Unity序列化时，是不会识别出来的，只会序列化基类的信息。</p><p>对于以上这些以及更加变态的情况，Unity干脆提供了一个接口随便你捣鼓：<code>ISerializationCallbackReceiver</code>。</p><p>通过实现该接口的两个方法<code>OnBeforeSerialize</code> 和 <code>OnAfterDeserialize</code>，使得原本不能被引擎正确序列化的类可以按照程序员的要求被加工成引擎能够序列化的类型。Unity官方的这个例子实现了对Dictionary的加工使其能够序列化。</p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/ScriptReference/ISerializationCallbackReceiver.html">ISerializationCallbackReceiver</a></p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/ScriptReference/ISerializationCallbackReceiver.html">docs.unity3d.com&#x2F;ScriptReference&#x2F;ISerializationCallbackReceiver.html</a></p><p>其实c#也有类似的接口，如果不想走.Net提供的序列化方法，可以通过实现 <code>ISerializable</code>自定义序列化和反序列化过程，参考微软的文档：</p><p><a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=netframework-4.7.2">ISerializable Interface (System.Runtime.Serialization)</a></p><p><a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=netframework-4.7.2">docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.runtime.serialization.iserializable?view&#x3D;netframework-4.7.2</a></p><p>如果不想在Unity内置的序列化机制上缝缝补补，又如果想在序列化后发送到网络或保存到文件，那么常见的解决方案是：json、xml、yaml和二进制。这里重点说说json和二进制这两种代表性方案，点一下yaml方案。</p><h2 id="json方案"><a href="#json方案" class="headerlink" title="json方案"></a>json方案</h2><p>Unity 5.3后自带了json工具：<code>JsonUtility</code>。另外常用的c#的第三方库是<code>Json.Net</code> 和<code>LitJson</code>，这些都比.Net自带的<code>DataContractJsonSerializer</code>要快很多，尤其是<code>JsonUtility</code>，很快而且GC很少（传说用了simd？）。</p><p>除了速度，不同的库对序列化的支持程度也不尽相同。</p><p><code>JsonUtility</code>的能力和限制参考官网。<strong>其对引擎内建类型支持(比如<code>Vecotr3</code>)较好，这是其他json不能直接做到的</strong>。然而，其底层走的还是引擎自己的序列化，而我们这里讨论的主要是对普通c#类对象的序列化反序列化能力，所以这一点上有点掉分。</p><p>对于多态的支持，官网给出了一种解决方法：两次解码。第一次可以解出基类中的公有字段<code>JsonUtility.FromJson&lt;BASE_CLASS&gt;</code>，利用这个字段包含的子类信息进行重新进行解码： <code>JsonUtility.FromJson&lt;SUB_CLASS&gt;</code>。怎么说呢，用是能用，但让人感觉做东西做了一半（Unity貌似经常这样，毕竟发展太快）。</p><p><code>Json.Net</code>是支持多态的，参考这里</p><p><a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/6348215/how-to-deserialize-json-into-ienumerablebasetype-with-newtonsoft-json-net">how to deserialize JSON into IEnumerable with Newtonsoft JSON.NET</a></p><p><a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/6348215/how-to-deserialize-json-into-ienumerablebasetype-with-newtonsoft-json-net">stackoverflow.com&#x2F;questions&#x2F;6348215&#x2F;how-to-deserialize-json-into-ienumerablebasetype-with-newtonsoft-json-net</a></p><h2 id="YAML方案"><a href="#YAML方案" class="headerlink" title="YAML方案"></a>YAML方案</h2><p>YAML的全称是<code>YAML Ain&#39;t Markup Language</code>，是一种对人很友好的数据序列化语言。YAML是json的超集，也就是说YAML解析器可以解析json。</p><p>下面我来吹一波YAML。</p><p>json和xml对格式要求非常严格，对任何一个括号和逗号的改动都不行。而YAML的可读性不输xml，大于等于json，编辑性却更方便和健壮。而且<strong>支持注释、支持自引用，支持复杂数据类型</strong>。不过YAML在跨平台的支持上不如json，这就是历史因素了。</p><p>Unity采用YAML来描述结构，例如序列化复杂的场景：</p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/Manual/YAMLSceneExample.html">An Example of a YAML Scene File</a></p><p><a href="https://link.zhihu.com/?target=https://docs.unity3d.com/Manual/YAMLSceneExample.html">docs.unity3d.com&#x2F;Manual&#x2F;YAMLSceneExample.html</a></p><p>然而依然没有公开这种序列化方法的API。如果想使用YAML作为序列化的格式，可以从Unity商店下载插件 <code>YamlDotNet</code>，支持移动平台和PC平台。使用上还是很方便的，特别的是，其只会序列化具有get和set的property类型。具体本文就不再介绍了。</p><h2 id="二进制方案"><a href="#二进制方案" class="headerlink" title="二进制方案"></a>二进制方案</h2><p>一般来说，二进制方案啥都好，除了兼容性的让人不放心。</p><p>然而，经测试，<code>BinaryFormatter</code>对于字段的增删改几种情况下都不会报错，而是尽可能的将二进制数据解析到对应的字段上。猜想是因为c#这里序列化的数据包含了meta信息，理论上完全可以根据比对这些信息来处理字段变化造成的异常，而不是直接crash?同理，如果想让json的自动解析达到同样的效果，那么json序列化时就得包含类似的meta信息。</p><p><code>BinaryFormatter</code>使用上参考</p><p><a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/72hyey7b(v=vs.71)">Binary Serialization</a></p><p><a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/72hyey7b(v=vs.71)">docs.microsoft.com&#x2F;en-us&#x2F;previous-versions&#x2F;dotnet&#x2F;netframework-1.1&#x2F;72hyey7b(v&#x3D;vs.71)</a></p><p>本篇内容写到这里基本结束了，不过既然开头提到了持久化，这里稍微多说两句。</p><p>Unity初学者都经历过利用 <code>DontDestroyOnLoad</code>来修饰游戏对象来实现游戏运行中跨场景的数据“持久化”吧，也一定都用过 <code>PlayerPrefs</code>保存<code>key-value</code>数据到本地，以供下次启动时读取。对于<code>ScriptableObject</code>这种方法，特别指出，继承<code>ScriptableObject</code>的类对象确实可以被Unity序列化后持久化成文件，不需要走<code>Monobehaviour</code>存储数据那样要依附在一个<code>GameObject</code>身上再做成<code>Prefab</code>这个弯路，并且其能够保持资源索引关系。但是，这仅限于在编辑时。打包成app在客户端运行时，<code>scriptableObject</code>对象是只读的，不可写。所以非得将其持久化的话，只能将<code>scriptableObject</code>先序列化成json或二进制，然后存储为文件。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Unity在Inspector面板上查看修改所引用的ScriptableObject数据</title>
      <link href="/2021/08/08/e802ceb48b43/"/>
      <url>/2021/08/08/e802ceb48b43/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要参考：<a href="https://forum.unity.com/threads/editor-tool-better-scriptableobject-inspector-editing.484393/">https://forum.unity.com/threads/editor-tool-better-scriptableobject-inspector-editing.484393/</a></p></blockquote><p>脚本如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Developed by Tom Kail at Inkle (https://gist.github.com/tomkail/ba4136e6aa990f4dc94e0d39ec6a058c)</span></span><br><span class="line"><span class="comment">// Released under the MIT Licence as held at https://opensource.org/licenses/MIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Must be placed within a folder named &quot;Editor&quot;</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Extends how ScriptableObject object references are displayed in the inspector</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Shows you all values under the object reference</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Also provides a button to create a new ScriptableObject if property is null.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ExtendedScriptableObjectDrawer</span> : <span class="title">PropertyDrawer</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetPropertyHeight</span>(<span class="params">SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> totalHeight = EditorGUIUtility.singleLineHeight;</span><br><span class="line">        <span class="keyword">if</span> (property.objectReferenceValue == <span class="literal">null</span> || !AreAnySubPropertiesVisible(property))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> totalHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (property.isExpanded)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> data = property.objectReferenceValue <span class="keyword">as</span> ScriptableObject;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="literal">null</span>) <span class="keyword">return</span> EditorGUIUtility.singleLineHeight;</span><br><span class="line">            SerializedObject serializedObject = <span class="keyword">new</span> SerializedObject(data);</span><br><span class="line">            SerializedProperty prop = serializedObject.GetIterator();</span><br><span class="line">            <span class="keyword">if</span> (prop.NextVisible(<span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (prop.name == <span class="string">&quot;m_Script&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">var</span> subProp = serializedObject.FindProperty(prop.name);</span><br><span class="line">                    <span class="built_in">float</span> height = EditorGUI.GetPropertyHeight(subProp, <span class="literal">null</span>, <span class="literal">true</span>) + EditorGUIUtility.standardVerticalSpacing;</span><br><span class="line">                    totalHeight += height;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (prop.NextVisible(<span class="literal">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Add a tiny bit of height if open for the background</span></span><br><span class="line">            totalHeight += EditorGUIUtility.standardVerticalSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> buttonWidth = <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">string</span>&gt; ignoreClassFullNames = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;TMPro.TMP_FontAsset&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect position, SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        EditorGUI.BeginProperty(position, label, property);</span><br><span class="line">        <span class="keyword">var</span> type = GetFieldType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span> || ignoreClassFullNames.Contains(type.FullName))</span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUI.PropertyField(position, property, label);</span><br><span class="line">            EditorGUI.EndProperty();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ScriptableObject propertySO = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!property.hasMultipleDifferentValues &amp;&amp; property.serializedObject.targetObject != <span class="literal">null</span> &amp;&amp; property.serializedObject.targetObject <span class="keyword">is</span> ScriptableObject)</span><br><span class="line">        &#123;</span><br><span class="line">            propertySO = (ScriptableObject)property.serializedObject.targetObject;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> propertyRect = Rect.zero;</span><br><span class="line">        <span class="keyword">var</span> guiContent = <span class="keyword">new</span> GUIContent(property.displayName);</span><br><span class="line">        <span class="keyword">var</span> foldoutRect = <span class="keyword">new</span> Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        <span class="keyword">if</span> (property.objectReferenceValue != <span class="literal">null</span> &amp;&amp; AreAnySubPropertiesVisible(property))</span><br><span class="line">        &#123;</span><br><span class="line">            property.isExpanded = EditorGUI.Foldout(foldoutRect, property.isExpanded, guiContent, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// So yeah having a foldout look like a label is a weird hack </span></span><br><span class="line">            <span class="comment">// but both code paths seem to need to be a foldout or </span></span><br><span class="line">            <span class="comment">// the object field control goes weird when the codepath changes.</span></span><br><span class="line">            <span class="comment">// I guess because foldout is an interactable control of its own and throws off the controlID?</span></span><br><span class="line">            foldoutRect.x += <span class="number">12</span>;</span><br><span class="line">            EditorGUI.Foldout(foldoutRect, property.isExpanded, guiContent, <span class="literal">true</span>, EditorStyles.label);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> indentedPosition = EditorGUI.IndentedRect(position);</span><br><span class="line">        <span class="keyword">var</span> indentOffset = indentedPosition.x - position.x;</span><br><span class="line">        propertyRect = <span class="keyword">new</span> Rect(position.x + (EditorGUIUtility.labelWidth - indentOffset), position.y, position.width - (EditorGUIUtility.labelWidth - indentOffset), EditorGUIUtility.singleLineHeight);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (propertySO != <span class="literal">null</span> || property.objectReferenceValue == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            propertyRect.width -= buttonWidth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUI.ObjectField(propertyRect, property, type, GUIContent.none);</span><br><span class="line">        <span class="keyword">if</span> (GUI.changed) property.serializedObject.ApplyModifiedProperties();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> buttonRect = <span class="keyword">new</span> Rect(position.x + position.width - buttonWidth, position.y, buttonWidth, EditorGUIUtility.singleLineHeight);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (property.propertyType == SerializedPropertyType.ObjectReference &amp;&amp; property.objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> data = (ScriptableObject)property.objectReferenceValue;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (property.isExpanded)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Draw a background that shows us clearly which fields are part of the ScriptableObject</span></span><br><span class="line">                GUI.Box(<span class="keyword">new</span> Rect(<span class="number">0</span>, position.y + EditorGUIUtility.singleLineHeight + EditorGUIUtility.standardVerticalSpacing - <span class="number">1</span>, Screen.width, position.height - EditorGUIUtility.singleLineHeight - EditorGUIUtility.standardVerticalSpacing), <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                EditorGUI.indentLevel++;</span><br><span class="line">                SerializedObject serializedObject = <span class="keyword">new</span> SerializedObject(data);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Iterate over all the values and draw them</span></span><br><span class="line">                SerializedProperty prop = serializedObject.GetIterator();</span><br><span class="line">                <span class="built_in">float</span> y = position.y + EditorGUIUtility.singleLineHeight + EditorGUIUtility.standardVerticalSpacing;</span><br><span class="line">                <span class="keyword">if</span> (prop.NextVisible(<span class="literal">true</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">do</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// Don&#x27;t bother drawing the class file</span></span><br><span class="line">                        <span class="keyword">if</span> (prop.name == <span class="string">&quot;m_Script&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="built_in">float</span> height = EditorGUI.GetPropertyHeight(prop, <span class="keyword">new</span> GUIContent(prop.displayName), <span class="literal">true</span>);</span><br><span class="line">                        EditorGUI.PropertyField(<span class="keyword">new</span> Rect(position.x, y, position.width - buttonWidth, height), prop, <span class="literal">true</span>);</span><br><span class="line">                        y += height + EditorGUIUtility.standardVerticalSpacing;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (prop.NextVisible(<span class="literal">false</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (GUI.changed)</span><br><span class="line">                    serializedObject.ApplyModifiedProperties();</span><br><span class="line"></span><br><span class="line">                EditorGUI.indentLevel--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GUI.Button(buttonRect, <span class="string">&quot;Create&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> selectedAssetPath = <span class="string">&quot;Assets&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (property.serializedObject.targetObject <span class="keyword">is</span> MonoBehaviour)</span><br><span class="line">                &#123;</span><br><span class="line">                    MonoScript ms = MonoScript.FromMonoBehaviour((MonoBehaviour)property.serializedObject.targetObject);</span><br><span class="line">                    selectedAssetPath = System.IO.Path.GetDirectoryName(AssetDatabase.GetAssetPath(ms));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                property.objectReferenceValue = CreateAssetWithSavePrompt(type, selectedAssetPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        property.serializedObject.ApplyModifiedProperties();</span><br><span class="line">        EditorGUI.EndProperty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T _GUILayout&lt;T&gt;(<span class="built_in">string</span> label, T objectReferenceValue, <span class="keyword">ref</span> <span class="built_in">bool</span> isExpanded) <span class="keyword">where</span> T : ScriptableObject</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _GUILayout&lt;T&gt;(<span class="keyword">new</span> GUIContent(label), objectReferenceValue, <span class="keyword">ref</span> isExpanded);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T _GUILayout&lt;T&gt;(GUIContent label, T objectReferenceValue, <span class="keyword">ref</span> <span class="built_in">bool</span> isExpanded) <span class="keyword">where</span> T : ScriptableObject</span><br><span class="line">    &#123;</span><br><span class="line">        Rect position = EditorGUILayout.BeginVertical();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> propertyRect = Rect.zero;</span><br><span class="line">        <span class="keyword">var</span> guiContent = label;</span><br><span class="line">        <span class="keyword">var</span> foldoutRect = <span class="keyword">new</span> Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        <span class="keyword">if</span> (objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            isExpanded = EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> indentedPosition = EditorGUI.IndentedRect(position);</span><br><span class="line">            <span class="keyword">var</span> indentOffset = indentedPosition.x - position.x;</span><br><span class="line">            propertyRect = <span class="keyword">new</span> Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// So yeah having a foldout look like a label is a weird hack </span></span><br><span class="line">            <span class="comment">// but both code paths seem to need to be a foldout or </span></span><br><span class="line">            <span class="comment">// the object field control goes weird when the codepath changes.</span></span><br><span class="line">            <span class="comment">// I guess because foldout is an interactable control of its own and throws off the controlID?</span></span><br><span class="line">            foldoutRect.x += <span class="number">12</span>;</span><br><span class="line">            EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, <span class="literal">true</span>, EditorStyles.label);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> indentedPosition = EditorGUI.IndentedRect(position);</span><br><span class="line">            <span class="keyword">var</span> indentOffset = indentedPosition.x - position.x;</span><br><span class="line">            propertyRect = <span class="keyword">new</span> Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset - <span class="number">60</span>, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.BeginHorizontal();</span><br><span class="line">        objectReferenceValue = EditorGUILayout.ObjectField(<span class="keyword">new</span> GUIContent(<span class="string">&quot; &quot;</span>), objectReferenceValue, <span class="keyword">typeof</span>(T), <span class="literal">false</span>) <span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            EditorGUILayout.EndHorizontal();</span><br><span class="line">            <span class="keyword">if</span> (isExpanded)</span><br><span class="line">            &#123;</span><br><span class="line">                DrawScriptableObjectChildFields(objectReferenceValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Create&quot;</span>, GUILayout.Width(buttonWidth)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> selectedAssetPath = <span class="string">&quot;Assets&quot;</span>;</span><br><span class="line">                <span class="keyword">var</span> newAsset = CreateAssetWithSavePrompt(<span class="keyword">typeof</span>(T), selectedAssetPath);</span><br><span class="line">                <span class="keyword">if</span> (newAsset != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    objectReferenceValue = (T)newAsset;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            EditorGUILayout.EndHorizontal();</span><br><span class="line">        &#125;</span><br><span class="line">        EditorGUILayout.EndVertical();</span><br><span class="line">        <span class="keyword">return</span> objectReferenceValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawScriptableObjectChildFields</span>&lt;<span class="title">T</span>&gt;(<span class="params">T objectReferenceValue</span>) <span class="keyword">where</span> T : ScriptableObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Draw a background that shows us clearly which fields are part of the ScriptableObject</span></span><br><span class="line">        EditorGUI.indentLevel++;</span><br><span class="line">        EditorGUILayout.BeginVertical(GUI.skin.box);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> serializedObject = <span class="keyword">new</span> SerializedObject(objectReferenceValue);</span><br><span class="line">        <span class="comment">// Iterate over all the values and draw them</span></span><br><span class="line">        SerializedProperty prop = serializedObject.GetIterator();</span><br><span class="line">        <span class="keyword">if</span> (prop.NextVisible(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Don&#x27;t bother drawing the class file</span></span><br><span class="line">                <span class="keyword">if</span> (prop.name == <span class="string">&quot;m_Script&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                EditorGUILayout.PropertyField(prop, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (prop.NextVisible(<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (GUI.changed)</span><br><span class="line">            serializedObject.ApplyModifiedProperties();</span><br><span class="line">        EditorGUILayout.EndVertical();</span><br><span class="line">        EditorGUI.indentLevel--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DrawScriptableObjectField</span>&lt;<span class="title">T</span>&gt;(<span class="params">GUIContent label, T objectReferenceValue, <span class="keyword">ref</span> <span class="built_in">bool</span> isExpanded</span>) <span class="keyword">where</span> T : ScriptableObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        Rect position = EditorGUILayout.BeginVertical();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> propertyRect = Rect.zero;</span><br><span class="line">        <span class="keyword">var</span> guiContent = label;</span><br><span class="line">        <span class="keyword">var</span> foldoutRect = <span class="keyword">new</span> Rect(position.x, position.y, EditorGUIUtility.labelWidth, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        <span class="keyword">if</span> (objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            isExpanded = EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> indentedPosition = EditorGUI.IndentedRect(position);</span><br><span class="line">            <span class="keyword">var</span> indentOffset = indentedPosition.x - position.x;</span><br><span class="line">            propertyRect = <span class="keyword">new</span> Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// So yeah having a foldout look like a label is a weird hack </span></span><br><span class="line">            <span class="comment">// but both code paths seem to need to be a foldout or </span></span><br><span class="line">            <span class="comment">// the object field control goes weird when the codepath changes.</span></span><br><span class="line">            <span class="comment">// I guess because foldout is an interactable control of its own and throws off the controlID?</span></span><br><span class="line">            foldoutRect.x += <span class="number">12</span>;</span><br><span class="line">            EditorGUI.Foldout(foldoutRect, isExpanded, guiContent, <span class="literal">true</span>, EditorStyles.label);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> indentedPosition = EditorGUI.IndentedRect(position);</span><br><span class="line">            <span class="keyword">var</span> indentOffset = indentedPosition.x - position.x;</span><br><span class="line">            propertyRect = <span class="keyword">new</span> Rect(position.x + EditorGUIUtility.labelWidth - indentOffset, position.y, position.width - EditorGUIUtility.labelWidth - indentOffset - <span class="number">60</span>, EditorGUIUtility.singleLineHeight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.BeginHorizontal();</span><br><span class="line">        objectReferenceValue = EditorGUILayout.ObjectField(<span class="keyword">new</span> GUIContent(<span class="string">&quot; &quot;</span>), objectReferenceValue, <span class="keyword">typeof</span>(T), <span class="literal">false</span>) <span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUILayout.EndHorizontal();</span><br><span class="line">            <span class="keyword">if</span> (isExpanded)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Create&quot;</span>, GUILayout.Width(buttonWidth)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> selectedAssetPath = <span class="string">&quot;Assets&quot;</span>;</span><br><span class="line">                <span class="keyword">var</span> newAsset = CreateAssetWithSavePrompt(<span class="keyword">typeof</span>(T), selectedAssetPath);</span><br><span class="line">                <span class="keyword">if</span> (newAsset != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    objectReferenceValue = (T)newAsset;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            EditorGUILayout.EndHorizontal();</span><br><span class="line">        &#125;</span><br><span class="line">        EditorGUILayout.EndVertical();</span><br><span class="line">        <span class="keyword">return</span> objectReferenceValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates a new ScriptableObject via the default Save File panel</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ScriptableObject <span class="title">CreateAssetWithSavePrompt</span>(<span class="params">Type type, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        path = EditorUtility.SaveFilePanelInProject(<span class="string">&quot;Save ScriptableObject&quot;</span>, type.Name + <span class="string">&quot;.asset&quot;</span>, <span class="string">&quot;asset&quot;</span>, <span class="string">&quot;Enter a file name for the ScriptableObject.&quot;</span>, path);</span><br><span class="line">        <span class="keyword">if</span> (path == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        ScriptableObject asset = ScriptableObject.CreateInstance(type);</span><br><span class="line">        AssetDatabase.CreateAsset(asset, path);</span><br><span class="line">        AssetDatabase.SaveAssets();</span><br><span class="line">        AssetDatabase.Refresh();</span><br><span class="line">        AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);</span><br><span class="line">        EditorGUIUtility.PingObject(asset);</span><br><span class="line">        <span class="keyword">return</span> asset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Type <span class="title">GetFieldType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Type type = fieldInfo.FieldType;</span><br><span class="line">        <span class="keyword">if</span> (type.IsArray) type = type.GetElementType();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.IsGenericType &amp;&amp; type.GetGenericTypeDefinition() == <span class="keyword">typeof</span>(List&lt;&gt;)) type = type.GetGenericArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">AreAnySubPropertiesVisible</span>(<span class="params">SerializedProperty property</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = (ScriptableObject)property.objectReferenceValue;</span><br><span class="line">        SerializedObject serializedObject = <span class="keyword">new</span> SerializedObject(data);</span><br><span class="line">        SerializedProperty prop = serializedObject.GetIterator();</span><br><span class="line">        <span class="keyword">while</span> (prop.NextVisible(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (prop.name == <span class="string">&quot;m_Script&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//if theres any visible property other than m_script</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Animator重置动画第一帧的奇思妙想——Play(NewState)</title>
      <link href="/2021/08/08/eaf86e0563ca/"/>
      <url>/2021/08/08/eaf86e0563ca/</url>
      
        <content type="html"><![CDATA[<p>我们很经常会碰到一些需求，要我们把动画重置为第一帧做起始状态，之后再在互动的时候开始播放。</p><p>这里有一个简单的小花招，那就是在Animator里面，复制一份当前的状态，然后将Speed改为0。</p><p><img src="/Animator%E9%87%8D%E7%BD%AE%E5%8A%A8%E7%94%BB%E7%AC%AC%E4%B8%80%E5%B8%A7%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E2%80%94%E2%80%94Play(NewState)/1-1.png" alt="1-1"></p><p><img src="/Animator%E9%87%8D%E7%BD%AE%E5%8A%A8%E7%94%BB%E7%AC%AC%E4%B8%80%E5%B8%A7%E7%9A%84%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%E2%80%94%E2%80%94Play(NewState)/1-2.png" alt="1-2"></p><p>这样子当我们需要切换到动画第一帧的时候，只需要：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ani.Play(<span class="string">&quot;DefaultFirstFrame&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Animator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Animator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timeline创建Override Track覆盖当前轨道——ILayerable接口</title>
      <link href="/2021/08/08/bd7079aead2d/"/>
      <url>/2021/08/08/bd7079aead2d/</url>
      
        <content type="html"><![CDATA[<p>偶尔我们会有一些需求，在当前轨道的基础上，创建一个覆盖轨道，将当前轨道的动画覆盖掉，这里可以使用unity2019新增的一个接口，<strong>ILayerable接口</strong>。</p><p>话不多说，上代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PosXInfoTrack</span> : <span class="title">TrackAsset</span>, <span class="title">ILayerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Playable <span class="title">CreateTrackMixer</span>(<span class="params">PlayableGraph graph, GameObject go, <span class="built_in">int</span> inputCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ScriptPlayable&lt;PosXInfoMixerBehaviour&gt;.Create (graph, inputCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//CreateLayerMixer，继承了ILayerable后必须实现的一个方法，这里直接返回Playable.Null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Playable <span class="title">CreateLayerMixer</span>(<span class="params">PlayableGraph graph, GameObject go, <span class="built_in">int</span> inputCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Playable.Null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时查看UnityTimeline窗口当前轨道的位置，右击打开菜单栏，可以看到多出了一个叫做<font color = red><strong>Add Layer</strong></font>的选项，点击它，即可创建出一条覆盖轨道，覆盖轨道同样可以添加Clip并生效。</p><img src="/2021/08/08/bd7079aead2d/2-1.png" class="" title="2-1">]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timeline数据变化预览模式——IPropertyPreview接口</title>
      <link href="/2021/08/07/0f93e05f3880/"/>
      <url>/2021/08/07/0f93e05f3880/</url>
      
        <content type="html"><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>在进行Timeline工具开发的时候，经常会碰到一些情况，就是在编辑器下播放查看效果，然而值变化之后，就不再变回来了。</p><p>这是因为Timeline在播放的时候，都会去调用我们<code>MixerBehaviour</code>脚本里头的<code>ProcessFrame</code>方法，并且还是不可逆的。</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>我们平常用Animation的时候，可以看到，在我们修改的值面板上，会变成蓝色外框，如下图所示：</p><img src="/2021/08/07/0f93e05f3880/1-1.png" class="" title="1-1"><p>这种模式，被Unity称为<strong>Preview模式</strong>，即<font color = red><strong>预览模式</strong></font>，Timeline作为时间轴工具，自然也有类似的功能，那就是<strong>IPropertyPreview接口</strong>。</p><p>下面简单介绍2种实现<font color = red><strong>预览模式</strong></font>的方式：</p><p>①、在我们的<strong>PlayableAsset类</strong>上面实现<strong>IPropertyPreview接口</strong>，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PosXInfoClip</span> : <span class="title">PlayableAsset</span>, <span class="title">ITimelineClipAsset</span>, <span class="title">IPropertyPreview</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PosXInfoBehaviour template;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClipCaps clipCaps</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> ClipCaps.Blending; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Playable <span class="title">CreatePlayable</span> (<span class="params">PlayableGraph graph, GameObject owner</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ScriptPlayable&lt;PosXInfoBehaviour&gt;.Create (graph, template);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GatherProperties</span>(<span class="params">PlayableDirector director, IPropertyCollector driver</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> kLocalPosition = <span class="string">&quot;m_LocalPosition&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> kLocalRotation = <span class="string">&quot;m_LocalRotation&quot;</span>;</span><br><span class="line"></span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalPosition + <span class="string">&quot;.x&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalPosition + <span class="string">&quot;.y&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalPosition + <span class="string">&quot;.z&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalRotation + <span class="string">&quot;.x&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalRotation + <span class="string">&quot;.y&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalRotation + <span class="string">&quot;.z&quot;</span>);</span><br><span class="line">        driver.AddFromName&lt;Transform&gt;(kLocalRotation + <span class="string">&quot;.w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>driver.AddFromName&lt;T&gt;</code>方法，将我们当前所会修改的序列化数值的<font color = red><strong>Property Path</strong></font>添加进去，这个序列化数据就会作为预览模式的数据使用。最后结果如下图所示：</p><img src="/2021/08/07/0f93e05f3880/1-2.png" class="" title="1-2"><p>②、我们所实现的轨道类，<strong>TrackAsset类</strong>自带<strong>IPropertyPreview接口</strong>，我们只需要重载其方法即可，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TrackColor(0.855f, 0.8623f, 0.87f)</span>]</span><br><span class="line">[<span class="meta">TrackClipType(typeof(PosXInfoClip))</span>]</span><br><span class="line">[<span class="meta">TrackBindingType(typeof(Transform))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PosXInfoTrack</span> : <span class="title">TrackAsset</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Playable <span class="title">CreateTrackMixer</span>(<span class="params">PlayableGraph graph, GameObject go, <span class="built_in">int</span> inputCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ScriptPlayable&lt;PosXInfoMixerBehaviour&gt;.Create (graph, inputCount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GatherProperties</span>(<span class="params">PlayableDirector director, IPropertyCollector driver</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">var</span> component = director.GetGenericBinding(<span class="keyword">this</span>) <span class="keyword">as</span> Transform;</span><br><span class="line">        <span class="keyword">if</span> (component == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> so = <span class="keyword">new</span> SerializedObject(component);</span><br><span class="line">        <span class="keyword">var</span> iterator = so.GetIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.NextVisible(<span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iterator.hasVisibleChildren)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            driver.AddFromName&lt;Transform&gt;(component.gameObject, iterator.propertyPath);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">base</span>.GatherProperties(director, driver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后实现的效果基本同上相同。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 PlayableAsset 获取自定义轨道绑定对象的引用</title>
      <link href="/2021/07/24/42c10f92cea4/"/>
      <url>/2021/07/24/42c10f92cea4/</url>
      
        <content type="html"><![CDATA[<p>首先创建我们的<code>PlayableAsset</code>类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XXXClip</span> : <span class="title">PlayableAsset</span>, <span class="title">ITimelineClipAsset</span>, <span class="title">IPropertyPreview</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> XXX parentTrack;</span><br><span class="line">    publix XXX binding;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们需要在<code>TrackAsset</code>类里重写<code>CreateTrackMixer()</code>方法(在编译graph的时候调用) 以设置属性&#x2F;字段来存储轨道（用于查找绑定）或实际绑定本身</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Playable <span class="title">CreateTrackMixer</span>(<span class="params">PlayableGraph graph, GameObject go, <span class="built_in">int</span> inputCount</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> c <span class="keyword">in</span> <span class="title">GetClips</span>())</span></span><br><span class="line">    &#123;</span><br><span class="line">        (c.asset <span class="keyword">as</span> FacialExpressionClip).parentTrack = <span class="keyword">this</span>; <span class="comment">// this field would be serializable in assets</span></span><br><span class="line">        (c.asset <span class="keyword">as</span> FacialExpressionClip).binding = go.GetComponent&lt;PlayableDirector&gt;().GetGenericBinding(<span class="keyword">this</span>); <span class="comment">// not serializable in assets</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.CreateTrackMixer(graph, go, inputCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Playable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Playable </tag>
            
            <tag> Unity Timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CG或HLSL中的数据类型</title>
      <link href="/2021/07/14/05a85441cd04/"/>
      <url>/2021/07/14/05a85441cd04/</url>
      
        <content type="html"><![CDATA[<h1 id="CG或HLSL中的数据类型"><a href="#CG或HLSL中的数据类型" class="headerlink" title="CG或HLSL中的数据类型"></a>CG或HLSL中的数据类型</h1><blockquote><p>文章来源：<a href="https://zhuanlan.zhihu.com/p/48530294">零基础入门Unity Shader（六）</a></p></blockquote><p>在Shader中，我们在Properties中定义的变量是为了在材质面板中显示并方便我们调节，如果要在Cg&#x2F;HLSL中使用的话就必须要重新声明一次（要求命名一样）。</p><blockquote><p>To美术：声明的意思就是定义一个变量，告诉电脑我们会用这个变量去存储一些值，电脑就直接通过这个变量来获取相应的值就好了，而由于值是会变化的，所以被称为变量。</p></blockquote><p>首先，我们先看下在Cg&#x2F;HLSL中的几种常见数据类型：</p><ol><li>float&#x2F;half&#x2F;fixed（三个都是浮点数，只是精度不一样而已）</li><li>integer（整型）</li><li>sampler2D（2D纹理）</li><li>samplerCUBE（3D纹理）</li></ol><ul><li><strong>float</strong></li></ul><p>高精度类型，32位，通常用于世界坐标下的位置，纹理UV，或涉及复杂函数的标量计算，如三角函数、幂运算等。</p><ul><li><strong>half</strong></li></ul><p>中精度类型，16位，数值范围为[-60000,+60000]，通常用于本地坐标下的位置、方向向量、HDR颜色等。</p><ul><li><strong>fixed</strong></li></ul><p>低精度类型，11位，数值范围为[-2,+2],通常用于常规的颜色与贴图，以及低精度间的一些运算变量等。</p><blockquote><p>在PC平台不管你Shader中写的是half还是fixed，统统都会被当作float来处理。half与fixed仅在一些移动设备上有效。<br>比较常用的一个规则是，除了位置和坐标用float以外，其余的全部用half。主要原因也是因为大部分的现代GPU只支持32位与16位，也就是说只支持float和half，不支持fixed。</p></blockquote><ul><li><strong>interger</strong></li></ul><p>整型类型，通常用于循环与数组的索引。</p><blockquote><p>在 Direct3D 9 和 OpenGL ES 2.0平台上整型可能会被直接用浮点数来处理，在Direct3D 11、OpenGL ES 3等现代GPU上可以正确的以整型类型来处理。</p></blockquote><ul><li><strong>sampler2D、sampler3D与samplerCUBE</strong></li></ul><p>纹理，默认情况下在移动平台纹理会被自动转换成低精度的纹理类型，如果你需要中精度的或者高精度的需要用以下方式来声明：</p><p>sampler2D_half(中精度2D纹理)</p><p>sampler2D*_*float(高精度2D纹理)</p><p>sampler3D_half(中精度3D纹理)</p><p>sampler3D*_*float(高精度3D纹理)</p><p>samplerCUBE_halft(中精度立方体纹理)</p><p>samplerCUBE_float(高精度立方体纹理)</p><p><strong>类型对应</strong></p><p>好了，现在我们已经了解了Cg&#x2F;HLSL中的数据类型，那么Properties中的与Cg&#x2F;HLSL中的是如何对应的呢？</p><ul><li>Int&#x2F;float&#x2F;Range用浮点值表示，也就是float、half或者fixed，根据自己需要的精度来定义。</li><li>Vector&#x2F;Color用float4､half4或者fixed4表示。</li><li>2D类型用sampler2D表示。</li><li>3D类型sampler3D表示。</li><li>CUBE类型用samplerCUBE表示。</li></ul><p>单个浮点数值比较好理解，像Vector与Color的float4要如何理解呢？</p><p>其实不管是Vector还是Color，都是由四个同样精度的浮点数值组成的，所以我们在定义的时候才会写成float4､half4或者fixed4.</p><p>比如，我们在Properties中声明了如下的颜色：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Color(&quot;Color&quot;, Color) = (1,1,1,1)</span><br></pre></td></tr></table></figure><p>在Cg&#x2F;HLSL中我们需要同样再声明一次：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed4 _Color;</span><br></pre></td></tr></table></figure><p>颜色的四个分量：</p><ul><li>Red（红）</li><li>Green（绿）</li><li>Blue（蓝）</li><li>Alpha（透明）</li></ul><p>在Cg&#x2F;HLSL中我们可以通过_Color来访问颜色，也可以通过_Color.rgba来访问，这里的.rgba就是表示颜色的四个分量，如果只想获得颜色的红通道就是_Color.r<em>，</em>又如果只想获取绿通道和透明通道就是_Color.ga，以此类推~</p><blockquote><p>表示分量除了可以用.rgba，我们还可以使用.xyzw，它们的意义是一样的，你可以使用Vector.rgba，也可以使用Color.xyzw，这两者本身并没有什么区别，只是我们通常在颜色上用rgba,在向量上用xyzw,这样比较直观方便理解。</p></blockquote><p>再说下矩阵，在Shader中，矩阵是一个按照长方形阵列排列的浮点数集合。</p><blockquote><p>你可以想像成是一队站列整齐的士兵,横向有M人，竖向有N人。就可以用floatMxN来表示。如果是4x4矩阵，就是float4x4（同样支持其它精度），不过有一点要注意，在某些平台上是不支持非方矩阵的（比如float3x2），特别是OpenGL ES 2.0平台。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity Shader </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader模板</title>
      <link href="/2021/07/11/21ad3cf45f7f/"/>
      <url>/2021/07/11/21ad3cf45f7f/</url>
      
        <content type="html"><![CDATA[<p>打开Unity，然后在Project面板点击右键，依次从中选择Create&#x2F;Shader&#x2F;…</p><p>然后你会发现几个选项：</p><ul><li><strong>Standard Surface Shader</strong></li></ul><p>标准表面着色器，是一种基于物理的着色系统（使用了Physically Based  Rendering（简称PBR）技术，即基于物理的渲染技术），以模拟现实真实的方式来模拟材质与灯光之间的关系，可以很轻易的表现出各种金属反光效果，同时此种Shader的书写逻辑也更符合人类的思维模式。</p><ul><li><strong>Unlit Shader</strong></li></ul><p>Vertex&#x2F;Fragment Shader,也就是最基本的顶点片断着色器，不受光照影响的Shader，多用于特效、UI上的效果制作。</p><ul><li><strong>Image Effect Shader</strong></li></ul><p>也是顶点片断着色器，只不过是针对后处理而定制的模版，后处理是什么呢？Bloom（也有人叫Glow&#x2F;泛光&#x2F;辉光等说法）、调色、景深、模糊等，这些基于最终整个屏幕画面而进行再处理的Shader就是后处理。</p><ul><li><strong>Compute Shader</strong></li></ul><p>Compute Shader是运行在图形显卡上的一段程序，独立于常规渲染管线之外的，它可以直接将GPU作为并行处理器加以利用，从而使GPU不仅具有3D渲染能力，还具有其他的运算能力。</p><ul><li><strong>Shader Variant Collection</strong></li></ul><p>Shader变体收集器，在上面创建的时候，你会发现Shader Variant Collection与以上四个是被隔开的，就是因为这个与它们不一样，它不是制作Shader的模版,而只是对Shader变体进行打包用的容器。</p><blockquote><p>注：以上的Standard Surface Shader、Unlit Shader、Image Effect  Shader仅仅只是Unity为了方便我们书写而内置的几个模版，你完全可以建一个Unlit Shader，然后将其改成Surface  Shader,同样也可以将一个Standard Surface  Shader改成顶点片断着色器，所以这一点一定要明白，它们只是内容格式不一样的模版本而已，我们完全可以自由修改成任意我们想要的一种着色器类型，当然我们也可以通过一些手段来定制出我们自己的模版，这在后续章节中我们再进行详细介绍。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity Shader </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shader介绍</title>
      <link href="/2021/07/11/8673c9e6bb6a/"/>
      <url>/2021/07/11/8673c9e6bb6a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章来源：<a href="https://zhuanlan.zhihu.com/p/46745694">零基础入门Unity Shader（一）</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><code>Shader</code>，中文名为着色器，对很多开发者来说它是一个神秘的存在，想学但是又不知道如何去学，或者学了一段时间发现Get不到它的点，始终感觉游离在外，无法开窍。</p><h2 id="什么是Shader"><a href="#什么是Shader" class="headerlink" title="什么是Shader"></a><strong>什么是Shader</strong></h2><p>虽然上面有简单的说了下<code>Shader</code>就是着色器，但是还是有必要详细说明一下具体什么是<code>Shader</code>。</p><p><code>Shader</code>其实就是专门用来渲染图形的一种技术，通过<code>Shader</code>，我们可以自定义显卡渲染画面的算法，使画面达到我们想要的效果。小到每一个像素点，大到整个屏幕。</p><p><strong>Shader</strong>分为两类 ：</p><ol><li><strong>顶点Shader</strong>（3D图形都是由一个个三角面片组成的，顶点Shader就是计算每个三角面片上的顶点，并为最终像素渲染做准备）。</li><li><strong>像素Shader</strong>，顾名思义，就是以像素为单位，计算光照、颜色的一系列算法。 几个不同的图形API都有各自的Shader语言，在DirectX中，顶点shader叫做 Vertex Shader ，像素Shader叫做  Pixel Shader； 在OpenGL中，顶点Shader也叫做 Vertex Shader ，但像素Shader叫做 Fragment  Shader，也就是我们常说的<strong>片断Shader</strong>或者<strong>片元Shader</strong>。</li></ol><p>说白了，<font color = red><strong>Shader其实就是一段代码，这段代码的作用是告诉GPU具体怎样去绘制模型的每一个顶点的颜色以及最终每一个像素点的颜色</strong></font>。</p><h2 id="Shader编程语言"><a href="#Shader编程语言" class="headerlink" title="Shader编程语言"></a><strong>Shader编程语言</strong></h2><p>既然Shader是一段代码，那必然要用一种语言来书写它，目前主流的有三种语言：</p><ol><li><font color =red><strong>基于OpenGL的OpenGL Shading Language，简称GLSL。</strong></font></li><li><font color =red><strong>基于DirectX的High Level Shading Language,简称HLSL。</strong></font></li><li><font color =red><strong>还有NVIDIA公司的C for Graphic，简称Cg语言。</strong></font></li></ol><p>GLSL与HLSL分别是基于OpenGL和Direct3D的接口，两者不能混用。而Cg语言是用于图形的C语言，这其实说明了当时设计人员的一个初衷，就是<strong>让基于图形硬件的编程变得和C语言编程一样方便，自由</strong>。正如C++和  Java的语法是基于C的，Cg语言本身也是基于C语言的。如果您使用过C、C++、Java其中任意一个，那么Cg的语法也是比较容易掌握的。Cg语言极力保留了C语言的大部分语义，力图让开发人员从硬件细节中解脱出来，Cg同时拥有高级语言的好处，如代码的易重用性，可读性高等。</p><p>Cg语言是Microsoft和NVIDIA相互协作在标准硬件光照语言的语法和语义上达成了一致，所以，HLSL和Cg其实是同一种语言。</p><p>美术人员看到这里时也不用害怕，语法上并不难，而且在后续的章节中碰到相关的语法时我们会详细的进行说明。</p><h2 id="什么是Unity-Shader"><a href="#什么是Unity-Shader" class="headerlink" title="什么是Unity Shader"></a><strong>什么是Unity Shader</strong></h2><p>显卡有NVIDIA<em>、</em>ATI<em>、</em>Intel等等。。。</p><p>图形API有OpenGL、DirectX、OpenglES、Vulkan、Metal等等。。。</p><p>Shader编程语言有GLSL、HLSL、Cg等等。。。</p><p>是不是有点头晕，该怎么去选择呢？在Unity中我们又应该如何做呢？</p><p>其实在Unity中反而一切变的简单起来了，我们只需关心如何去这实现我们想要的效果就好了，其余的事情全部交给Unity来自动处理。因为我们在Unity中编写的Shader最终会根据不同的平台来编绎成不同的着色器语言，那么我们在Unity中应该用什么语言来书写Shader呢？</p><p>官方的建议是用<strong>Cg&#x2F;HLSL</strong>来编写，当然你也可以使用GLSL，主要是因为<font color =red><strong>Cg&#x2F;HLSL有更好的跨平台性</strong></font>，更倾向于使用Cg&#x2F;HLSL来编写Shader程序。</p><p>Unity Shader严格来说并不是传统上的Shader,而是Unity自身封装后的一种便于书写的Shader，又称为<strong>ShaderLab</strong>。</p><p>在Unity中有3种Shader（其实就是三种不同的写法）：</p><ul><li><strong>Surface Shaders 表面着色器</strong></li><li><strong>Vertex&#x2F;Fragment Shaders 顶点&#x2F;片断着色器</strong></li><li><strong>Fixed Function Shaders 固定管线着色器</strong></li></ul><p>其中Fixed Function Shaders已经被淘汰，完全没有学习的必要了。</p><p>Surface Shader其实就是Unity对Vertex&#x2F;Fragment Shader的又一层包装，以使Shader的制作方式更符合人类的思维模式，同时可以以极少的代码来完成不同的光照模型与不同平台下需要考虑的事情。</p><p>但是<strong>Surface Shader也有它的局限性</strong>，就是<strong>Vertex&#x2F;Fragment Shader能实现的效果，Surface  Shader不一定能实现</strong>，反过来则成立，Surface Shader能实现的Vertex&#x2F;Fragment Shader则一定可以实现。</p><p><font color =red><strong>并且在Unity2018后的版本中推出了Unity官方自己的可视化Shader工具（Shader Graph）。从生成的代码上来看，也全部是用的Vertex&#x2F;Fragment  Shader，那是不是可以理解为在今后的可编程渲染管线中，Unity自己也抛弃了Surface  Shader，而全部采用了Vertex&#x2F;Fragment Shader？</strong></font></p><p>总之，在今后的学习过程中，也会涉及一些Surface Shader的内容，但主要还是会以Vertex&#x2F;Fragment为主。</p><p>另外，<font color =red><strong>学会Shader也会给我们带来很多的好处</strong></font>：</p><ol><li><strong>游戏中模型显示粉色的情况你一定碰到过吧，是Shader丢失呢，还是Shader不符合当前平台呢，又或者是Shader上有语法的错误呢？如果我们有了解并学会Shader的话，这些问题就不会再是一脸懵逼啦。</strong></li><li><strong>內建Unity Shader仅仅只是“通用”用例，不足以满足我们所有的画面表现需求。</strong></li><li><strong>一旦掌握Shader，可以为游戏&#x2F;应用创造独一无二的视觉享受。根据实际需求，为游戏和应用实现特定功能的Shader。</strong></li><li><strong>能大大的帮助我们做渲染上的性能优化，因为通过Shader可以控制渲染什么以及如何渲染。</strong></li><li><strong>撰写Shader的能力对于游戏团队非常重要，掌握Shader技能的开发一直是炙手可热的职位。现在一个不争的事实就是，技术美术永远是各大厂商的稀缺资源。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity Shader </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MipMap说明</title>
      <link href="/2021/07/08/f601637d7958/"/>
      <url>/2021/07/08/f601637d7958/</url>
      
        <content type="html"><![CDATA[<h3 id="一、MipMap是什么，作用？"><a href="#一、MipMap是什么，作用？" class="headerlink" title="一、MipMap是什么，作用？"></a>一、MipMap是什么，作用？</h3><p>MipMapping：在三维计算机图形的贴图渲染中有常用的技术，为加快渲染进度和减少图像锯齿，贴图被处理成由一系列被预先计算和优化过的图片组成的文件，这样的贴图被称为MipMap。</p><h3 id="二、简单理解"><a href="#二、简单理解" class="headerlink" title="二、简单理解"></a>二、简单理解</h3><p>就是图片缩放算法 实时的效果差， 效果好的太费性能</p><p>用非实时的算法先算好组成一组纹理， 渲染的时候挑一个最接近的分辨率拿来用</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 渲染相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RenderTexture面板说明</title>
      <link href="/2021/07/08/9bcf6c92f743/"/>
      <url>/2021/07/08/9bcf6c92f743/</url>
      
        <content type="html"><![CDATA[<img src="/2021/07/08/9bcf6c92f743/1-2.png" class="" title="1-2"><p>渲染纹理检视面板 (Render Texture Inspector) 与大多数检视面板不同，但与纹理检视面板 (Texture Inspector) 非常相似。</p><h3 id="1-Dimension-渲染纹理的类型"><a href="#1-Dimension-渲染纹理的类型" class="headerlink" title="1.Dimension(渲染纹理的类型)"></a>1.Dimension(渲染纹理的类型)</h3><p>默认情况下，渲染纹理为“2D”类型， 但也可以通过在创建前更改尺寸来生成立方体贴图或 3D 渲染纹理。</p><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Cubemap.html">Cubemap</a> 渲染纹理最常用于动态立方体贴图反射，请参阅 <a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Camera.RenderToCubemap.html">Camera.RenderToCubemap</a>。 立方体贴图渲染纹理必须具有相同的 <a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RenderTexture-width.html">width</a> 和 <a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RenderTexture-height.html">height</a>，并且必须是两种大小的幂。</p><p>目前，3D（体积）渲染纹理只能在支持计算着色器的平台（如 <a href="https://docs.unity.cn/cn/2019.4/Manual/UsingDX11GL3Features.html">UsingDX11GL3Features</a>）上使用。您可以使用来自像素着色器或计算着色器的“随机访问写入”渲染到它们。使用 <a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RenderTexture-volumeDepth.html">volumeDepth</a> 设置 3D 深度，使用 <a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RenderTexture-enableRandomWrite.html">enableRandomWrite</a> 启用对其的随机写入。</p><h3 id="2-Size-渲染纹理的像素宽高"><a href="#2-Size-渲染纹理的像素宽高" class="headerlink" title="2.Size(渲染纹理的像素宽高)"></a>2.Size(渲染纹理的像素宽高)</h3><p>渲染纹理的大小（以像素为单位）。您只能输入 2 的幂值，例如 128 和 256。</p><h3 id="3-Anti-aliasing-渲染纹理的抗锯齿级别"><a href="#3-Anti-aliasing-渲染纹理的抗锯齿级别" class="headerlink" title="3.Anti-aliasing(渲染纹理的抗锯齿级别)"></a>3.Anti-aliasing(渲染纹理的抗锯齿级别)</h3><p>抗锯齿值指示每个像素的样本数。如果硬件或渲染 API 不支持，则使用小于指示数量的支持的最大样本数。</p><p>当 RenderTexture 使用抗锯齿时，任何渲染都将进入多重采样纹理， 当切换到另一个渲染目标时，这将“解析”到常规纹理。 对系统的其余部分而言，只有该“解析”后的表面可见。</p><p>可以选择 <strong>None</strong>, <strong>2 samples</strong>, <strong>4 samples</strong>, <strong>8 samples</strong>。如果选择 <strong>None</strong>，Unity 不会应用抗锯齿</p><h3 id="4-Enable-Compatible-Color-Format-兼容的颜色格式"><a href="#4-Enable-Compatible-Color-Format-兼容的颜色格式" class="headerlink" title="4.Enable Compatible Color Format(兼容的颜色格式)"></a>4.Enable Compatible Color Format(兼容的颜色格式)</h3><p>如果平台不支持定义的Color Format，则选中当前复选框可以让颜色格式更改为目标平台兼容和支持的格式</p><h3 id="5-Color-Format-渲染纹理的颜色格式"><a href="#5-Color-Format-渲染纹理的颜色格式" class="headerlink" title="5.Color Format(渲染纹理的颜色格式)"></a>5.Color Format(渲染纹理的颜色格式)</h3><p>主要查看 RGBA三个单词后面跟的数字</p><p>举例：</p><p>R8_UNORM：R通道8位，8位颜色</p><p>R8G8_UNORM：R通道8位，G通道8位，16位颜色</p><p>R8G8B8A8_SRPG：R通道8位，G通道8位，B通道8位，A通道8位，32位颜色</p><p>R16_UNORM：R通道16位，16位颜色</p><p>R32G32B32A32_UINT：R通道32位，G通道32位，B通道32位，A通道32位，128位颜色</p><p>B5G6R5_UNORM_PACK16：B通道5位，G通道6位，R通道5位，16位颜色</p><p>颜色位数越少，渲染纹理越小，看情况选择自己想要的颜色格式</p><h3 id="6-Depth-Buffer-渲染纹理的深度-x2F-模板缓冲区"><a href="#6-Depth-Buffer-渲染纹理的深度-x2F-模板缓冲区" class="headerlink" title="6.Depth Buffer(渲染纹理的深度&#x2F;模板缓冲区)"></a>6.Depth Buffer(渲染纹理的深度&#x2F;模板缓冲区)</h3><p>深度缓冲区，用于记录上面每个像素的深度值，通过深度缓冲区，我们可以进行深度测试，从而确定像素的遮挡关系，保证渲染正确</p><p>深度其实就是该象素点在3d世界中距离摄象机的距离（绘制坐标），深度缓存中存储着每个象素点（绘制在屏幕上的）的深度值！深度值（Z值）越大，则离摄像机越远。</p><p><strong>No depth buffer</strong>：无深度缓冲</p><p>**At least 16 bits depth (no stencil) **：至少 16 位深度（无模板）</p><p>**At least 24 bits depth (with stencil) **：至少 24 位深度（带模板）</p><p>模板缓冲区是一个通用缓冲区，它允许您为绘制到屏幕上的每个像素存储一个额外的无符号 8 位整数 (0–255)。</p><h3 id="7-Enable-Mip-Maps-启用MipMaps"><a href="#7-Enable-Mip-Maps-启用MipMaps" class="headerlink" title="7.Enable Mip Maps(启用MipMaps)"></a>7.Enable Mip Maps(启用MipMaps)</h3><p>选中此框可使渲染纹理生成 MipMaps。</p><h3 id="8-Auto-generate-Mip-Maps-自动生成MipMaps"><a href="#8-Auto-generate-Mip-Maps-自动生成MipMaps" class="headerlink" title="8.Auto generate Mip Maps(自动生成MipMaps)"></a>8.Auto generate Mip Maps(自动生成MipMaps)</h3><p>勾选这个复选框可以在生成的mipmaps中自动填充相关数据。如果你不启用这个，你将不得不使用<code>GenerateMips</code>函数来手动填充这些mipmaps。或者，在你调用各种<code>SetRenderTarget</code>函数时，选择渲染到哪一个的mip。</p><h3 id="9-Dynamic-Scaling-动态缩放"><a href="#9-Dynamic-Scaling-动态缩放" class="headerlink" title="9.Dynamic Scaling(动态缩放)"></a>9.Dynamic Scaling(动态缩放)</h3><p>勾选此框可以让动态分辨率缩放调整渲染纹理的大小。如果你不启用这个选项，那么无论动态分辨率设置如何，渲染纹理都会保持相同的尺寸。</p><h3 id="10-Wrap-Mode-包裹模式"><a href="#10-Wrap-Mode-包裹模式" class="headerlink" title="10.Wrap Mode(包裹模式)"></a>10.Wrap Mode(包裹模式)</h3><p>控制纹理的包裹方式。</p><p><strong>Repeat</strong>：将纹理拼接起来，形成一个重复的图案</p><p><strong>Clamp</strong>：拉伸纹理的边缘。当您将图像映射到对象并且您不希望纹理平铺时，这对于防止包裹“伪影”很有用</p><p><strong>Mirror</strong>：平铺纹理以创建在每个整数边界处镜像纹理的重复图案</p><p><strong>Mirror Once</strong>：镜像纹理一次，然后回落到<strong>Clamping</strong></p><p><strong>Per-axis</strong>：允许您为 U 轴和 V 轴设置不同的环绕模式。可用选项还有重复、夹紧、镜像和镜像一次。例如，当您将经纬度环境贴图用于反射探针时，在垂直坐标（V 轴）上有 Clamp 很有用，但在水平坐标（U 轴）上有 Repeat。</p><p>Lets you set different wrap modes for the <strong>U axis</strong> and the <strong>V axis</strong>. The available options are also <strong>Repeat</strong>, <strong>Clamp</strong>, <strong>Mirror</strong> and <strong>Mirror Once</strong>. For example, when you use latitude-longitude environment maps for <strong>reflection probes</strong>, it is useful to have <strong>Clamp</strong> on the vertical coordinate (<strong>V axis</strong>), but <strong>Repeat</strong> on the horizontal coordinate (<strong>U axis</strong>).</p><h3 id="11-Filter-Mode-过滤模式"><a href="#11-Filter-Mode-过滤模式" class="headerlink" title="11.Filter Mode(过滤模式)"></a>11.Filter Mode(过滤模式)</h3><p>控制纹理的采样如何使用附近的像素。</p><p><strong>Point</strong>：使用最近的像素。这使得纹理看起来像素化</p><p><strong>Bilinear</strong>：使用四个最近纹素的加权平均值。这会使纹理在放大时显得模糊。</p><p><strong>Trilinear</strong>：使用经过双线性过滤的两个最近 mips 的加权平均值。这会在 mips 之间创建一个柔和的过渡，但代价是外观稍微模糊一些。</p><h3 id="12-Aniso-Level-各向异性过滤级别"><a href="#12-Aniso-Level-各向异性过滤级别" class="headerlink" title="12.Aniso Level(各向异性过滤级别)"></a>12.Aniso Level(各向异性过滤级别)</h3><p>纹理的各向异性过滤级别。当您以陡峭的角度查看纹理时，这会提高纹理质量。适用于地板、地面或道路纹理。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 渲染相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Box、Sphere、Capsule三种Collider的性能对比</title>
      <link href="/2021/07/05/1dde1d6847c5/"/>
      <url>/2021/07/05/1dde1d6847c5/</url>
      
        <content type="html"><![CDATA[<p>今天看《Unity 游戏设计与实现——南梦宫一线程序员的开发实例》时，忽然看到文中提到Sphere Collider的性能消耗比Box Collider的性能消耗要少。好奇之下上网查了下。</p><p>发现一篇不错的帖子，就放上来了。</p><p>帖子地址：<a href="https://forum.unity.com/threads/capsule-vs-box-colliders.34254/">点这里</a></p><hr><p><strong>译文：</strong></p><p>我决定放一些测试数据上来。</p><p>所有测试均完成于INTEL二核的3GH处理器，无渲染部分，仅仅是物理部分。</p><p>静态碰撞体几乎没有什么性能开销，高达6万多个不同的碰撞体对性能的影响在一帧之内(&lt;3ms)几乎可以让人忽略不算。</p><p>所以我尝试去测试动态碰撞体，这会更加有挑战性。</p><p>要记住这只是物理部分，你的渲染部分的瓶颈只能达到2500个独立模型物体。</p><p>动态测试数据：</p><table><thead><tr><th>Collider数量</th><th>500</th><th>1000</th><th>1500</th><th>2500</th></tr></thead><tbody><tr><td>Capsule</td><td>2.1毫秒</td><td>5.6毫秒</td><td>16.1毫秒</td><td>459-481毫秒</td></tr><tr><td>Box</td><td>2.6毫秒</td><td>5.8毫秒</td><td>20.5毫秒</td><td>490-520毫秒</td></tr><tr><td>Sphere</td><td>2毫秒</td><td>2.9毫秒</td><td>4.8毫秒</td><td>190-233毫秒</td></tr></tbody></table><p>看到了吧？通过这些数据，我们能发现，capsule collider性能要稍稍优越于 box collider ，但是sphere collider的性能明显要甩掉所有人九条街。</p><hr><p><strong>原文：</strong></p><p>Well I decided to post some results from some testing.<br> All tests were done on an intel core2duo 3ghz imac with no rendering, just physics.</p><p> Static colliders seem to have such a minimal impact on performance, Upto 60,000 and beyond of all different colliders were causing no noticable  effect on the frame time (&lt;3ms)</p><p> So I tried testing dynamic colliders instead, much more challenging.</p><p> Remember this is just physics, your renderer would bottleneck way before reaching 2500 individual objects.</p><p> Dynamic Tests:<br> 500 Colliders<br> Capsule 2.1ms<br> Box 2.6ms<br> Sphere 2ms</p><p> 1000 Colliders<br> Capsule 5.6ms<br> Box 5.8ms<br> Sphere 2.9ms</p><p> 1500 Colliders<br> Capsule 16.1ms<br> Box 20.5ms<br> Sphere 4.8ms</p><p> 2500 Colliders<br> Capsule 453-481ms<br> Box 490-520ms<br> Sphere 190-233ms</p><p> So there you have it, across the board capsule actually beats box but  not by a huge amount, and sphere obviously kicks everyones ass. </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Collider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Collider </tag>
            
            <tag> 碰撞体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# do{}while(false)写法的意义</title>
      <link href="/2021/07/05/25e7f4f09fd1/"/>
      <url>/2021/07/05/25e7f4f09fd1/</url>
      
        <content type="html"><![CDATA[<h3 id="do-while-语法："><a href="#do-while-语法：" class="headerlink" title="do while 语法："></a>do while 语法：</h3><p>众所周知，do  while 循环是执行一遍do{} 里面的代码然后，再去while()判断条件是否为真，为真继续执行do{}里面的代码，否则就跳出循环。当然我们也可以采用 break 跳出循环，也可以采用 continue 结束本次循环开始下一次循环。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//执行的任务</span></span><br><span class="line">        </span><br><span class="line">&#125; <span class="keyword">while</span> (); <span class="comment">//判断条件是否为真</span></span><br></pre></td></tr></table></figure><h3 id="do-while-false-："><a href="#do-while-false-：" class="headerlink" title="do{}while(false)："></a>do{}while(false)：</h3><p>在工作中我们能经常发现有人写 do{}while(false)  这样的代码，初看时让人迷惑不解，按照上面的语法 do{}while(false) 这样 do{} 里面的代码只会执行一次的啊，那么问题来了，为什么要这样写？</p><p>试想，我们在工作中是不是经常会遇到一种情况：第二个判断需要依赖第一个判断的结果，甚至第三个判断需要依赖第二个判断的结果。如下样式的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (one == <span class="literal">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (two == <span class="literal">true</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (three == <span class="literal">true</span>) &#123;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//第三个依赖第二个判断结果，第二个依赖第一个判断结果。</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这样的代码是不是看起来好恶心，各种判断嵌套在一起，很是不容易理清代码逻辑，而且很容易出错。那有没有一种清爽的代码风格来解决这个问题呢？答案肯定是有的，就是我们上面提到 <em>do{}while(<em>false</em>)</em> 。</p><p>那要如何用代码实现呢，请看下面的代码示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (one == <span class="literal">false</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (two == <span class="literal">false</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (three == <span class="literal">false</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>既然后面的判断依赖前面的判断结果，那么所有的条件都去判断是否等于false，等于false的直接break跳出do while 循环。这样的代码风格是不是比刚才那种写法清爽多了。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>do{}while(false) 最大意义是：简化 if else 的嵌套结构判断逻辑。而且可以有效的防止资源泄漏，统一的出口处理有利于代码逻辑的设计。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 正则表达式</title>
      <link href="/2021/07/05/bd95ab327d58/"/>
      <url>/2021/07/05/bd95ab327d58/</url>
      
        <content type="html"><![CDATA[<p><strong>正则表达式</strong> 是一种匹配输入文本的模式。</p><p>.Net 框架提供了允许这种匹配的正则表达式引擎。</p><p>模式由一个或多个字符、运算符和结构组成。</p><hr><h2 id="定义正则表达式"><a href="#定义正则表达式" class="headerlink" title="定义正则表达式"></a>定义正则表达式</h2><p>下面列出了用于定义正则表达式的各种类别的字符、运算符和结构。</p><ul><li>字符转义</li><li>字符类</li><li>定位点</li><li>分组构造</li><li>限定符</li><li>反向引用构造</li><li>备用构造</li><li>替换</li><li>杂项构造</li></ul><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>正则表达式中的反斜杠字符（\）指示其后跟的字符是特殊字符，或应按原义解释该字符。 </p><p>下表列出了转义字符：</p><table><thead><tr><th>转义字符</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>\a</strong></td><td>与报警 (bell) 符 \u0007 匹配。</td><td>\a</td><td>“Warning!” + ‘\u0007’ 中的 “\u0007”</td></tr><tr><td><strong>\b</strong></td><td>在字符类中，与退格键 \u0008 匹配。</td><td>[\b]{3,}</td><td>“\b\b\b\b” 中的 “\b\b\b\b”</td></tr><tr><td><strong>\t</strong></td><td>与制表符 \u0009 匹配。</td><td>(\w+)\t</td><td>“Name\tAddr\t” 中的 “Name\t” 和 “Addr\t”</td></tr><tr><td><strong>\r</strong></td><td>与回车符 \u000D 匹配。（\r 与换行符 \n 不是等效的。）</td><td>\r\n(\w+)</td><td>“\r\nHello\nWorld.” 中的 “\r\nHello”</td></tr><tr><td><strong>\v</strong></td><td>与垂直制表符 \u000B 匹配。</td><td>[\v]{2,}</td><td>“\v\v\v” 中的 “\v\v\v”</td></tr><tr><td><strong>\f</strong></td><td>与换页符 \u000C 匹配。</td><td>[\f]{2,}</td><td>“\f\f\f” 中的 “\f\f\f”</td></tr><tr><td><strong>\n</strong></td><td>与换行符 \u000A 匹配。</td><td>\r\n(\w+)</td><td>“\r\nHello\nWorld.” 中的 “\r\nHello”</td></tr><tr><td><strong>\e</strong></td><td>与转义符 \u001B 匹配。</td><td>\e</td><td>“\x001B” 中的 “\x001B”</td></tr><tr><td><strong>\ nnn</strong></td><td>使用八进制表示形式指定一个字符（nnn 由二到三位数字组成）。</td><td>\w\040\w</td><td>“a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td><strong>\x nn</strong></td><td>使用十六进制表示形式指定字符（nn 恰好由两位数字组成）。</td><td>\w\x20\w</td><td>“a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td><strong>\c X \c x</strong></td><td>匹配 X 或 x 指定的 ASCII 控件字符，其中 X 或 x 是控件字符的字母。</td><td>\cC</td><td>“\x0003” 中的 “\x0003” (Ctrl-C)</td></tr><tr><td><strong>\u nnnn</strong></td><td>使用十六进制表示形式匹配一个 Unicode 字符（由 nnnn 表示的四位数）。</td><td>\w\u0020\w</td><td>“a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td>*<em>*</em></td><td>在后面带有不识别的转义字符时，与该字符匹配。</td><td>\d+[+-x*]\d+\d+[+-x*\d+</td><td>“(2+2) * 3<em>9” 中的 “2+2” 和 “3</em>9”</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类与一组字符中的任何一个字符匹配。</p><p>下表列出了字符类：</p><table><thead><tr><th>字符类</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>[character_group]</strong></td><td>匹配 character_group 中的任何单个字符。 默认情况下，匹配区分大小写。</td><td>[mn]</td><td>“mat” 中的 “m”，”moon” 中的 “m” 和 “n”</td></tr><tr><td><strong>[^character_group]</strong></td><td>非：与不在 character_group 中的任何单个字符匹配。 默认情况下，character_group 中的字符区分大小写。</td><td>[^aei]</td><td>“avail” 中的 “v” 和 “l”</td></tr><tr><td><strong>[ first - last ]</strong></td><td>字符范围：与从 first 到 last 的范围中的任何单个字符匹配。</td><td>[b-d]</td><td>[b-d]irds 可以匹配 Birds、 Cirds、 Dirds</td></tr><tr><td><strong>.</strong></td><td>通配符：与除 \n 之外的任何单个字符匹配。  若要匹配原意句点字符（. 或 \u002E），您必须在该字符前面加上转义符 (.)。</td><td>a.e</td><td>“have” 中的 “ave”， “mate” 中的 “ate”</td></tr><tr><td><strong>\p{ name }</strong></td><td>与 <em>name</em> 指定的 Unicode 通用类别或命名块中的任何单个字符匹配。</td><td>\p{Lu}</td><td>“City Lights” 中的 “C” 和 “L”</td></tr><tr><td><strong>\P{ name }</strong></td><td>与不在 <em>name</em> 指定的 Unicode 通用类别或命名块中的任何单个字符匹配。</td><td>\P{Lu}</td><td>“City” 中的 “i”、 “t” 和 “y”</td></tr><tr><td><strong>\w</strong></td><td>与任何单词字符匹配。</td><td>\w</td><td>“Room#1” 中的 “R”、 “o”、 “m” 和 “1”</td></tr><tr><td><strong>\W</strong></td><td>与任何非单词字符匹配。</td><td>\W</td><td>“Room#1” 中的 “#”</td></tr><tr><td><strong>\s</strong></td><td>与任何空白字符匹配。</td><td>\w\s</td><td>“ID A1.3” 中的 “D “</td></tr><tr><td><strong>\S</strong></td><td>与任何非空白字符匹配。</td><td>\s\S</td><td>“int __ctr” 中的 “ _”</td></tr><tr><td><strong>\d</strong></td><td>与任何十进制数字匹配。</td><td>\d</td><td>“4 &#x3D; IV” 中的 “4”</td></tr><tr><td><strong>\D</strong></td><td>匹配不是十进制数的任意字符。</td><td>\D</td><td>“4 &#x3D; IV” 中的 “ “、 “&#x3D;”、 “ “、 “I” 和 “V”</td></tr></tbody></table><h3 id="定位点"><a href="#定位点" class="headerlink" title="定位点"></a>定位点</h3><p>定位点或原子零宽度断言会使匹配成功或失败，具体取决于字符串中的当前位置，但它们不会使引擎在字符串中前进或使用字符。</p><p>下表列出了定位点：</p><table><thead><tr><th>断言</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>^</strong></td><td>匹配必须从字符串或一行的开头开始。</td><td>^\d{3}</td><td>“567-777-“ 中的 “567”</td></tr><tr><td><strong>$</strong></td><td>匹配必须出现在字符串的末尾或出现在行或字符串末尾的 <strong>\n</strong> 之前。</td><td>-\d{4}$</td><td>“8-12-2012” 中的 “-2012”</td></tr><tr><td><strong>\A</strong></td><td>匹配必须出现在字符串的开头。</td><td>\A\w{4}</td><td>“Code-007-“ 中的 “Code”</td></tr><tr><td><strong>\Z</strong></td><td>匹配必须出现在字符串的末尾或出现在字符串末尾的 <strong>\n</strong> 之前。</td><td>-\d{3}\Z</td><td>“Bond-901-007” 中的 “-007”</td></tr><tr><td><strong>\z</strong></td><td>匹配必须出现在字符串的末尾。</td><td>-\d{3}\z</td><td>“-901-333” 中的 “-333”</td></tr><tr><td><strong>\G</strong></td><td>匹配必须出现在上一个匹配结束的地方。</td><td>\G(\d)</td><td>“(1)(3)(5)<a href="9">7</a>“ 中的 “(1)”、 “(3)” 和 “(5)”</td></tr><tr><td><strong>\b</strong></td><td>匹配一个单词边界，也就是指单词和空格间的位置。</td><td>er\b</td><td>匹配”never”中的”er”，但不能匹配”verb”中的”er”。</td></tr><tr><td><strong>\B</strong></td><td>匹配非单词边界。</td><td>er\B</td><td>匹配”verb”中的”er”，但不能匹配”never”中的”er”。</td></tr></tbody></table><h3 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h3><p>分组构造描述了正则表达式的子表达式，通常用于捕获输入字符串的子字符串。</p><p>这一部分比较难于理解，可以阅读 <strong><a href="https://www.runoob.com/regexp/regexp-syntax.html#reg-select">正则表达式-选择</a></strong> 、**<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">正则表达式的先行断言(lookahead)和后行断言(lookbehind)</a>** 帮助理解。</p><p>下表列出了分组构造：</p><table><thead><tr><th>分组构造</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>( subexpression )</strong></td><td>捕获匹配的子表达式并将其分配到一个从零开始的序号中。</td><td>(\w)\1</td><td>“deep” 中的 “ee”</td></tr><tr><td><strong>(?&lt; name &gt;subexpression)</strong></td><td>将匹配的子表达式捕获到一个命名组中。</td><td>(?&lt; double&gt;\w)\k&lt; double&gt;</td><td>“deep” 中的 “ee”</td></tr><tr><td><strong>(?&lt; name1 -name2 &gt;subexpression)</strong></td><td>定义平衡组定义。</td><td>(((?’Open’()[^()]<em>)+((?’Close-Open’))[^()]</em>)+)*(?(Open)(?!))$</td><td>“3+2^((1-3)<em>(3-1))” 中的 “((1-3)</em>(3-1))”</td></tr><tr><td><strong>(?: subexpression)</strong></td><td>定义非捕获组。</td><td>Write(?:Line)?</td><td>“Console.WriteLine()” 中的 “WriteLine”</td></tr><tr><td><strong>(?imnsx-imnsx:subexpression)</strong></td><td>应用或禁用 <em>subexpression</em> 中指定的选项。</td><td>A\d{2}(?i:\w+)\b</td><td>“A12xl A12XL a12xl” 中的 “A12xl” 和 “A12XL”</td></tr><tr><td><strong>(?&#x3D; subexpression)</strong></td><td>零宽度正预测先行断言。</td><td>\w+(?&#x3D;.)</td><td>“He is. The dog ran. The sun is out.” 中的 “is”、 “ran” 和 “out”</td></tr><tr><td><strong>(?! subexpression)</strong></td><td>零宽度负预测先行断言。</td><td>\b(?!un)\w+\b</td><td>“unsure sure unity used” 中的 “sure” 和 “used”</td></tr><tr><td><strong>(?&lt;&#x3D;subexpression)</strong></td><td>零宽度正回顾后发断言。</td><td>(?&lt;&#x3D;19)\d{2}\b</td><td>“1851 1999 1950 1905 2003” 中的 “99”、”50”和 “05”</td></tr><tr><td><strong>(?&lt;! subexpression)</strong></td><td>零宽度负回顾后发断言。</td><td>(?&lt;!wo)man\b</td><td>“Hi woman Hi man” 中的 “man”</td></tr><tr><td><strong>(?&gt; subexpression)</strong></td><td>非回溯（也称为”贪婪”）子表达式。</td><td><a href="?%3EA+B+">13579</a></td><td>“1ABB 3ABBC 5AB 5AC” 中的 “1ABB”、 “3ABB” 和 “5AB”</td></tr></tbody></table><p>实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">string</span> input = <span class="string">&quot;1851 1999 1950 1905 2003&quot;</span>;</span><br><span class="line">      <span class="built_in">string</span> pattern = <span class="string">@&quot;(?&lt;=19)\d&#123;2&#125;\b&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> Regex.Matches(input, pattern))</span><br><span class="line">         Console.WriteLine(match.Value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符指定在输入字符串中必须存在上一个元素（可以是字符、组或字符类）的多少个实例才能出现匹配项。 限定符包括下表中列出的语言元素。</p><p>下表列出了限定符：</p><table><thead><tr><th>限定符</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td>*****</td><td>匹配上一个元素零次或多次。</td><td>\d*.\d</td><td>“.0”、 “19.9”、 “219.9”</td></tr><tr><td><strong>+</strong></td><td>匹配上一个元素一次或多次。</td><td>“be+”</td><td>“been” 中的 “bee”， “bent” 中的 “be”</td></tr><tr><td><strong>?</strong></td><td>匹配上一个元素零次或一次。</td><td>“rai?n”</td><td>“ran”、 “rain”</td></tr><tr><td><strong>{ n }</strong></td><td>匹配上一个元素恰好 n 次。</td><td>“,\d{3}”</td><td>“1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td></tr><tr><td><strong>{ n ,}</strong></td><td>匹配上一个元素至少 n 次。</td><td>“\d{2,}”</td><td>“166”、 “29”、 “1930”</td></tr><tr><td><strong>{ n , m }</strong></td><td>匹配上一个元素至少 n 次，但不多于 m 次。</td><td>“\d{3,5}”</td><td>“166”， “17668”，  “193024” 中的 “19302”</td></tr><tr><td>***?**</td><td>匹配上一个元素零次或多次，但次数尽可能少。</td><td>\d*?.\d</td><td>“.0”、 “19.9”、 “219.9”</td></tr><tr><td><strong>+?</strong></td><td>匹配上一个元素一次或多次，但次数尽可能少。</td><td>“be+?”</td><td>“been” 中的 “be”， “bent” 中的 “be”</td></tr><tr><td><strong>??</strong></td><td>匹配上一个元素零次或一次，但次数尽可能少。</td><td>“rai??n”</td><td>“ran”、 “rain”</td></tr><tr><td><strong>{ n }?</strong></td><td>匹配前导元素恰好 n 次。</td><td>“,\d{3}?”</td><td>“1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td></tr><tr><td><strong>{ n ,}?</strong></td><td>匹配上一个元素至少 n 次，但次数尽可能少。</td><td>“\d{2,}?”</td><td>“166”、 “29” 和 “1930”</td></tr><tr><td><strong>{ n , m }?</strong></td><td>匹配上一个元素的次数介于 n 和 m 之间，但次数尽可能少。</td><td>“\d{3,5}?”</td><td>“166”， “17668”，  “193024” 中的 “193” 和 “024”</td></tr></tbody></table><h3 id="反向引用构造"><a href="#反向引用构造" class="headerlink" title="反向引用构造"></a>反向引用构造</h3><p>反向引用允许在同一正则表达式中随后标识以前匹配的子表达式。</p><p>下表列出了反向引用构造：</p><table><thead><tr><th>反向引用构造</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>\ number</strong></td><td>反向引用。 匹配编号子表达式的值。</td><td>(\w)\1</td><td>“seek” 中的 “ee”</td></tr><tr><td><strong>\k&lt; name &gt;</strong></td><td>命名反向引用。 匹配命名表达式的值。</td><td>(?&lt; char&gt;\w)\k&lt; char&gt;</td><td>“seek” 中的 “ee”</td></tr></tbody></table><h3 id="备用构造"><a href="#备用构造" class="headerlink" title="备用构造"></a>备用构造</h3><p>备用构造用于修改正则表达式以启用 either&#x2F;or 匹配。</p><p>下表列出了备用构造：</p><table><thead><tr><th>备用构造</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><strong>|</strong></td><td>匹配以竖线 (|) 字符分隔的任何一个元素。</td><td>th(e|is|at)</td><td>“this is the day. “ 中的 “the” 和 “this”</td></tr><tr><td><strong>(?( expression )yes | no )</strong></td><td>如果正则表达式模式由 expression 匹配指定，则匹配 <em>yes</em>；否则匹配可选的 <em>no</em> 部分。 expression 被解释为零宽度断言。</td><td>(?(A)A\d{2}\b|\b\d{3}\b)</td><td>“A10 C103 910” 中的 “A10” 和 “910”</td></tr><tr><td><strong>(?( name )yes | no )</strong></td><td>如果 name 或已命名或已编号的捕获组具有匹配，则匹配 <em>yes</em>；否则匹配可选的 <em>no</em>。</td><td>(?&lt; quoted&gt;”)?(?(quoted).+?”|\S+\s)</td><td>“Dogs.jpg “Yiska playing.jpg”” 中的 Dogs.jpg 和 “Yiska playing.jpg”</td></tr></tbody></table><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>替换是替换模式中使用的正则表达式。</p><p>下表列出了用于替换的字符：</p><table><thead><tr><th>字符</th><th>描述</th><th>模式</th><th>替换模式</th><th>输入字符串</th><th>结果字符串</th></tr></thead><tbody><tr><td>**$**number</td><td>替换按组 <em>number</em> 匹配的子字符串。</td><td>\b(\w+)(\s)(\w+)\b</td><td>$3$2$1</td><td>“one two”</td><td>“two one”</td></tr><tr><td><strong>${<strong>name</strong>}</strong></td><td>替换按命名组 <em>name</em> 匹配的子字符串。</td><td>\b(?&lt; word1&gt;\w+)(\s)(?&lt; word2&gt;\w+)\b</td><td>${word2} ${word1}</td><td>“one two”</td><td>“two one”</td></tr><tr><td><strong>$$</strong></td><td>替换字符”$”。</td><td>\b(\d+)\s?USD</td><td>$$$1</td><td>“103 USD”</td><td>“$103”</td></tr><tr><td><strong>$&amp;</strong></td><td>替换整个匹配项的一个副本。</td><td>($<em>(\d</em>(.+\d+)?){1})</td><td>**$&amp;</td><td>“$1.30”</td><td>“<strong>$1.30</strong>“</td></tr><tr><td><strong>$&#96;</strong></td><td>替换匹配前的输入字符串的所有文本。</td><td>B+</td><td>$&#96;</td><td>“AABBCC”</td><td>“AAAACC”</td></tr><tr><td><strong>$’</strong></td><td>替换匹配后的输入字符串的所有文本。</td><td>B+</td><td>$’</td><td>“AABBCC”</td><td>“AACCCC”</td></tr><tr><td><strong>$+</strong></td><td>替换最后捕获的组。</td><td>B+(C+)</td><td>$+</td><td>“AABBCCDD”</td><td>AACCDD</td></tr><tr><td><strong>$_</strong></td><td>替换整个输入字符串。</td><td>B+</td><td>$_</td><td>“AABBCC”</td><td>“AAAABBCCCC”</td></tr></tbody></table><h3 id="杂项构造"><a href="#杂项构造" class="headerlink" title="杂项构造"></a>杂项构造</h3><p>下表列出了各种杂项构造：</p><table><thead><tr><th>构造</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><strong>(?imnsx-imnsx)</strong></td><td>在模式中间对诸如不区分大小写这样的选项进行设置或禁用。</td><td>\bA(?i)b\w+\b 匹配 “ABA Able Act” 中的 “ABA” 和 “Able”</td></tr><tr><td><strong>(?#注释)</strong></td><td>内联注释。该注释在第一个右括号处终止。</td><td>\bA(?#匹配以A开头的单词)\w+\b</td></tr><tr><td><strong>#</strong> [行尾]</td><td>该注释以非转义的 # 开头，并继续到行的结尾。</td><td>(?x)\bA\w+\b#匹配以 A 开头的单词</td></tr></tbody></table><h2 id="Regex-类"><a href="#Regex-类" class="headerlink" title="Regex 类"></a>Regex 类</h2><p>Regex 类用于表示一个正则表达式。</p><p>下表列出了 Regex 类中一些常用的方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>public bool IsMatch( string input )</strong>  指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项。</td></tr><tr><td>2</td><td><strong>public bool IsMatch( string input, int startat )</strong>  指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的开始位置开始。</td></tr><tr><td>3</td><td><strong>public static bool IsMatch( string input, string pattern )</strong>  指示指定的正则表达式是否在指定的输入字符串中找到匹配项。</td></tr><tr><td>4</td><td><strong>public MatchCollection Matches( string input )</strong>  在指定的输入字符串中搜索正则表达式的所有匹配项。</td></tr><tr><td>5</td><td><strong>public string Replace( string input, string replacement )</strong>  在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串。</td></tr><tr><td>6</td><td><strong>public string[] Split( string input )</strong>  把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割。</td></tr></tbody></table><p>如需了解 Regex 类的完整的属性列表，请参阅微软的 C# 文档。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h2><p>下面的实例匹配了以 ‘S’ 开头的单词：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RegExApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMatch</span>(<span class="params"><span class="built_in">string</span> text, <span class="built_in">string</span> expr</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;The Expression: &quot;</span> + expr);</span><br><span class="line">         MatchCollection mc = Regex.Matches(text, expr);</span><br><span class="line">         <span class="keyword">foreach</span> (Match m <span class="keyword">in</span> mc)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(m);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span> str = <span class="string">&quot;A Thousand Splendid Suns&quot;</span>;</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Matching words that start with &#x27;S&#x27;: &quot;</span>);</span><br><span class="line">         showMatch(str, <span class="string">@&quot;\bS\S*&quot;</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Matching words that start with &#x27;S&#x27;:</span><br><span class="line">The Expression: \bS\S*</span><br><span class="line">Splendid</span><br><span class="line">Suns</span><br></pre></td></tr></table></figure><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h2><p>下面的实例匹配了以 ‘m’ 开头以 ‘e’ 结尾的单词：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RegExApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMatch</span>(<span class="params"><span class="built_in">string</span> text, <span class="built_in">string</span> expr</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;The Expression: &quot;</span> + expr);</span><br><span class="line">         MatchCollection mc = Regex.Matches(text, expr);</span><br><span class="line">         <span class="keyword">foreach</span> (Match m <span class="keyword">in</span> mc)</span><br><span class="line">         &#123;</span><br><span class="line">            Console.WriteLine(m);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span> str = <span class="string">&quot;make maze and manage to measure it&quot;</span>;</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Matching words start with &#x27;m&#x27; and ends with &#x27;e&#x27;:&quot;</span>);</span><br><span class="line">         showMatch(str, <span class="string">@&quot;\bm\S*e\b&quot;</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Matching words start with &#x27;m&#x27; and ends with &#x27;e&#x27;:</span><br><span class="line">The Expression: \bm\S*e\b</span><br><span class="line">make</span><br><span class="line">maze</span><br><span class="line">manage</span><br><span class="line">measure</span><br></pre></td></tr></table></figure><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h2><p>下面的实例替换掉多余的空格：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RegExApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">string</span> input = <span class="string">&quot;Hello   World   &quot;</span>;</span><br><span class="line">         <span class="built_in">string</span> pattern = <span class="string">&quot;\\s+&quot;</span>;</span><br><span class="line">         <span class="built_in">string</span> replacement = <span class="string">&quot; &quot;</span>;</span><br><span class="line">         Regex rgx = <span class="keyword">new</span> Regex(pattern);</span><br><span class="line">         <span class="built_in">string</span> result = rgx.Replace(input, replacement);</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Original String: &#123;0&#125;&quot;</span>, input);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Replacement String: &#123;0&#125;&quot;</span>, result);    </span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Original String: Hello   World   </span><br><span class="line">Replacement String: Hello World   </span><br></pre></td></tr></table></figure><h2 id="VS2019怎么用正则表达式进行替换"><a href="#VS2019怎么用正则表达式进行替换" class="headerlink" title="VS2019怎么用正则表达式进行替换"></a>VS2019怎么用正则表达式进行替换</h2><p>给定一串字符串：<strong>Hotfix.R._com.audio.sound.sfx8205016</strong></p><p>想要在vs2019里通过正则表达式，在这一串后面添加:<strong>_ogg</strong></p><p>首先我们要匹配到一个能查到<strong>sfx8205016</strong>的正则表达式：**[sfx]{3}[0-9]***</p><p>在vs里面的<strong>替换内容</strong>里可以通过**$+数字<strong>来替换</strong>查找内容 里的（正则表达式）**,</p><p>像这样：</p><p><strong>查找内容：([sfx]{3}[0-9]*)</strong></p><p><strong>替换内容：$1_ogg</strong></p><p>点击替换，就能把<strong>sfx8205016</strong>替换成<strong>sfx8205016_ogg</strong></p><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h3 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">数字：^[0-9]*$</span><br><span class="line">n位的数字：^\d&#123;n&#125;$</span><br><span class="line">至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(\.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)$</span><br><span class="line">正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">有两位小数的正实数：^[0-9]+(\.[0-9]&#123;2&#125;)?$</span><br><span class="line">有1~3位小数的正实数：^[0-9]+(\.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span><br><span class="line">非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</span><br><span class="line">非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br><span class="line">非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br><span class="line">正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h3 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line">长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line">由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line">由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span><br><span class="line">中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line">中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br><span class="line">可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+</span><br><span class="line">禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h3 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?</span><br><span class="line">InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span><br><span class="line">国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d&#123;11&#125;)|^((\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;)|(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;))$)</span><br><span class="line">身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)</span><br><span class="line">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$</span><br><span class="line">强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line">日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</span><br><span class="line">钱的输入格式：</span><br><span class="line">有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</span><br><span class="line">    这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</span><br><span class="line">    一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</span><br><span class="line">    这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</span><br><span class="line">    必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">    这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">    这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">    1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">    备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><span class="line">中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><span class="line">IPv4地址：((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</span><br></pre></td></tr></table></figure><h3 id="四、自定义需求表达式"><a href="#四、自定义需求表达式" class="headerlink" title="四、自定义需求表达式"></a>四、自定义需求表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以下划线,大小写英文,中文开头，并且只能以下划线，大小写英文，中文开头，阿拉伯数字结尾：^[\u4e00-\u9fa5a-zA-Z_]+[\u4e00-\u9fa5a-zA-Z0-9_]*$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用数学计算方法</title>
      <link href="/2021/07/05/841493af34c2/"/>
      <url>/2021/07/05/841493af34c2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Unity中绕任意轴任意角度旋转向量"><a href="#1-Unity中绕任意轴任意角度旋转向量" class="headerlink" title="1.Unity中绕任意轴任意角度旋转向量"></a>1.Unity中绕任意轴任意角度旋转向量</h3><p><strong>简单理解：</strong></p><p>举个钟表的例子，Center就是表盘中点，Position就是表针顶点（指向刻度的点），拿12点转到3点举例，用上面的方法就是（表盘中点，表针顶点，绕Up轴，转90度）</p><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在center（物体世界坐标）点通过axis（刚才例子里的Vector2.up）轴向量，将position（物体指向的坐标，这个坐标跟center可以构成一个当前物体的向量）点旋转angle度</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;position&quot;&gt;</span>物体顶点坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;center&quot;&gt;</span>物体世界坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;axis&quot;&gt;</span>轴向<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;angle&quot;&gt;</span>旋转角度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> sVector3 <span class="title">RotateRound</span>(<span class="params">Vector3 position, Vector3 center, Vector3 axis, <span class="built_in">float</span> angle</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 point = Quaternion.AngleAxis(angle, axis) * (position - center);</span><br><span class="line">    Vector3 resultVec3 = center + point;</span><br><span class="line">    <span class="keyword">return</span> resultVec3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-求曲线方程的切线向量"><a href="#2-求曲线方程的切线向量" class="headerlink" title="2.求曲线方程的切线向量"></a>2.求曲线方程的切线向量</h3><p><strong>说明：</strong></p><p>对曲线方程进行求导，就能获取曲线方程的切线方程。传入对应参数，便能求出切线向量。</p><p>假设位移随时间的变化关系为：x&#x3D;t^2+5x+6。位移对时间求导即为速度随时间的变化关系：v&#x3D;x’&#x3D;2t+5然后2阶求导，即为速度的一阶求导，即为加速度(速度随时间的变化)：a&#x3D;v’&#x3D;x”&#x3D;2那么再求导就是加速度随时间的变化关系了。没有名字了。同样：一阶求导是斜率（y随x的变化快慢）2阶求导就是斜率y’随x的变化快慢了3阶求导就是斜率y”随x的变化快慢了。</p><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> 本案例以四阶贝塞尔曲线为主，通过求导对应的方程式，得出了四阶贝塞尔曲线的切线方程，将t</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算曲线在时间&#x27;t&#x27;的导数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是与该点曲线相切的向量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">EvaluateCurveDerivative</span>(<span class="params">Vector3 a1, Vector3 c1, Vector3 c2, Vector3 a2, <span class="built_in">float</span> t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    t = Mathf.Clamp01 (t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * (<span class="number">1</span> - t) * (<span class="number">1</span> - t) * (c1 - a1) + <span class="number">6</span> * (<span class="number">1</span> - t) * t * (c2 - c1) + <span class="number">3</span> * t * t * (a2 - c2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-求3D曲线方程的法线向量"><a href="#3-求3D曲线方程的法线向量" class="headerlink" title="3.求3D曲线方程的法线向量"></a>3.求3D曲线方程的法线向量</h3><p><strong>说明：</strong></p><p>首先，单条线段是不存在法线向量的。想要有对应的法线向量，需要有一个平面才可以。而两条不重合的方向向量，即可构成一个平面。</p><p>这里主要利用对曲线进行一次求导，以及二次求导，得出两条不同的切线方程，通过传入对应参数，得出对应的切线向量。</p><p><strong>方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> 计算曲线在时间&#x27;t&#x27;的导数（只用于3阶贝塞尔曲线）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是与该点曲线相切的向量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">EvaluateCurveDerivative</span>(<span class="params">Vector3 a1, Vector3 c1, Vector3 c2, Vector3 a2, <span class="built_in">float</span> t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * (<span class="number">1</span> - t) * (<span class="number">1</span> - t) * (c1 - a1) + <span class="number">6</span> * (<span class="number">1</span> - t) * t * (c2 - c1) + <span class="number">3</span> * t * t * (a2 - c2);</span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>返回曲线在时间 &#x27;t&#x27; 的二阶导数（只用于3阶贝塞尔曲线）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">EvaluateCurveSecondDerivative</span>(<span class="params">Vector3 a1, Vector3 c1, Vector3 c2, Vector3 a2, <span class="built_in">float</span> t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> * (<span class="number">1</span> - t) * (c2 - <span class="number">2</span> * c1 + a1) + <span class="number">6</span> * t * (a2 - <span class="number">2</span> * c2 + c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算指定时间的法线向量（垂直于曲线的向量，并且只用于3阶贝塞尔曲线）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">Normal</span>(<span class="params">Vector3 a1, Vector3 c1, Vector3 c2, Vector3 a2, <span class="built_in">float</span> t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 tangent = EvaluateCurveDerivative (a1, c1, c2, a2, t);</span><br><span class="line">    Vector3 nextTangent = EvaluateCurveSecondDerivative (a1, c1, c2, a2, t);</span><br><span class="line">    <span class="keyword">return</span> Vector3.Cross(nextTangent, tangent).normalized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 游戏开发中的物理数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发中的物理数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体类型中向量Vector的介绍</title>
      <link href="/2021/07/04/3e548510abbe/"/>
      <url>/2021/07/04/3e548510abbe/</url>
      
        <content type="html"><![CDATA[<p><font color = orange>【向量Vector】</font>可以用来<font color = deeppink>【存储&#x2F;表示】</font>各种信息，例如Position位置信息，Velocity角色速度、Direction移动方向等</p><p>在三维世界中，我们需要存储【三个数值】来定义Vector3，Vector3(x,y,z)来分别表示这个点在XYZ轴上的具体位置，我们称之为<font color = orange>【Vector3】</font>。如果在二维世界中，就不想要【Z轴】的数值，我们可以用<font color = green>【Vector2】</font>来代替</p><p>向量具有【大小】和【方向】</p><p>向量的【大小 Magnitude】也叫作向量的【长度Length】</p><p>我们可以通过【勾股定理】计算向量的【大小 Magnitude】</p><p>如果要计算向量的【方向】，我们最好将向量进行【标准化 Normalized】，我们需要将向量的各分量都除以该向量的【大小 Magnitude】</p><p>标准化的应用：之所以说【标准化 Normalized】十分重要，是因为，假设结构体类型【Vector2】应用在【Input】玩家输入中，想象一下，当玩家同时按住【向左-1】和【向上+1】的按键时，换言之，Input向量为(-1,1)，假设我们希望角色【朝着(-1,1)这个方向】移动【三个单位长度】,我们想当然的将Input向量(-1,1)乘以了3，得到(-3,3)点，然后游戏对象从(0,0)点移动到了(-3,3)点，但如果我们计算了移动距离后，你会发现，计算的结果，我们移动了约为4.24（要求是角色移动3个单位距离，也就是应该等于3，而不是4.24），错误在于，角色朝着(1,1)斜边方向的速度【过快了】，其实这是一个在游戏开发中，经常容易犯的错误，要记得，如果你想用【向量Vector】来表示角色的【移动方向】时，需要将这个向量首先进行【标准化 Normalized】</p><p>朝向方向direction &#x3D; 目标点 - 初始点</p><p>朝向方向的例子</p><p>向量的基本运算【加减乘除】</p><p>向量的【点乘】【叉乘】</p><h3 id="三角形定则"><a href="#三角形定则" class="headerlink" title="三角形定则"></a>三角形定则</h3><p>三角形定则解决向量加法的方法：将各个向量依次首尾顺次相接，结果为第一个向量的起点指向最后一个向量的终点</p><h3 id="平行四边形定则"><a href="#平行四边形定则" class="headerlink" title="平行四边形定则"></a>平行四边形定则</h3><p>平行四边形定则解决向量加法的方法：将两个向量平移至公共起点，以向量的两条边作平行四边形，结果为公共起点的对角线。</p><p>平行四边形定则解决向量减法的方法：将两个向量平移至公共起点，以向量的两条边作平行四边形，结果由减向量的终点指向被减向量的终点（平行四边形定则只适用于两个非零非共线向量的加减） 。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发中的物理数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发中的物理数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity存储数据的各种路径说明</title>
      <link href="/2021/07/04/49aafe517672/"/>
      <url>/2021/07/04/49aafe517672/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Application-dataPath"><a href="#1-Application-dataPath" class="headerlink" title="1.Application.dataPath"></a>1.Application.dataPath</h3><p><strong>用途：Editor插件中用来读取本地文件</strong></p><p><strong>Editor：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限：可读写*</span><br><span class="line">&lt;project folder&gt;/Assets</span><br></pre></td></tr></table></figure><p><strong>Android：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限：不可读写</span><br><span class="line">/data/app/com.company.app/<span class="keyword">base</span>.apk <span class="keyword">or</span> /data/obb/xx.obb *指向此apk文件，也有可能指向obb文件。</span><br></pre></td></tr></table></figure><p><strong>iOS：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限：可读不可写</span><br><span class="line">&lt;app bundle&gt;/&lt;AppName.app&gt;/Data </span><br></pre></td></tr></table></figure><hr><h3 id="2-Application-streamingAssetsPath"><a href="#2-Application-streamingAssetsPath" class="headerlink" title="2.Application.streamingAssetsPath"></a>2.Application.streamingAssetsPath</h3><p><strong>作用：此目录下的资源不会被Unity压缩，所以可以存储原始文件（视频等），AssetBundle</strong></p><p><strong>Editor：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限：读写</span><br><span class="line">&lt;project folder&gt;/Assets/StreamingAssets *相当于 Application.dataPath+<span class="string">&quot;/StreamingAssets&quot;</span>*</span><br></pre></td></tr></table></figure><p><strong>Android：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">权限：只读</span><br><span class="line">jar:file:<span class="comment">// + Application.dataPath + &quot;!/assets&quot;</span></span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">jar:file:<span class="comment">//data/app/com.company.app/base.apk!/assets</span></span><br></pre></td></tr></table></figure><p>安卓中的资源是存储在APK压缩文件中的，所以不能通过<a href="https://link.jianshu.com/?t=http://System.IO">System.IO</a>来操作，只能通过www来进行读操作。 但可以使用第三方的压缩与解压缩库实现读写操作.比如SharpZipLib库，读取压缩包中的文件，添加或都重写压缩包</p><p><strong>iOS：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限：读写</span><br><span class="line">Application.dataPath + <span class="string">&quot;/Raw&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-Application-persistentDataPath"><a href="#3-Application-persistentDataPath" class="headerlink" title="3.Application.persistentDataPath"></a>3.Application.persistentDataPath</h3><p><strong>作用：因为app升级不会导致此数据丢失，所以可以用来存储数据数据，在iOS平台可以被iCloud自动备份 权限：全平台读写</strong></p><p><strong>Editor：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:/users/Administrator/AppData/LocalLow/&lt;companyname&gt;/&lt;appname&gt; </span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">/Users/username/Library/Application Support/&lt;companyname&gt;/&lt;appname&gt;</span><br></pre></td></tr></table></figure><p><strong>Android：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/storage/emulated/<span class="number">0</span>/Android/data/com.company.product/files</span><br></pre></td></tr></table></figure><p><strong>iOS：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Documents </span><br></pre></td></tr></table></figure><hr><h3 id="4-Application-temporaryCachePath"><a href="#4-Application-temporaryCachePath" class="headerlink" title="4.Application.temporaryCachePath"></a>4.Application.temporaryCachePath</h3><p><strong>作用：存储临时数据，缓存数据 权限：全平台读写</strong></p><p><strong>Editor：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">var</span>/folders/xx/xx/xx/company/product c:/Users/Administrator/AppData/Local/Temp/company/product</span><br></pre></td></tr></table></figure><p><strong>Android：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/storage/emulated/<span class="number">0</span>/Android/data/com.company.product/cache</span><br></pre></td></tr></table></figure><p><strong>iOS：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Caches</span><br></pre></td></tr></table></figure><hr><h3 id="5-Resource"><a href="#5-Resource" class="headerlink" title="5.Resource"></a>5.Resource</h3><p><strong>作用：存储在此目录下的资源会被压缩，全部被打入最终包。其中的资源只能通过Resource.Load来加载</strong></p><hr><h3 id="6-URL路径"><a href="#6-URL路径" class="headerlink" title="6.URL路径"></a>6.URL路径</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// + Path </span></span><br><span class="line">安卓平台下的Application.streamingAssetsPath已经是url路径了，所以不用再加</span><br></pre></td></tr></table></figure><hr><h3 id="7-工程目录"><a href="#7-工程目录" class="headerlink" title="7.工程目录"></a>7.工程目录</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Environment.CurrentDirectory</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化和反序列化</title>
      <link href="/2021/07/04/051ca11ff8b3/"/>
      <url>/2021/07/04/051ca11ff8b3/</url>
      
        <content type="html"><![CDATA[<h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>概念：</strong></p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protostuff、FST（不支持跨语言）</p><p><strong>序列化：</strong></p><p>把对象转化为可传输的字节序列过程称为序列化。通俗说就是将一个对象的状态（各个属性量）保存起来，然后在适当的时候再获得。</p><p><strong>反序列化：</strong></p><p>把字节序列还原为对象的过程称为反序列化。</p><p><strong>目的：</strong></p><p>以某种存储形式使自定义对象持久化，将对象从一个地方传递到另一个地方，为了对象可以跨平台存储，和进行网络传输（凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化）</p><p><strong>优点：</strong></p><p>只需要创建一个单一类，类中是所有游戏中需要保存和读取的数据变量</p><p>二进制格式化后的文件，其他用户难以进行修改</p><p><strong>缺点：</strong></p><p>阅读性太差，兼容性不高</p><hr><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p><strong>【保存】用二进制格式化的序列化方法来序列化Save对象 ：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BinaryFormatter.Serialize(FileStream _fileStream, Object _object)</span><br></pre></td></tr></table></figure><p><strong>【读取】二进制格式化程序的反序列化方法，将文件流转换为一个save对象 ：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Save save = (Save)BinaryFormatter.Deserialize(FileStream _fileStream);<span class="comment">//这里的Save是自定义类型</span></span><br></pre></td></tr></table></figure><hr><h3 id="数据地址-使用Appication-persistentDataPath-："><a href="#数据地址-使用Appication-persistentDataPath-：" class="headerlink" title="数据地址(使用Appication.persistentDataPath)："></a>数据地址(使用Appication.persistentDataPath)：</h3><p><strong>【Window】</strong></p><p>%userprofile%\AppData\Local\Packages\productname\LocalState</p><p><strong>【IOS】</strong></p><p>&#x2F;var&#x2F;mobile&#x2F;Containers&#x2F;Data&#x2F;Application&#x2F;guid&#x2F;Documents</p><p><strong>【Andriod】</strong></p><p>&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;packagename&#x2F;files旧设备会在SD卡中</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PlayerPrefs</title>
      <link href="/2021/07/04/56a2053ad5a4/"/>
      <url>/2021/07/04/56a2053ad5a4/</url>
      
        <content type="html"><![CDATA[<h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>概念：</strong></p><p>PlayerPrefs是Unity提供了一个用于【数据本地持久化】保存与读取的【类】看一看成字典（Dictionary数据结构）</p><p><strong>原理：</strong></p><p>以key-value【键值对】的形式将数据保存在本地，然后在代码中可以写入、读取、更新数据</p><p><strong>优点：</strong></p><p>储存一些简单的数据，游戏选项设置，用户登陆信息等</p><p><strong>缺点：</strong></p><p>对于大量数据的保存读取会十分乏力</p><hr><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p><strong>保存方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlayerPrefs.SetInt(“key”, <span class="keyword">value</span>);<span class="comment">//SetFloat和SetString也可以</span></span><br></pre></td></tr></table></figure><p><strong>读取方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlayerPrefs.GetInt(“key”)<span class="comment">//GetFloat和GetString也可以</span></span><br></pre></td></tr></table></figure><p><strong>删除所有数据方法：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlayerPrefs.DeletAll()</span><br></pre></td></tr></table></figure><p><strong>删除单一数据：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlayerPrefs.DeleteKey(“keyA”)<span class="comment">//删除key为“keyA”的数据</span></span><br></pre></td></tr></table></figure><p><strong>安全校验：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PlayerPrefs.HasKey(“keyB”)<span class="comment">//返回key为“keyB”的数据，不存在的话返回默认值0</span></span><br><span class="line">PlayerPrefs.Save()：/不推荐。用于在突发退出程序时，保存数据以备恢复时使用，但是会导致程序间断所以不建议</span><br></pre></td></tr></table></figure><hr><h3 id="数据地址："><a href="#数据地址：" class="headerlink" title="数据地址："></a>数据地址：</h3><p><strong>【Window】</strong></p><p>在Windows平台下，存储在注册表的 HKEY_CURRENT_USER\Software【company name】【product name】键下，这里company和product名是在project setting中设置的。</p><p><strong>【Mac】</strong></p><p>存储在~&#x2F;Library&#x2F;Preferences文件夹，名为unity.【company name】.【product name】.plist，这里company和product名是在project Setting中设置的。<br><strong>【Android】</strong></p><p>数据存储（持久化）在设备上。数据保存在SharedPreferences中。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# List集合中获取重复值及集合运算</title>
      <link href="/2021/07/02/582cc94a96f1/"/>
      <url>/2021/07/02/582cc94a96f1/</url>
      
        <content type="html"><![CDATA[<h4 id="一-获取集合内重复值"><a href="#一-获取集合内重复值" class="headerlink" title="一.获取集合内重复值"></a>一.获取集合内重复值</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetDuplicateValue</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisA = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span> &#125;;</span><br><span class="line">    <span class="comment">//方式一 借助字典</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">    lisA.ForEach(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dic.ContainsKey(x))</span><br><span class="line">            dic[x] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dic[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisDupValues = dic.Where(x =&gt; x.Value &gt; <span class="number">0</span>).Select(x =&gt; x.Key).ToList();  <span class="comment">//结果&#123;&quot;A&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisDupValues2 = lisA.GroupBy(x =&gt; x).Where(x =&gt; x.Count() &gt; <span class="number">1</span>).Select(x =&gt; x.Key).ToList(); <span class="comment">//结果&#123;&quot;A&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//方式三 等同于方式二</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisDupValues3 = (<span class="keyword">from</span> r <span class="keyword">in</span> lisA <span class="keyword">group</span> r <span class="keyword">by</span> r <span class="keyword">into</span> g <span class="keyword">where</span> g.Count() &gt; <span class="number">1</span> <span class="keyword">select</span> g.Key).ToList(); <span class="comment">//结果&#123;&quot;A&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-单个集合操作"><a href="#二-单个集合操作" class="headerlink" title="二.单个集合操作"></a>二.单个集合操作</h4><p><strong>1.All、Any</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">All_Any</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisA = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span> &#125;;</span><br><span class="line">    <span class="comment">//All:确定序列中的所有元素是否都满足条件</span></span><br><span class="line">    <span class="built_in">bool</span> all = lisA.All(x =&gt; x.Equals(<span class="string">&quot;B&quot;</span>)); <span class="comment">//结果 false</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Any:确定序列中的任何元素是否存在或满足条件。</span></span><br><span class="line">    <span class="built_in">bool</span> any = lisA.Any(x =&gt; x.Equals(<span class="string">&quot;B&quot;</span>));  <span class="comment">//结果 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.Sum、Average、Distinct、Max、Min、Select、Skip、Take、ToDictionary</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sum_Average_Distinct_Max_Min_Skip_Take_ToDictionary</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; lisA = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Sum:计算数值序列的和。</span></span><br><span class="line">    <span class="built_in">double</span> sum = lisA.Sum();  <span class="comment">//结果 8</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Average:计算数值序列的平均值。</span></span><br><span class="line">    <span class="built_in">double</span> average = lisA.Average();  <span class="comment">//结果 2</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Distinct:返回序列中的非重复元素</span></span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; distinctLisA = lisA.Distinct().ToList();  <span class="comment">//结果 &#123;1,2,3&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Max:返回值序列中的最大值。</span></span><br><span class="line">    <span class="built_in">double</span> max = lisA.Max();  <span class="comment">//结果 3</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Min:返回值序列中的最小值。</span></span><br><span class="line">    <span class="built_in">double</span> min = lisA.Min(); <span class="comment">//结果 1</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Select:将序列中的每个元素投影到新表单。</span></span><br><span class="line">    <span class="keyword">var</span> query = lisA.Select((age, index) =&gt; <span class="keyword">new</span> &#123; index, jn = age + <span class="number">1</span> &#125;); <span class="comment">//结果：&#123;index=0,jn=2&#125;,&#123;index=1,jn=3&#125;,&#123;index=2,jn=3&#125;,&#123;index=3,jn=4&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Skip:跳过序列中指定数量的元素，然后返回剩余的元素。</span></span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; lowerGrades = lisA.Skip(<span class="number">3</span>).ToList();  <span class="comment">//结果 &#123;3&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Take:从序列的开头返回指定数量的相邻元素。</span></span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; task = lisA.Take(<span class="number">2</span>).ToList();  <span class="comment">//结果 &#123;1,2&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//ToDictionary:根据指定的键选择器函数、比较器和元素选择器函数，从 IEnumerable&lt;T&gt; 创建一个 Dictionary&lt;TKey,TValue&gt;。</span></span><br><span class="line">    <span class="keyword">var</span> dic = lisA.Distinct().ToDictionary(x =&gt; x); <span class="comment">//结果 &#123;&#123;1,1&#125;,&#123;2,2&#125;,&#123;3,3&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-集合间运算"><a href="#三-集合间运算" class="headerlink" title="三.集合间运算"></a>三.集合间运算</h4><p><strong>1.Concat、Except、Intersect、Union、Zip</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Concat_Except_Intersect_Union_Zip</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisA = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span> &#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; lisB = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;K&quot;</span> &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Concat:连接两个序列。</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; query = lisA.Concat(lisB).ToList();  <span class="comment">//结果 &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot; ,&quot;A&quot;, &quot;B&quot;, &quot;H&quot;, &quot;K&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Except:生成两个序列的差集。</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; onlyInLisASet = lisA.Except(lisB).ToList();   <span class="comment">//结果 &#123;&quot;C&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Intersect:生成两个序列的交集。</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; duplicates = lisA.Intersect(lisB).ToList();  <span class="comment">//结果 &#123;&quot;A&quot;,&quot;B&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Union:生成两个序列的并集。</span></span><br><span class="line">  </span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; union = lisA.Union(lisB).ToList();  <span class="comment">//结果 &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;H&quot;, &quot;K&quot;&#125;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Zip:将指定函数应用于两个序列的对应元素，以生成结果序列。</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; zip=lisA.Zip(lisB, (first, second) =&gt; first + <span class="string">&quot; &quot;</span> + second).ToList(); <span class="comment">//结果 &#123; &quot;A A&quot;, &quot;B B&quot;, &quot;C H&quot;, &quot;A K&quot; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 多维数组</title>
      <link href="/2021/06/30/6d6d002384aa/"/>
      <url>/2021/06/30/6d6d002384aa/</url>
      
        <content type="html"><![CDATA[<h4 id="1-概念与使用"><a href="#1-概念与使用" class="headerlink" title="1.概念与使用"></a>1.概念与使用</h4><p>C# 支持多维数组。多维数组又称为矩形数组。</p><p>您可以声明一个 <code>string </code>变量的二维数组，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> [,] names;</span><br></pre></td></tr></table></figure><p>或者，您可以声明一个<code> int</code> 变量的三维数组，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [ , , ] m;</span><br></pre></td></tr></table></figure><p>C# 中二维数组的概念不同于 C&#x2F;C++、java 等语言中的二维数组，C# 中的二维数组更像是一个矩阵：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [,] a = <span class="keyword">new</span> <span class="built_in">int</span> [<span class="number">3</span>,<span class="number">4</span>] &#123;</span><br><span class="line"> &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; ,   <span class="comment">/*  初始化索引号为 0 的行 */</span></span><br><span class="line"> &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; ,   <span class="comment">/*  初始化索引号为 1 的行 */</span></span><br><span class="line"> &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;   <span class="comment">/*  初始化索引号为 2 的行 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个如果是从其他语言转来学习 C# 可能会和交错数组的概念弄混。</p><p>如果将二维数组整个理解为矩阵，例如上面的理解为一个 3*4 的矩阵，那么使用的时候就更能理解 a[2,3] 这种引用方式，同时也理解了二维数组的一个性质，每一行元素都是一样的（这一点不同于交错数组）。</p><p>一个遍历多维数组的方法，三重循环：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[, ,] muarr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#123;</span><br><span class="line">  &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> rank = muarr.Rank;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;该多维数组的维数为:&#123;0&#125;&quot;</span>,rank);</span><br><span class="line"><span class="built_in">int</span> rlength = muarr.GetLength(<span class="number">1</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;该多维数组的第二维有&#123;0&#125;个元素&quot;</span>,rlength);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;开始遍历多维数组&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"><span class="built_in">int</span> wei = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; muarr.GetLength(<span class="number">0</span>);i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> js1 = <span class="number">0</span>; js1&lt; muarr.GetLength(<span class="number">1</span>); js1++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> js2 = <span class="number">0</span>;js2&lt;muarr.GetLength(<span class="number">2</span>);js2++)</span><br><span class="line">        &#123;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;最低维度&#123;0&#125;的值为&#123;1&#125;&quot;</span>,wei,muarr[i,js1,js2]);</span><br><span class="line">        &#125;</span><br><span class="line">        ++wei;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-A-与A-的区别"><a href="#2-A-与A-的区别" class="headerlink" title="2.A[][]与A[,]的区别"></a>2.<code>A[][]</code>与<code>A[,]</code>的区别</h4><p>前者为锯齿数组（也叫交错数组），后者是普通的二维数组，最大区别就是锯齿数组的每一行的元素个数（或者叫列数）是可以不一样的，锯齿数组也被叫做数组的数组。比如说：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个锯齿型数组，该数组有两个元素</span></span><br><span class="line"><span class="built_in">int</span>[][] myArray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>][];</span><br><span class="line"><span class="comment">// 其中第一个元素是一个含有五个元素的数组</span></span><br><span class="line"><span class="comment">// 初始化myArray[0]</span></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">// 其中第二个元素是一个含有4个元素的数组</span></span><br><span class="line"><span class="comment">// 初始化myArray[1]</span></span><br><span class="line">myArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>] &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//遍历的时候，除了象普通二维数组一样之外，也可以用foreach</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span>[] i <span class="keyword">in</span> myArray)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> i)</span><br><span class="line">  &#123;</span><br><span class="line">    Console.WriteLine(j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Animator知识点</title>
      <link href="/2021/06/21/80c83f59526c/"/>
      <url>/2021/06/21/80c83f59526c/</url>
      
        <content type="html"><![CDATA[<h3 id="1-SetTrigger在动画过度过程中调用导致动画播放出问题"><a href="#1-SetTrigger在动画过度过程中调用导致动画播放出问题" class="headerlink" title="1.SetTrigger在动画过度过程中调用导致动画播放出问题"></a>1.SetTrigger在动画过度过程中调用导致动画播放出问题</h3><p>问题描述：调用SetTrigger（A）播放A动画，之后进入A动画Idle。然后如果调用B动画SetTrigger（B）播放A到B的过度动画的时候，再SetTrigger（C）到C动画，此时可能因为动画过度问题，导致C动画刚播放， SetTrigger（B）执行，回到了B动画。</p><p>解决方案：1.ResetTrigger重置被激活的Trigger。2.用Bool</p><hr><h3 id="2-旧动画升级版本后，在新Unity里面动作扭曲变形问题"><a href="#2-旧动画升级版本后，在新Unity里面动作扭曲变形问题" class="headerlink" title="2.旧动画升级版本后，在新Unity里面动作扭曲变形问题"></a>2.旧动画升级版本后，在新Unity里面动作扭曲变形问题</h3><p>解决方案：动作扭曲变形，需要勾选 PlayerSettings-&gt;Player-&gt;Legacy-&gt;Clamp BlendShapes</p><hr><h3 id="3-动作播放某一帧在Game视口显示不出来的问题"><a href="#3-动作播放某一帧在Game视口显示不出来的问题" class="headerlink" title="3.动作播放某一帧在Game视口显示不出来的问题"></a>3.动作播放某一帧在Game视口显示不出来的问题</h3><p>解决方案：</p><p>1.Animator组件 Culling Mode改为Always Animate</p><p>2.动作下面SkinnedMeshRenderer组件的Update When Offscreen勾上</p><hr><h3 id="4-重复调用Animator-Play动作无法重复播放问题"><a href="#4-重复调用Animator-Play动作无法重复播放问题" class="headerlink" title="4.重复调用Animator.Play动作无法重复播放问题"></a>4.重复调用Animator.Play动作无法重复播放问题</h3><p>解决方案:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Animator Animtor;</span><br><span class="line">Animtor.Play(<span class="string">&quot;anim_1&quot;</span>);<span class="comment">//只传1个动画名参数，动画只会播放一次，不能重复播放</span></span><br><span class="line">Animtor.Play(<span class="string">&quot;anim_1&quot;</span>， <span class="number">0</span>，<span class="number">0f</span>);<span class="comment">//用此方法可以重复播放，因为是指定进度播放</span></span><br></pre></td></tr></table></figure><p>API介绍：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1:状态名称</span></span><br><span class="line"><span class="comment">//参数2:层级索引</span></span><br><span class="line"><span class="comment">//参数3:动画播放进度(0~1)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span> (<span class="params"><span class="built_in">string</span> stateName, <span class="built_in">int</span> layer= <span class="number">-1</span>, <span class="built_in">float</span> normalizedTime= <span class="built_in">float</span>.NegativeInfinity</span>)</span>;</span><br><span class="line"><span class="comment">//参数1:z</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span> (<span class="params"><span class="built_in">int</span> stateNameHash, <span class="built_in">int</span> layer= <span class="number">-1</span>, <span class="built_in">float</span> normalizedTime= <span class="built_in">float</span>.NegativeInfinity</span>)</span>; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Animator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Animator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TextMeshPro字体图集生成</title>
      <link href="/2021/06/21/8d30a72e97c1/"/>
      <url>/2021/06/21/8d30a72e97c1/</url>
      
        <content type="html"><![CDATA[<p><strong>点击Window-&gt;TextMeshPro-&gt;Font Asset Creator</strong></p><p>将字体拖入<code>Source Font File</code>里头，修改图集大小<code>（Atlas Resolution）</code>，将<code>Chracter Set</code>设置为<code>Characters from File</code>，将<code>Rneder Mode</code>改成<code>SDF8</code></p><img src="/2021/06/21/8d30a72e97c1/1-1.png" class="" title="1-1"><p><strong><font color = red>这里需要注意：字体文件需要是英文名才可以生成，不然会报错，同时把我们需要的文本放入Character File里头（文本必须是txt后缀，因为我们选择了Characters from File模式）</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> TextMeshPro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> TextMeshPro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Stats 面板说明</title>
      <link href="/2021/06/21/fa77d011e189/"/>
      <url>/2021/06/21/fa77d011e189/</url>
      
        <content type="html"><![CDATA[<img src="/2021/06/21/fa77d011e189/1-1.png" class="" title="1-1"><h3 id="1-Time-per-frame-and-FPS-每帧的时间和FPS"><a href="#1-Time-per-frame-and-FPS-每帧的时间和FPS" class="headerlink" title="1.Time per frame and FPS(每帧的时间和FPS):"></a>1.Time per frame and FPS(每帧的时间和FPS):</h3><p><strong>处理和渲染一个游戏帧（以及由此产生的FPS）所花费的时间。请注意，此数字仅包括进行帧更新和渲染 Game 视图所用的时间；不包括在 Editor 中绘制 Scene 视图、检视面板处理和其他仅限于 Editor 的处理所花费的时间。</strong></p><h3 id="2-Batches-绘制调用"><a href="#2-Batches-绘制调用" class="headerlink" title="2.Batches(绘制调用):"></a>2.Batches(绘制调用):</h3><p><strong>“批处理 (Batching)”可让引擎尝试将多个对象的渲染组合到一个内存块中以便减少由于资源切换而导致的 CPU 开销。</strong></p><h3 id="3-Saved-by-batching-合并的批次数"><a href="#3-Saved-by-batching-合并的批次数" class="headerlink" title="3.Saved by batching(合并的批次数):"></a>3.Saved by batching(合并的批次数):</h3><p><strong>为确保良好的批处理，应尽可能在不同对象之间共享材质。更改渲染状态会将批次分成具有相同状态的组。</strong></p><h3 id="4-Tris-and-Verts-三角面和顶点数"><a href="#4-Tris-and-Verts-三角面和顶点数" class="headerlink" title="4.Tris and Verts(三角面和顶点数):"></a>4.Tris and Verts(三角面和顶点数):</h3><p><strong>绘制的三角形和顶点的数量。在针对低端硬件进行优化时，这一点非常重要。</strong></p><h3 id="5-Screen-屏幕"><a href="#5-Screen-屏幕" class="headerlink" title="5.Screen(屏幕):"></a>5.Screen(屏幕):</h3><p><strong>屏幕大小以及抗锯齿级别和内存使用情况。</strong></p><h3 id="6-SetPass-Pass通道设置"><a href="#6-SetPass-Pass通道设置" class="headerlink" title="6.SetPass(Pass通道设置):"></a>6.SetPass(Pass通道设置):</h3><p><strong>渲染 pass 的数量。每个 pass 都需要 Unity 运行时绑定一个新的着色器，这可能会带来 CPU 开销。</strong></p><h3 id="7-Visible-Skinned-Meshes-可视蒙皮网格"><a href="#7-Visible-Skinned-Meshes-可视蒙皮网格" class="headerlink" title="7.Visible Skinned Meshes(可视蒙皮网格):"></a>7.Visible Skinned Meshes(可视蒙皮网格):</h3><p><strong>渲染的蒙皮网格的数量。</strong></p><h3 id="8-Animations-动画"><a href="#8-Animations-动画" class="headerlink" title="8.Animations(动画):"></a>8.Animations(动画):</h3><p><strong>播放的动画的数量。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 渲染相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity如何打开“选择文件或文件夹”对话框窗口</title>
      <link href="/2021/06/14/680dbcec0318/"/>
      <url>/2021/06/14/680dbcec0318/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><img src="/2021/06/14/680dbcec0318/6-1.gif" class="" title="6-1"><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>关键类： <code>EditorUtility</code><br>关键方法： <code>OpenFilePanel</code>，<code>OpenFilePanelWithFilters</code>， <code>OpenFolderPanel</code><br>方法说明：<br>1.<code>OpenFilePanel</code>：显示“打开文件”对话框并返回所选的路径名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：对话框名称</span><br><span class="line">参数<span class="number">2</span>：默认目录</span><br><span class="line">参数<span class="number">3</span>：指定后缀文件，如果要只显示.meta后缀的文件,直接是后缀的全名meta，*.* 代表显示显示所有类型的文件</span><br><span class="line">返回值：被选中的文件绝对路径地址</span><br><span class="line">EditorUtility.OpenFilePanel(<span class="string">&quot;选择文件&quot;</span>, FilePath, <span class="string">&quot;xlsx&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.<code>OpenFilePanelWithFilters</code>：显示“打开文件”对话框并返回所选的路径名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：对话框名称</span><br><span class="line">参数<span class="number">2</span>：默认目录</span><br><span class="line">参数<span class="number">3</span>：文件扩展名格式，必须要<span class="number">2</span>的倍数，前者显示名称，后者为文件后缀格式</span><br><span class="line">返回值：被选中的文件绝对路径地址</span><br><span class="line">EditorUtility.OpenFilePanelWithFilters(<span class="string">&quot;选择文件&quot;</span>, FilePath, <span class="keyword">new</span> [] &#123;<span class="string">&quot;Excel格式文本&quot;</span>,<span class="string">&quot;xlsx&quot;</span>, <span class="string">&quot;All files&quot;</span>, <span class="string">&quot;*&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>3.<code>OpenFolderPanel</code>：显示“打开文件夹”对话框并返回所选的路径名称</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：对话框名称</span><br><span class="line">参数<span class="number">2</span>：默认目录</span><br><span class="line">参数<span class="number">3</span>：打开对话框后默认输入的字符串</span><br><span class="line">返回值：被选中的文件夹绝对路径地址</span><br><span class="line">EditorUtility.OpenFolderPanel(<span class="string">&quot;选择文件夹&quot;</span>, FoldPath,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExcelReadWriteWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FilePath;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FoldPath;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;Editor Extension/Excel&quot;</span>, priority = 3)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ExcelReadWriteWindow w = EditorWindow.GetWindow&lt;ExcelReadWriteWindow&gt;(<span class="string">&quot;Excel读写测试&quot;</span>);</span><br><span class="line">        w.Show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        EditorGUILayout.BeginVertical();</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.BeginHorizontal();</span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;读取路径&quot;</span>, GUILayout.Width(<span class="number">60f</span>));</span><br><span class="line">        FilePath = EditorGUILayout.TextField(FilePath);</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(EditorGUIUtility.IconContent(<span class="string">&quot;Profiler.UIDetails&quot;</span>), GUILayout.Width(<span class="number">30f</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            FilePath = EditorUtility.OpenFilePanel(<span class="string">&quot;选择文件&quot;</span>, FilePath, <span class="string">&quot;xlsx&quot;</span>);</span><br><span class="line">            GUI.FocusControl(<span class="literal">null</span>);</span><br><span class="line">            Repaint();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.EndHorizontal();</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.BeginHorizontal();</span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;生成路径&quot;</span>, GUILayout.Width(<span class="number">60f</span>));</span><br><span class="line">        EditorGUI.BeginChangeCheck();</span><br><span class="line">        FoldPath = EditorGUILayout.TextField(FoldPath);</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(EditorGUIUtility.IconContent(<span class="string">&quot;Profiler.UIDetails&quot;</span>), GUILayout.Width(<span class="number">30f</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            FoldPath = EditorUtility.OpenFolderPanel(<span class="string">&quot;选择文件夹&quot;</span>, FoldPath, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            GUI.FocusControl(<span class="literal">null</span>);</span><br><span class="line">            Repaint();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.EndHorizontal();</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.EndHorizontal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IMGUI编辑器扩展小知识点</title>
      <link href="/2021/06/14/7acff3467852/"/>
      <url>/2021/06/14/7acff3467852/</url>
      
        <content type="html"><![CDATA[<h3 id="1-如何通过代码取消控件的聚焦"><a href="#1-如何通过代码取消控件的聚焦" class="headerlink" title="1.如何通过代码取消控件的聚焦"></a>1.如何通过代码取消控件的聚焦</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GUI.FocusControl(<span class="literal">null</span>);<span class="comment">//将当前聚焦控制清空，如果是多个控件有复杂交互情况时，需要为控件指定一个聚焦名字</span></span><br><span class="line">Repaint();<span class="comment">//重新绘制</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-常用变量特性"><a href="#2-常用变量特性" class="headerlink" title="2.常用变量特性"></a>2.常用变量特性</h3><p><strong>变量级别</strong></p><ol><li>**<code>[Serializefield]</code>**：如果想要给一个unity特有的私有变量手动赋值时使用。</li><li>**<code>[Header(&quot;XXXX&quot;)]</code>**：unity脚本中的变量在<code>Inspector</code>面板中时顺序排列的，如果想在特定的变量上加一个说明时可以使用。</li><li>**<code>[HideInInspector]</code>**：如果想让某个公有变量不在<code>Inspector</code>面板中显示时使用。</li><li>**<code>[Range(float min,float max)]</code>**：如果想让你的数值变量由滑动条改变时使用。</li><li>**<code>[MultilineAttribute] / [TextArea]</code>**：如果想让你的字符串成文可输入的多行文本时使用 。</li><li>**<code>[Space(float)]</code>**：在变量间设置间隔。</li><li>**<code>[Tooltip(&quot;XXXX&quot;)]</code>**：当鼠标悬停在变量名上时会出现XXX的提示。</li><li>**<code>[FormerlySerializedAs(&quot;XXX&quot;)]</code>**：总以XXX的命名来序列化变量，即使变量现有名称改变，也不会丢失序列化信息。</li></ol><p><strong>函数级别</strong></p><ol><li>**<code>[MenuItem(&quot;XX/XXXX&quot;)]</code>**：在Editor中创建菜单项，点击后执行该方法，可以利用该属性做很多扩展功能。 需要方法为static。你可以在菜单栏中找到你自定义的菜单项。</li><li>**<code>[ContextMenu(function name)]</code>**：可以将函数添加到<code>contextMenu</code>下。就是组件右上角小齿轮那里。可以放参数Reset之类一键操作的函数。</li></ol><p><strong>类级别</strong></p><ol><li>**<code>[RequireComponent(typeof(XXX))]</code>**：如果在写脚本的时候，需要XXX组件而不想手动添加时使用。</li><li>**<code>[AddComponentMenu(&quot;XX/XXXX&quot;)]</code>**：加在脚本class程序块之上，意为将XXXX脚本放在XX的级联菜单下。在Inspector中点击<code>AddComponent</code>按钮就可以发现自定义的级联菜单</li><li>**<code>[DisallowMultipleComponent]</code>**：可以避免在同一个物体上添加相同脚本。</li><li>**<code>[ExecuteInEditMode]</code>**：使得脚本在Editor模式下也能执行。</li><li>**<code>[RequireComponent(typeof(XXX))]</code>**：当该脚本被添加到一个<code>GameObject</code>上的时候，如果这个<code>GameObject</code>不含有依赖的<code>Component</code>，会自动添加该<code>Component</code>。且该<code>Componet</code>不可被移除。</li><li>**<code>[SelectionBase]</code>**：当你希望在点击子物体时在<code>Hierarchy</code>选中根物体时使用。</li><li><strong><code>[CanEditMultipleObjects]</code></strong> ：当你希望你的脚本能够被多选操作时使用。这需要引用<code>UnityEditor</code>命名空间。</li><li>**<code>[CustumEditor(typeof(XXX))]</code>**：这可以使脚本转变成你的自定义的XXX组件。需要是你的脚本继承自<code>Editor</code>。</li><li><strong><code>[DefaultExecutionOrder(XXX)]</code></strong>:代码执行优先级设置，XXX是当前的优先程度，数值越小优先程度越高</li></ol><hr><h3 id="3-在编辑器上绘制二维字符数组"><a href="#3-在编辑器上绘制二维字符数组" class="headerlink" title="3.在编辑器上绘制二维字符数组"></a>3.在编辑器上绘制二维字符数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[,] DrawArray(<span class="built_in">string</span>[,] array, <span class="built_in">float</span> width = <span class="number">40f</span>, <span class="built_in">float</span> height = <span class="number">20f</span>)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span>[,] newArray = array;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">    GUILayout.BeginVertical();</span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.BeginHorizontal();</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; array.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                newArray[i, j] = GUILayout.TextField(array[i, j], GUILayout.Width(width), GUILayout.Height(height));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        GUILayout.EndHorizontal();</span><br><span class="line">    &#125;</span><br><span class="line">    GUILayout.EndVertical();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-删除GameObject上面missing的脚本"><a href="#4-删除GameObject上面missing的脚本" class="headerlink" title="4.删除GameObject上面missing的脚本"></a>4.删除GameObject上面missing的脚本</h3><p>1.2019之前的版本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> components = go.GetComponents&lt;Component&gt;();<span class="comment">//获取所有组件</span></span><br><span class="line"><span class="keyword">var</span> serializedObject = <span class="keyword">new</span> SerializedObject(go);<span class="comment">//获取serializedObject对象</span></span><br><span class="line"><span class="keyword">var</span> prop = serializedObject.FindProperty(<span class="string">&quot;m_Component&quot;</span>);<span class="comment">//找到要删除的组件路径</span></span><br><span class="line">prop.DeleteArrayElementAtIndex(要删除的Missing Component下标);</span><br></pre></td></tr></table></figure><p>2.2019及之后版本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameObjectUtility.RemoveMonoBehavioursWithMissingScript(obj）;<span class="comment">//通过调用API删除</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-查看字段路径地址-Property-Path"><a href="#5-查看字段路径地址-Property-Path" class="headerlink" title="5.查看字段路径地址(Property Path)"></a>5.查看字段路径地址(Property Path)</h3><p>在Unity <code>Inspector</code>面板里头，鼠标放在想要查看的字段上面<strong>按住shift+右键</strong>再<strong>点击Print Property Path</strong>可以看到<strong>字段路径地址(Property Path)</strong></p><hr><h3 id="6-Unity如何获取所有场景中的物体"><a href="#6-Unity如何获取所有场景中的物体" class="headerlink" title="6. Unity如何获取所有场景中的物体"></a>6. Unity如何获取所有场景中的物体</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;GameObject&gt; <span class="title">GetAllSceneGameObject</span>(<span class="params">Scene scene</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;GameObject&gt; list = <span class="keyword">new</span> List&lt;GameObject&gt;();</span><br><span class="line">    GameObject[] rootGos = scene.GetRootGameObjects();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> go <span class="keyword">in</span> rootGos)</span><br><span class="line">    &#123;</span><br><span class="line">        Transform[] childs = go.transform.GetComponentsInChildren&lt;Transform&gt;(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> child <span class="keyword">in</span> childs)</span><br><span class="line">        &#123;</span><br><span class="line">            list.Add(child.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line">Scene scene = SceneManager.GetActiveScene();<span class="comment">//获取当前激活的场景</span></span><br><span class="line">List&lt;GameObject&gt; objs = GetAllSceneGameObject(scene);</span><br></pre></td></tr></table></figure><hr><h3 id="7-Unity如何实现Editor模式下的超链接跳转功能"><a href="#7-Unity如何实现Editor模式下的超链接跳转功能" class="headerlink" title="7.Unity如何实现Editor模式下的超链接跳转功能"></a>7.Unity如何实现Editor模式下的超链接跳转功能</h3><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>遵循应用程序当前平台和环境的权限和限制，打开指定 URL。这采用不同方式进行处理（具体取决于 URL 的性质），并具有不同的安全限制（具体取决于运行时平台）。</p><p>​        <strong>注意</strong>：<em>此方法不仅可以用于打开网页，因此具有必须了解的重要安全隐患。</em> </p><p>最常见的是，此方法用于打开 HTTP（网页）URL。如果提供网页地址作为此方法的参数，则网页会在默认浏览器中打开。它还会将浏览器应用程序带到前台。</p><p>除了用于网页地址的 HTTP 协议，URL 中还可以使用其他类型的协议，如文件传输 (FTP)、电子邮件 (mailto)、数据库访问 (JDBC)  以及可能特定于某些平台的许多其他协议。在某些平台上，可以在 Unity 中使用 <code>OpenURL</code> 执行许多不同类型的任务。</p><p>因此，<code>OpenURL</code> 命令可能会<strong>异常强大</strong>。在某些平台上，能够通过平台和安全沙盒所支持的任何协议打开本地文件、运行命令或打开连接。</p><p><code>OpenURL</code> 方法使用与应用程序本身相同的权限来运行。例如，如果应用程序作为 WebGL 播放器在桌面 Web  浏览器中运行，则无法访问计算机上的本地文件，因为 WebGL 平台本身在阻止该操作的安全沙盒内运行。如果是以其他平台为目标（如独立 EXE  应用程序），则应用程序运行时的安全限制较少并且没有安全沙盒，因此此方法更加强大。</p><p><strong>因此，必须非常小心不要向此函数提供字符串，这可能会由第三方恶意制作或修改。</strong> </p><p>在独立平台上，应考虑此方法具有与 <a href="https://en.wikipedia.org/wiki/Eval.html">eval</a> 类型函数（在许多其他编程语言中存在）相似的安全隐患。</p><p>如果应用程序使用<code> OpenURL</code> 打开来自第三方或使用任何用户提供的数据组合在一起的 URL 字符串，则用户提供的数据应视为不受信任，可能用于在应用程序本身的相同权限下运行任意代码。 必须净化不受信任的数据并验证它是否为应用程序的预期输入。</p><p> <strong>Android：</strong>由于 Android 7.0 中的安全更改（<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes#sharing-files.html">更多信息</a>），<code>Application.OpenURL </code>无法再用于打开本地应用程序文件，需要使用 <a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html">FileProvider</a>，这可用于将文件与其他应用程序共享。</p><p><strong>iOS：</strong><code>Application.OpenURL</code> 无法用于打开本地文件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数：要打开的 URL</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenURL</span> (<span class="params"><span class="built_in">string</span> url</span>)</span>; </span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel</title>
      <link href="/2021/06/13/a791c806a58f/"/>
      <url>/2021/06/13/a791c806a58f/</url>
      
        <content type="html"><![CDATA[<h2 id="EPPlus-dll的使用"><a href="#EPPlus-dll的使用" class="headerlink" title="EPPlus.dll的使用"></a>EPPlus.dll的使用</h2><blockquote><p>注：当前Excel数据读写，用到开源插件<code>EPPlus.dll</code>（注意，5.0以上的版本换了协议，从LGPL换成Polyform Noncommercial 1.0.0）</p><p><a href="https://github.com/JanKallman/EPPlus">旧版github地址</a></p><p><a href="https://www.epplussoftware.com/zh/">官网地址</a></p><p><a href="https://www.nuget.org/packages/EPPlus/4.5.3.3">dll下载地址</a></p></blockquote><p>学习之前有四点<strong>注意事项</strong>：<br><font color = green><strong>①.1个Excel文件中，有n张表格；1张表格中，有n个单元格。</strong></font></p><p><font color = green><strong>②.在EPPlus中，Excel文件叫做“ExcelPackage”，表格叫做“ExcelWorkSheet”，单元格叫做“Cell”</strong></font></p><p><font color = green><strong>③.在EPPlus中，索引都是从1开始的（表的索引，行列的索引都是从1开始）</strong></font></p><p><font color = green><strong>④.EPPlus并不支持.xls格式的表格文档</strong></font></p><p><font color = green><strong>⑤.目前测试颜色输出，发现只能输出标准色，其他颜色无法输出</strong></font></p><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><p>表格数据读取</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[,] ReadExcel(<span class="built_in">string</span> filePath, <span class="built_in">int</span> workSheetIndex = <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span>[,] arrays;</span><br><span class="line">    <span class="keyword">using</span> (ExcelPackage excelPackage = <span class="keyword">new</span> ExcelPackage(<span class="keyword">new</span> FileStream(filePath,FileMode.Open,FileAccess.Read,FileShare.ReadWrite))) <span class="comment">//使用这种读取方式，可以在表格开启的状态下读取数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> workbook = excelPackage.Workbook.Worksheets[workSheetIndex];<span class="comment">//获取指定表格</span></span><br><span class="line">        <span class="comment">//最大行</span></span><br><span class="line">        <span class="built_in">int</span> maxRowNum = workbook.Dimension.End.Row;</span><br><span class="line">        <span class="comment">//最大列</span></span><br><span class="line">        <span class="built_in">int</span> maxColumnNum = workbook.Dimension.End.Column;</span><br><span class="line">        <span class="built_in">int</span> columns = maxColumnNum;</span><br><span class="line">        <span class="built_in">int</span> rows = maxRowNum;</span><br><span class="line">        arrays = <span class="keyword">new</span> <span class="built_in">string</span>[columns,rows];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= columns; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= rows; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                arrays[i - <span class="number">1</span>, j - <span class="number">1</span>] = workbook.Cells[i, j].GetValue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-进阶使用1"><a href="#2-1-进阶使用1" class="headerlink" title="2-1.进阶使用1"></a>2-1.<a href="(https://www.cnblogs.com/rumeng/p/3785748.html)">进阶使用1</a></h3><h3 id="2-2-进阶使用2"><a href="#2-2-进阶使用2" class="headerlink" title="2-2.进阶使用2"></a>2-2.<a href="https://blog.csdn.net/weixin_43925843/article/details/106133966">进阶使用2</a></h3>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# IEnumerator与IEnumerable</title>
      <link href="/2021/06/10/5546dd18e905/"/>
      <url>/2021/06/10/5546dd18e905/</url>
      
        <content type="html"><![CDATA[<h4 id="1-IEnumerable接口"><a href="#1-IEnumerable接口" class="headerlink" title="1.IEnumerable接口"></a>1.IEnumerable接口</h4><p><code>IEnumerable</code>是所有可迭代非范型类的基础接口。<code>IEnumerable</code>包括一个方法<code>GetEnumerator</code>方法，方法返回一个<code>IEnumerator</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>返回循环访问集合的枚举数。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>一个可用于循环访问集合的对象。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">GetEnumerator</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-IEnumerator"><a href="#2-IEnumerator" class="headerlink" title="2.IEnumerator"></a>2.IEnumerator</h4><p><code>IEnumerator</code>是所有非范型迭代器的基础接口。<code>foreach</code>语句隐藏了C#迭代器的复杂实现。推荐使用<code>foreach</code>代替直接操作迭代器。</p><p>迭代器可以读取集合中的数据，但是不能从底层修改集合</p><p>初始的时候，迭代器定位在集合的第一个元素前面，在读取<code>Current</code>值之前需要调用一次<code>MoveNext</code>将迭代器驱动到第一个元素的位置。<code>Current</code>一直返回相同的元素直到调用了<code>MoveNext</code>或者<code>Reset</code>方法。<code>MoveNext</code>将<code>Current</code>推进到下一个元素。<br>如果<code>MoveNext</code>之后<code>position</code>超出了集合的范围，<code>MoveNext</code>将返回<code>false</code>。<br>通过调用<code>Reset</code>将<code>Current</code>重置到第一个元素之前。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>将枚举数推进到集合的下一个元素。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;T:System.InvalidOperationException&quot;&gt;</span>集合在枚举器创建后被修改。<span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">MoveNext</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取集合中位于枚举数当前位置的元素。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>集合中位于枚举数当前位置的元素。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="built_in">object</span> Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;T:System.InvalidOperationException&quot;&gt;</span>集合在枚举器创建后被修改。<span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例说明：</p><p><strong>1.首先声明我们要迭代遍历的基础对象类型<code>Person</code>类</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">string</span> firstName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">string</span> lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, <span class="built_in">string</span> lastName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.之后声明迭代器类<code>PersonEnumerator</code>以及迭代对象类<code>PersonEnumerable</code></strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 迭代器类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonEnumerator</span> : <span class="title">IEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Person[] _people;</span><br><span class="line">    <span class="built_in">int</span> position = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonEnumerator</span>(<span class="params">Person[] list</span>)<span class="comment">//传入的是基础迭代对象数组</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        _people = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> IEnumerator.Current <span class="comment">//获取当前的项（只读属性）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> Current; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person Current</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _people[position];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IndexOutOfRangeException)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()<span class="comment">//下标向下一个成员位置移动</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        position++;</span><br><span class="line">        <span class="keyword">return</span> (position &lt; _people.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()<span class="comment">//将下标重置到第一个成员前面</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        position = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 迭代对象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonEnumerable</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Person[] _people;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonEnumerable</span>(<span class="params">Person[] pArray</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _people = <span class="keyword">new</span> Person[pArray.Length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pArray.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _people[i] = pArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现接口方法，返回迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersonEnumerator(_people);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.最后实现Main方法，运行测试</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person[] peopleArray =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Smith&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Johnson&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Person(<span class="string">&quot;Sue&quot;</span>, <span class="string">&quot;Robon&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//下面两种写法是一样的，foreach是一种语法糖，简化了遍历其中的具体实现。被遍历的类通过实现IEnumerable接口和实现一个IEnumerator枚举器实现遍历功能。</span></span><br><span class="line">        <span class="comment">//用foreach迭代</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;----------&quot;</span> + <span class="string">&quot;foreach迭代&quot;</span> + <span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        PersonEnumerable personEnumerableList = <span class="keyword">new</span> PersonEnumerable(peopleArray);<span class="comment">//创建迭代对象</span></span><br><span class="line">        <span class="keyword">foreach</span> (Person person <span class="keyword">in</span> personEnumerableList)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(person.firstName + person.lastName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//用while迭代</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;----------&quot;</span> + <span class="string">&quot;while迭代&quot;</span> + <span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        IEnumerator enumerator = personEnumerableList.GetEnumerator();<span class="comment">//获取迭代器</span></span><br><span class="line">        <span class="keyword">while</span> (enumerator.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Person person = (Person) enumerator.Current;</span><br><span class="line">            <span class="keyword">if</span> (person != <span class="literal">null</span>) Debug.Log(person.firstName + person.lastName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = "blue">输出：</font><br><font color = "blue"><code>----------foreach迭代----------</code></font><br><font color = "blue"><code>JohnSmith</code></font><br><font color = "blue"><code>TomJohnson</code></font><br><font color = "blue"><code>SueRobon</code></font><br><font color = "blue"><code>----------while迭代----------</code></font><br><font color = "blue"><code>JohnSmith</code></font><br><font color = "blue"><code>TomJohnson</code></font><br><font color = "blue"><code>SueRobon</code></font></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这两个接口字面上很相似，其实也有一定的关联。<br>一个类A实现了<code>IEnumerator</code>，也就是实现<code>Current</code>属性，<code>MoveNext</code>方法，<code>Reset</code>方法。只要实现这些方法，这个类A就可以用<code>foreach</code>这种语法了。<br><code>IEnumerable</code>接口主要实现了<code>GetEnumerator</code>方法，该方法返回一个<code>IEnumerator</code>。一个类A实现<code>IEnumerable</code>接口后，调用<code>foreach</code>语法的时候，会自动的调用<code>GetEnumerator</code>方法，然后在这个<code>IEnumerator</code>中遍历。<br>所以只要实现两者之中任意一个接口，就可以用<code>foreach</code>语法了。但是本质上都是对<code>IEnumerator</code>做<code>foreach</code>。</p><p>只是一个是<font color = red><strong>直接（IEnumerator）</strong></font>，一个是<font color = red><strong>间接（IEnumerable）</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态修改ParticleSystem中的相关参数</title>
      <link href="/2021/06/08/58784fc4d59f/"/>
      <url>/2021/06/08/58784fc4d59f/</url>
      
        <content type="html"><![CDATA[<h3 id="1-动态修改粒子参数（Emission）"><a href="#1-动态修改粒子参数（Emission）" class="headerlink" title="1.动态修改粒子参数（Emission）"></a>1.动态修改粒子参数（Emission）</h3><blockquote><p><code>ParticleSystem.emission</code>的<code>rateOverTime</code>属性不能通过直接设置值修改，这里只能采取反射的方式去修改</p></blockquote><p>①.首先，通过反射获取相应的属性类型:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ParticleSystem _particleSystem;</span><br><span class="line"><span class="keyword">private</span> System.Reflection.PropertyInfo _property;</span><br><span class="line"></span><br><span class="line">Type type = _particleSystem.emission.GetType();</span><br><span class="line">_property = type.GetProperty(<span class="string">&quot;rateOverTime&quot;</span>);</span><br></pre></td></tr></table></figure><p>②.然后，通过获取值的方式，将获取到的值进行修正成自己想要的数值，使用<code>SetValue</code>设置进去:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emission = _particleSystem.emission;</span><br><span class="line"><span class="keyword">var</span> f = emission.rateOverTime;</span><br><span class="line">f.constant = count;</span><br><span class="line">_property?.SetValue(emission,f,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> ParticleSystem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ParticleSystem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何根据缓动函数生成AnimationCurve</title>
      <link href="/2021/06/07/a2b0c71b5a44/"/>
      <url>/2021/06/07/a2b0c71b5a44/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><img src="/2021/06/07/a2b0c71b5a44/5-1.gif" class="" title="5-1"><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><blockquote><p>说明1：这里为了方便显示，所以用了Odin插件快速绘制Inspector面板</p><p>说明2：主要实现就是将缓动函数在某个区间范围内[0,1]，均分成指定数量的点，之后对每个点的索引进行切线平滑处理，就能达到缓动函数生成AnimationCurve的效果了</p></blockquote><p>关键类：<code>AnimationCurve</code><br>关键方法：<code>SmoothTangents</code><br>方法说明：<br>1.<code>SmoothTangents</code>：平滑切线</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：要平滑的关键帧的索引</span><br><span class="line">参数<span class="number">2</span>：应用于关键帧切线的平滑权重  <span class="comment">//注意：当权重为0时，可以使切线均匀</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SmoothTangents</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">float</span> weight</span>)</span>; </span><br></pre></td></tr></table></figure><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 缓动函数转换成AnimationCurve</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ease2AnimationCurve</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>&gt; _curFunc;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">LabelText(<span class="string">&quot;缓动函数&quot;</span>)</span>] <span class="keyword">public</span> Easingcurve CurveIndex;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">LabelText(<span class="string">&quot;转换曲线&quot;</span>)</span>] <span class="keyword">public</span> AnimationCurve Curve = AnimationCurve.Linear(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    [<span class="meta">LabelText(<span class="string">&quot;曲线点数&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">int</span> Count = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Button(<span class="string">&quot;曲线生成&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpawnCurve</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _curFunc = _easingCurveFuncs[(<span class="built_in">int</span>) CurveIndex];</span><br><span class="line">        Curve = GenerateCurve(_curFunc, Count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AnimationCurve <span class="title">GenerateCurve</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>&gt; easeFunc, <span class="built_in">int</span> resolution</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> curve = <span class="keyword">new</span> AnimationCurve();</span><br><span class="line">        <span class="built_in">float</span> time = <span class="number">0f</span>;</span><br><span class="line">        <span class="built_in">float</span> perValue = <span class="number">1.0f</span> / resolution;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resolution; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == resolution - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                time = <span class="number">1f</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = easeFunc(time);</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> Keyframe(time, <span class="keyword">value</span>);</span><br><span class="line">            time += perValue;</span><br><span class="line">            curve.AddKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resolution; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            curve.SmoothTangents(i, <span class="number">0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> curve;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Easingcurve</span><br><span class="line">    &#123;</span><br><span class="line">        Linear = <span class="number">0</span>,</span><br><span class="line">        InSine,</span><br><span class="line">        OutSine,</span><br><span class="line">        InOutSine,</span><br><span class="line">        InQuad,</span><br><span class="line">        OutQuad,</span><br><span class="line">        InOutQuad,</span><br><span class="line">        InCubic,</span><br><span class="line">        OutCubic,</span><br><span class="line">        InOutCubic,</span><br><span class="line">        InQuart,</span><br><span class="line">        OutQuart,</span><br><span class="line">        InOutQuart,</span><br><span class="line">        InQuint,</span><br><span class="line">        OutQuint,</span><br><span class="line">        InOutQuint,</span><br><span class="line">        InExpo,</span><br><span class="line">        OutExpo,</span><br><span class="line">        InOutExpo,</span><br><span class="line">        InCirc,</span><br><span class="line">        OutCirc,</span><br><span class="line">        InOutCirc,</span><br><span class="line">        InBack,</span><br><span class="line">        OutBack,</span><br><span class="line">        InOutBack,</span><br><span class="line">        InElastic,</span><br><span class="line">        OutElastic,</span><br><span class="line">        InOutElastic,</span><br><span class="line">        InBounce,</span><br><span class="line">        OutBounce,</span><br><span class="line">        InOutBounce,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 缓动函数曲线回调集合</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>&gt;[] _easingCurveFuncs =</span><br><span class="line">    &#123;</span><br><span class="line">        Linear, InSine, OutSine, InOutSine,</span><br><span class="line">        InQuad, OutQuad, InOutQuad, InCubic,</span><br><span class="line">        OutCubic, InOutCubic, InQuart, OutQuart,</span><br><span class="line">        InOutQuart, InQuint, OutQuint, InOutQuint,</span><br><span class="line">        InExpo, OutExpo, InOutExpo, InCirc,</span><br><span class="line">        OutCirc, InOutCirc, InBack, OutBack,</span><br><span class="line">        InOutBack, InElastic, OutElastic, InOutElastic,</span><br><span class="line">        InBounce, OutBounce, InOutBounce,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> PI = Mathf.PI;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> c1 = <span class="number">1.70158f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> c2 = c1 * <span class="number">1.525f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> c3 = c1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> c4 = PI * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> c5 = PI * <span class="number">2</span> / <span class="number">4.5f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> n1 = <span class="number">7.5625f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">float</span> d1 = <span class="number">2.75f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">cos</span>(<span class="params"><span class="built_in">float</span> f</span>)</span> =&gt; Mathf.Cos(f);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">sin</span>(<span class="params"><span class="built_in">float</span> f</span>)</span> =&gt; Mathf.Sin(f);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">pow</span>(<span class="params"><span class="built_in">float</span> f, <span class="built_in">float</span> p</span>)</span> =&gt; Mathf.Pow(f, p);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">sqrt</span>(<span class="params"><span class="built_in">float</span> f</span>)</span> =&gt; Mathf.Sqrt(f);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Linear</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InSine</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - cos((t * PI) * <span class="number">0.5f</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutSine</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; sin((t * PI) * <span class="number">0.5f</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutSine</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; -(cos(PI * t) - <span class="number">1</span>) * <span class="number">0.5f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InQuad</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t * t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutQuad</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - (<span class="number">1</span> - t) * (<span class="number">1</span> - t);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutQuad</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t &lt; <span class="number">0.5</span> ? <span class="number">2</span> * t * t : <span class="number">1</span> - pow(<span class="number">-2</span> * t + <span class="number">2</span>, <span class="number">2</span>) * <span class="number">0.5f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InCubic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t * t * t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutCubic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - pow(<span class="number">1</span> - t, <span class="number">3</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutCubic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t &lt; <span class="number">0.5</span> ? <span class="number">4</span> * t * t * t : <span class="number">1</span> - pow(<span class="number">-2</span> * t + <span class="number">2</span>, <span class="number">3</span>) * <span class="number">0.5f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InQuart</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t * t * t * t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutQuart</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - pow(<span class="number">1</span> - t, <span class="number">4</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutQuart</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t &lt; <span class="number">0.5</span> ? <span class="number">8</span> * t * t * t * t : <span class="number">1</span> - pow(<span class="number">-2</span> * t + <span class="number">2</span>, <span class="number">4</span>) * <span class="number">0.5f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InQuint</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t * t * t * t * t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutQuint</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - pow(<span class="number">1</span> - t, <span class="number">5</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutQuint</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t &lt; <span class="number">0.5</span> ? <span class="number">16</span> * t * t * t * t * t : <span class="number">1</span> - pow(<span class="number">-2</span> * t + <span class="number">2</span>, <span class="number">5</span>) * <span class="number">0.5f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InExpo</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t == <span class="number">0</span> ? <span class="number">0</span> : pow(<span class="number">2</span>, <span class="number">10</span> * t - <span class="number">10</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutExpo</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t.Equals(<span class="number">1</span>) ? <span class="number">1</span> : <span class="number">1</span> - pow(<span class="number">2</span>, <span class="number">-10</span> * t);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutExpo</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t == <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">        t.Equals(<span class="number">1</span>) ? <span class="number">1</span> :</span><br><span class="line">        t &lt; <span class="number">0.5</span> ? pow(<span class="number">2</span>, <span class="number">20</span> * t - <span class="number">10</span>) * <span class="number">0.5f</span> : (<span class="number">2</span> - pow(<span class="number">2</span>, <span class="number">-20</span> * t + <span class="number">10</span>)) * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InCirc</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - sqrt(<span class="number">1</span> - pow(t, <span class="number">2</span>));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutCirc</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; sqrt(<span class="number">1</span> - pow(t - <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutCirc</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt;</span><br><span class="line">        t &lt; <span class="number">0.5</span> ? (<span class="number">1</span> - sqrt(<span class="number">1</span> - pow(<span class="number">2</span> * t, <span class="number">2</span>))) * <span class="number">0.5f</span> : (sqrt(<span class="number">1</span> - pow(<span class="number">-2</span> * t + <span class="number">2</span>, <span class="number">2</span>)) + <span class="number">1</span>) * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InBack</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; c3 * t * t * t - c1 * t * t;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutBack</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> + c3 * pow(t - <span class="number">1</span>, <span class="number">3</span>) + c1 * pow(t - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutBack</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t &lt; <span class="number">0.5</span></span><br><span class="line">        ? (pow(<span class="number">2</span> * t, <span class="number">2</span>) * ((c2 + <span class="number">1</span>) * <span class="number">2</span> * t - c2)) * <span class="number">0.5f</span></span><br><span class="line">        : (pow(<span class="number">2</span> * t - <span class="number">2</span>, <span class="number">2</span>) * ((c2 + <span class="number">1</span>) * (t * <span class="number">2</span> - <span class="number">2</span>) + c2) + <span class="number">2</span>) * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InElastic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt;</span><br><span class="line">        t == <span class="number">0</span> ? <span class="number">0</span> : t.Equals(<span class="number">1</span>) ? <span class="number">1</span> : -pow(<span class="number">2</span>, <span class="number">10</span> * t - <span class="number">10</span>) * sin((t * <span class="number">10</span> - <span class="number">10.75f</span>) * c4);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutElastic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt;</span><br><span class="line">        t == <span class="number">0</span> ? <span class="number">0</span> : t.Equals(<span class="number">1</span>) ? <span class="number">1</span> : pow(<span class="number">2</span>, <span class="number">-10</span> * t) * sin((t * <span class="number">10</span> - <span class="number">0.75f</span>) * c4) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutElastic</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; t == <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">        t.Equals(<span class="number">1</span>) ? <span class="number">1</span> :</span><br><span class="line">        t &lt; <span class="number">0.5</span> ? -(pow(<span class="number">2</span>, <span class="number">20</span> * t - <span class="number">10</span>) * sin((<span class="number">20</span> * t - <span class="number">11.125f</span>) * c5)) * <span class="number">0.5f</span> :</span><br><span class="line">        (pow(<span class="number">2</span>, <span class="number">-20</span> * t + <span class="number">10</span>) * sin((<span class="number">20</span> * t - <span class="number">11.125f</span>) * c5)) * <span class="number">0.5f</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InBounce</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt; <span class="number">1</span> - OutBounce(<span class="number">1</span> - t);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">OutBounce</span>(<span class="params"><span class="built_in">float</span> t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">1</span> / d1) <span class="keyword">return</span> n1 * t * t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">2</span> / d1) <span class="keyword">return</span> n1 * (t -= <span class="number">1.5f</span> / d1) * t + <span class="number">0.75f</span>;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">2.5</span> / d1) <span class="keyword">return</span> n1 * (t -= <span class="number">2.25f</span> / d1) * t + <span class="number">0.9375f</span>;</span><br><span class="line">        <span class="keyword">return</span> n1 * (t -= <span class="number">2.625f</span> / d1) * t + <span class="number">0.984375f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">InOutBounce</span>(<span class="params"><span class="built_in">float</span> t</span>)</span> =&gt;</span><br><span class="line">        t &lt; <span class="number">0.5</span> ? (<span class="number">1</span> - OutBounce(<span class="number">1</span> - <span class="number">2</span> * t)) * <span class="number">0.5f</span> : (<span class="number">1</span> + OutBounce(<span class="number">2</span> * t - <span class="number">1</span>)) * <span class="number">0.5f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .csproj文件怎么自动引入指定文件夹下的所有脚本</title>
      <link href="/2021/06/04/f7b7a70511c7/"/>
      <url>/2021/06/04/f7b7a70511c7/</url>
      
        <content type="html"><![CDATA[<p><code>.net</code>开发环境中建立项目时，会产生<code>.csproj</code>文件，这是C#的工程文件，其中记录了与工程有关的相关信息，例如包含的文件，程序的版本，所生成的文件的类型和位置的信息等</p><p>如果我们想要批量自动化的在项目里面通过模板生成<code>.cs</code>文件的话，需要在<code>.csproj</code>文件里加上下面一句话</p><blockquote><p> PS：<code>Main</code>是我们想要生成脚本的父级文件夹</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">    &lt;Compile Include=&quot;..\Main\**\*.cs&quot;&gt;&lt;/Compile&gt; </span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure><blockquote><p>简写方式</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Include</span>=<span class="string">&quot;..\Main\**\*.cs&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要把当前文件夹设置为外部引用关系的话，加上下面一句话</p><blockquote><p>PS: 通过<code>Link</code>将当前文件夹下的所有脚本设置成为外部引用关系</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Include</span>=<span class="string">&quot;..\Main\**\*.cs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Link</span>&gt;</span>Main\%(RecursiveDir)\%(Filename).%(Extension)<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Compile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON</title>
      <link href="/2021/06/03/4a3af65311aa/"/>
      <url>/2021/06/03/4a3af65311aa/</url>
      
        <content type="html"><![CDATA[<h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>概念：</strong></p><p>JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯体系的行为。这些特性使JSON成为理想的数据交换语言。</p><p><strong>结构：</strong></p><p>JSON语法是javaScript语法的子集，javaScript用【】中括号来表示数组，用{}大括号来表示对象，JSON亦是如此。</p><p><strong>优点：</strong></p><p>解析速度快，数据格式比较简单，易于读写，格式都是压缩的，占用带宽小。支持多种语言，便于服务器端的解析。因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。</p><p><strong>缺点：</strong></p><p>在人机都需要识别数据的时候，比如配置文件，json的可读性也不如某文件类型</p><p>如果要保存一些重量级数据和复杂的场景，Json就会略显疲态（word文档，ui，政府组织架构也不能使用Json格式）</p><p>JSON格式目前在Web Service中推广还属于初级阶段</p><hr><h3 id="使用：（主要根据选择的JSON解析库来使用，这里以unity自带JsonUtility）"><a href="#使用：（主要根据选择的JSON解析库来使用，这里以unity自带JsonUtility）" class="headerlink" title="使用：（主要根据选择的JSON解析库来使用，这里以unity自带JsonUtility）"></a>使用：（主要根据选择的JSON解析库来使用，这里以unity自带JsonUtility）</h3><p>JsonUtility作为一个轻量级的API，缺点就是仅支持简单类型（它不支持的集合，如字典。但是例外是支持List和List阵列！）JsonUtility相对于其他库来说解析的比较快而且GC很少</p><p><strong>object to json：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> jsonString = JsonUtility.ToJson(save);</span><br></pre></td></tr></table></figure><p><strong>json to object:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Save save = JsonUtility.FromJson&lt;Save&gt;(jsonString);<span class="comment">//这里的Save是自定义类型</span></span><br></pre></td></tr></table></figure><hr><h3 id="数据地址（可自定义，这里不做多余赘述）"><a href="#数据地址（可自定义，这里不做多余赘述）" class="headerlink" title="数据地址（可自定义，这里不做多余赘述）"></a>数据地址（可自定义，这里不做多余赘述）</h3>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML</title>
      <link href="/2021/06/03/89b0d9189efb/"/>
      <url>/2021/06/03/89b0d9189efb/</url>
      
        <content type="html"><![CDATA[<h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>概念：</strong></p><p>XML（可扩展标记语言）被设计用来“结构化”传输和存储数据，携带数据和交换数据 </p><p>XML文档即文本文件，按照XML语法规则书写，本质也是String</p><p>文档必须包含根元素。该元素是所有其他元素的父元素！ XML文档中的元素形成了一颗文档树。这棵树丛根部开始，并扩展 （所有元素都可拥有子元素）</p><p>XML非常适合 Web 传输，提供了统一的方法来描述和交换独立于应用程序或供应商的结构化数据</p><p>容易与其他系统进行远程交互，数据共享比较方便</p><p><strong>优点：</strong></p><p>格式统一，符合标准，容易与其他系统进行远程交互，数据共享比较方便。</p><p><strong>缺点：</strong></p><p>XML文件庞大，文件格式复杂，传输占带宽，服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护，客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码（XML解析成DOM对象的时候，浏览器【IE和fireFox】会有差异）服务器端和客户端解析XML花费较多的资源和时间。</p><p><strong>JSON vs XML（选自CSDN）</strong></p><p>【可读性】JSON是建议的语法，XML是规范的标签形式，XML可读性较好些。<br>【扩展性】没有什么是XML能扩展，JSON不能的<br>【编码难度】JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。<br>【解码难度】XML的解析得考虑子节点父节点，让人头昏眼花。而JSON的解析难度几乎为0。<br>【数据体积与传输速度】JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>【数据描述】JSON对数据的描述性比XML较差。</p><p><strong>知乎大佬看法：</strong></p><p>【北京理工讲师】：XML文档可以附上DTD、Schema，还有一堆注入XPath之类规范，使用自定义XML元素或者属性，能很方便地给数据附加各种约束条件和关联额外信息，从数据表达能力上看，XML强于JSON，但是很多场景并不需要这么复杂的重量级东西，轻便灵活的JSON就很受欢迎。打个比方，如果完成某件事，一个简单的，一个复杂的，选哪个？我只是想杀只鸡，用得着牛刀吗？JSON和XML相比就是如此。<br>【大佬A】：XML相比JSON最大的区别是充满了冗余信息。多数时候我们不需要冗余信息，但是一旦需要的时候没有就是不行。这就是XML与JSON最大的区别。<br>【大佬B】：在我长时间使用XML和JSON的过程中我发现，其实他们是不可互相替代的。我们只能说如今大部分适合XML的程序要么都写完了要么都不时髦了，现在需要JSON的还没写的程序多一点。<br>【大佬C】json的存在是典型的20%功能解决80%需求。为什么不要xml？因为里面80%的功能你不需要，等你需要的时候你就明白，这事只能xml干，json不行。<br>【大佬D】原来必须大炮打蚊子的地方，人们发现苍蝇拍更顺手了而已。就像 Python 代替 C++ 和 Java 做了不少网络服务器一样道理。不是每个代码都为了流芳百年，DTD &#x2F; XSD 还没写好的时候我 JSON API 已经调试完成了。<br>【大佬E】Xml对应树结构，json对应哈希表，一般问题没有那么复杂，需要使用树来表达。但是word文档，ui，政府组织架构这些就只适应树了，这个就是个简单的数据结构的知识。图是最复杂的数据结构，树是最复杂的可表达结构。没事搞那么复杂没意义啊。<br>【大佬F】在数据传输的应用下，我会更倾向json，但在人机都需要识别数据的时候，比如配置文件，我还是倾向xml，xml的可读性比json好。</p><hr><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p><strong>解析XML文档的命名空间引用：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Xml;</span><br></pre></td></tr></table></figure><p><strong>存储数据：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">XmlDocument xml = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line">XmlDocument root = xml.CreateElement(<span class="string">&quot;Root&quot;</span>);<span class="comment">//创建根节点</span></span><br><span class="line">root.SetAttribute(<span class="string">&quot;FileName&quot;</span>,<span class="string">&quot;File_01&quot;</span>);<span class="comment">//这一步多余，不影响结果，主要是设置属性名，和属性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...中间就是手动创建各种节点...//</span></span><br><span class="line">XmlElement data = xml.CreateElement(<span class="string">&quot;Data&quot;</span>);</span><br><span class="line">data.InnerText = save.XXX.ToString();<span class="comment">//数据存储</span></span><br><span class="line">root.AppendChild(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体使用如下:</span></span><br><span class="line"><span class="comment">//1.创建xml元素（节点）</span></span><br><span class="line"><span class="comment">//2.将游戏数值赋值给xml节点内容</span></span><br><span class="line"><span class="comment">//3.附录在根节点这三个步骤</span></span><br><span class="line"></span><br><span class="line">xml.Save(<span class="string">&quot;XXX&quot;</span>);<span class="comment">//保存XML文档到XXX路径</span></span><br></pre></td></tr></table></figure><p><strong>读取数据：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml.Load(<span class="string">&quot;XXX&quot;</span>);<span class="comment">//通过路径加载xml文档</span></span><br><span class="line">XmlNodeList xxx = xml.GetElementsByTagName(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> data = xxx[<span class="number">0</span>].InnerText;</span><br></pre></td></tr></table></figure><p><strong>高级使用：</strong></p><p><code>.Net Framework</code>提供了对应的<code>System.Xml.Seriazliation</code>命名空间，方便简单使用特性来进行xml文档的序列化和反序列化，具体API自行查找</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(<span class="string">&quot;信息&quot;</span>)</span>]  <span class="comment">// 该特性标记为根节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Info</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlIgnore</span>]  <span class="comment">// 此公共属性不会被序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server 服务端 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">// 不使用标记</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;客户端&quot;</span>)</span>]  <span class="comment">// List&lt;Client&gt; 表示有多个 &#x27;客户端&#x27; 节点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Client&gt; Client &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Server</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="string">&quot;备注&quot;</span>)</span>]  <span class="comment">// 节点 &#x27;服务端&#x27; 的一个名为 &#x27;备注&#x27; 的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Note;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlText</span>]  <span class="comment">// 节点 &#x27;服务端&#x27; 的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="string">&quot;名称&quot;</span>)</span>]  <span class="comment">// 在 &#x27;客户端&#x27; 节点添加名为 &#x27;名称&#x27; 的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;地址&quot;</span>)</span>]  <span class="comment">// 节点 &#x27;客户端&#x27; 的子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Adress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;端口&quot;</span>)</span>]  <span class="comment">// 节点 &#x27;客户端&#x27; 的子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Port &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> Info info = <span class="keyword">new</span> Info</span><br><span class="line"> &#123;</span><br><span class="line">     Count = <span class="number">2</span>,</span><br><span class="line">     服务端 = <span class="keyword">new</span> Server</span><br><span class="line">     &#123;</span><br><span class="line">         Name = <span class="string">&quot;用户服务&quot;</span>,</span><br><span class="line">         Note = <span class="string">&quot;无实际意义&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     Client = <span class="keyword">new</span> List&lt;Client&gt;</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">new</span> Client</span><br><span class="line">         &#123;</span><br><span class="line">             Name = <span class="string">&quot;测试用户&quot;</span>,</span><br><span class="line">             Adress = <span class="string">&quot;192.168.1.0&quot;</span>,</span><br><span class="line">             Port = <span class="string">&quot;6666&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="keyword">new</span> Client</span><br><span class="line">         &#123;</span><br><span class="line">             Name = <span class="string">&quot;轩&quot;</span>,</span><br><span class="line">             Adress = <span class="string">&quot;192.168.1.1&quot;</span>,</span><br><span class="line">             Port = <span class="string">&quot;7777&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">信息</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">服务端</span> <span class="attr">备注</span>=<span class="string">&quot;无实际意义&quot;</span>&gt;</span>用户服务<span class="tag">&lt;/<span class="name">服务端</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">客户端</span> <span class="attr">名称</span>=<span class="string">&quot;测试用户&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">地址</span>&gt;</span>192.168.1.0<span class="tag">&lt;/<span class="name">地址</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">端口</span>&gt;</span>6666<span class="tag">&lt;/<span class="name">端口</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">客户端</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">客户端</span> <span class="attr">名称</span>=<span class="string">&quot;轩&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">地址</span>&gt;</span>192.168.1.1<span class="tag">&lt;/<span class="name">地址</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">端口</span>&gt;</span>7777<span class="tag">&lt;/<span class="name">端口</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">客户端</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">信息</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="数据地址："><a href="#数据地址：" class="headerlink" title="数据地址："></a>数据地址：</h3><p>(由于可以自定义，因此这里不再赘述)</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 数据读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity数据读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具——Unity自带GUIStyle查看器</title>
      <link href="/2021/05/29/256ea2e1f706/"/>
      <url>/2021/05/29/256ea2e1f706/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><img src="/2021/05/29/256ea2e1f706/3-1.gif" class="" title="3-1"><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EditorToolKits</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GUIStylesPreview</span> : <span class="title">EditorWindow</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;Editor Extension/GUIStyles Preview&quot;</span>, priority = 2)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            GUIStylesPreview w = EditorWindow.GetWindow&lt;GUIStylesPreview&gt;(<span class="string">&quot;GUIStyles Preview&quot;</span>);</span><br><span class="line">            w.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">struct</span> Drawing</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> Rect Rect;</span><br><span class="line">            <span class="keyword">public</span> System.Action Draw;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;Drawing&gt; Drawings;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;Object&gt; _objects;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> _scrollPos;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> _maxY;</span><br><span class="line">        <span class="keyword">private</span> Rect _oldPosition;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _showingStyles = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _search = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!position.width.Equals(_oldPosition.width) &amp;&amp; Event.current.type == EventType.Layout)</span><br><span class="line">            &#123;</span><br><span class="line">                Drawings = <span class="literal">null</span>;</span><br><span class="line">                _oldPosition = position;</span><br><span class="line">            &#125;</span><br><span class="line">            GUILayout.Button(<span class="string">&quot;Styles&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> newSearch = GUILayout.TextField(_search);</span><br><span class="line">            <span class="keyword">if</span> (newSearch != _search)</span><br><span class="line">            &#123;</span><br><span class="line">                _search = newSearch;</span><br><span class="line">                Drawings = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">float</span> top = <span class="number">36</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Drawings == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> lowerSearch = _search.ToLower();</span><br><span class="line"></span><br><span class="line">                Drawings = <span class="keyword">new</span> List&lt;Drawing&gt;();</span><br><span class="line"></span><br><span class="line">                GUIContent inactiveText = <span class="keyword">new</span> GUIContent(<span class="string">&quot;inactive&quot;</span>);</span><br><span class="line">                GUIContent activeText = <span class="keyword">new</span> GUIContent(<span class="string">&quot;active&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">float</span> x = <span class="number">5.0f</span>;</span><br><span class="line">                <span class="built_in">float</span> y = <span class="number">5.0f</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_showingStyles)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (GUIStyle ss <span class="keyword">in</span> GUI.skin)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lowerSearch != <span class="string">&quot;&quot;</span> &amp;&amp; !ss.name.ToLower().Contains(lowerSearch))</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        GUIStyle thisStyle = ss;</span><br><span class="line"></span><br><span class="line">                        Drawing draw = <span class="keyword">new</span> Drawing();</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">float</span> width = Mathf.Max(</span><br><span class="line">                            <span class="number">100.0f</span>,</span><br><span class="line">                            GUI.skin.button.CalcSize(<span class="keyword">new</span> GUIContent(ss.name)).x,</span><br><span class="line">                            ss.CalcSize(inactiveText).x + ss.CalcSize(activeText).x</span><br><span class="line">                        ) + <span class="number">16.0f</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">float</span> height = <span class="number">60.0f</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (x + width &gt; position.width - <span class="number">32</span> &amp;&amp; x &gt; <span class="number">5.0f</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            x = <span class="number">5.0f</span>;</span><br><span class="line">                            y += height + <span class="number">10.0f</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        draw.Rect = <span class="keyword">new</span> Rect(x, y, width, height);</span><br><span class="line"></span><br><span class="line">                        width -= <span class="number">8.0f</span>;</span><br><span class="line"></span><br><span class="line">                        draw.Draw = () =&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (GUILayout.Button(thisStyle.name, GUILayout.Width(width)))</span><br><span class="line">                                CopyText(<span class="string">&quot;(GUIStyle)\&quot;&quot;</span> + thisStyle.name + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            GUILayout.BeginHorizontal();</span><br><span class="line">                            GUILayout.Toggle(<span class="literal">true</span>, inactiveText, thisStyle, GUILayout.Width(width / <span class="number">2</span>));</span><br><span class="line">                            GUILayout.Toggle(<span class="literal">false</span>, activeText, thisStyle, GUILayout.Width(width / <span class="number">2</span>));</span><br><span class="line">                            GUILayout.EndHorizontal();</span><br><span class="line">                        &#125;;</span><br><span class="line"></span><br><span class="line">                        x += width + <span class="number">18.0f</span>;</span><br><span class="line"></span><br><span class="line">                        Drawings.Add(draw);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _maxY = y;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Rect r = position;</span><br><span class="line">            r.y = top;</span><br><span class="line">            r.height -= r.y;</span><br><span class="line">            r.x = r.width - <span class="number">16</span>;</span><br><span class="line">            r.width = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">float</span> areaHeight = position.height - top;</span><br><span class="line">            _scrollPos = GUI.VerticalScrollbar(r, _scrollPos, areaHeight, <span class="number">0.0f</span>, _maxY);</span><br><span class="line"></span><br><span class="line">            Rect area = <span class="keyword">new</span> Rect(<span class="number">0</span>, top, position.width - <span class="number">16.0f</span>, areaHeight);</span><br><span class="line">            GUILayout.BeginArea(area);</span><br><span class="line">            <span class="comment">//int count = 0;</span></span><br><span class="line">            <span class="keyword">foreach</span> (Drawing draw <span class="keyword">in</span> Drawings)</span><br><span class="line">            &#123;</span><br><span class="line">                Rect newRect = draw.Rect;</span><br><span class="line">                newRect.y -= _scrollPos;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (newRect.y + newRect.height &gt; <span class="number">0</span> &amp;&amp; newRect.y &lt; areaHeight)</span><br><span class="line">                &#123;</span><br><span class="line">                    GUILayout.BeginArea(newRect, GUI.skin.textField);</span><br><span class="line">                    draw.Draw();</span><br><span class="line">                    GUILayout.EndArea();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GUILayout.EndArea();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CopyText</span>(<span class="params"><span class="built_in">string</span> pText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextEditor editor = <span class="keyword">new</span> TextEditor();</span><br><span class="line">            </span><br><span class="line">            editor.text = pText;</span><br><span class="line"></span><br><span class="line">            editor.SelectAll();</span><br><span class="line">            editor.Copy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具——Unity内置图标浏览器</title>
      <link href="/2021/05/29/1adeddbce2a1/"/>
      <url>/2021/05/29/1adeddbce2a1/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><img src="/2021/05/29/1adeddbce2a1/4-1.gif" class="" title="4-1"><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EditorToolKits</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EditorIcons</span> : <span class="title">EditorWindow</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;Editor Extension/Editor Icons&quot;</span>, priority = 1)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EditorIconsOpen</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> w = CreateWindow&lt;EditorIcons&gt;(<span class="string">&quot;Editor Icons&quot;</span>);</span><br><span class="line">            w.Show();</span><br><span class="line">            w.minSize = <span class="keyword">new</span> Vector2(<span class="number">320</span>, <span class="number">450</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">bool</span> viewBigIcons = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">bool</span> darkPreview = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Vector2 scroll;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> buttonSize = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> search = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SearchGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.HorizontalScope())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (isWide) GUILayout.Space(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                search = EditorGUILayout.TextField(search, EditorStyles.toolbarSearchField);</span><br><span class="line">                <span class="keyword">if</span> (GUILayout.Button(EditorGUIUtility.IconContent(<span class="string">&quot;winbtn_mac_close_h&quot;</span>), <span class="comment">//SVN_DeletedLocal</span></span><br><span class="line">                    EditorStyles.toolbarButton,</span><br><span class="line">                    GUILayout.Width(<span class="number">22</span>))</span><br><span class="line">                ) search = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bool</span> isWide =&gt; Screen.width &gt; <span class="number">550</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bool</span> doSearch =&gt; !<span class="built_in">string</span>.IsNullOrWhiteSpace(search) &amp;&amp; search != <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">GUIContent <span class="title">GetIcon</span>(<span class="params"><span class="built_in">string</span> icon_name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GUIContent valid = <span class="literal">null</span>;</span><br><span class="line">            Debug.unityLogger.logEnabled = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(icon_name)) valid = EditorGUIUtility.IconContent(icon_name);</span><br><span class="line">            Debug.unityLogger.logEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> valid?.image == <span class="literal">null</span> ? <span class="literal">null</span> : valid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; all_icons = ico_list.Where(x =&gt; GetIcon(x) != <span class="literal">null</span>).ToList();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; unique = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (Texture2D x <span class="keyword">in</span> Resources.FindObjectsOfTypeAll&lt;Texture2D&gt;())</span><br><span class="line">            &#123;</span><br><span class="line">                GUIContent icoContent = GetIcon(x.name);</span><br><span class="line">                <span class="keyword">if</span> (icoContent == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">var</span> allIcons = all_icons.ToList();</span><br><span class="line">                <span class="keyword">if</span> (!allIcons.Contains(x.name))</span><br><span class="line">                &#123;</span><br><span class="line">                    unique.Add(x.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ico_list = ico_list.ToList().Concat(unique).ToArray();</span><br><span class="line">            Resources.UnloadUnusedAssets();</span><br><span class="line">            GC.Collect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ppp = EditorGUIUtility.pixelsPerPoint;</span><br><span class="line"></span><br><span class="line">            InitIcons();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isWide) SearchGUI();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.HorizontalScope(EditorStyles.toolbar))</span><br><span class="line">            &#123;</span><br><span class="line">                GUILayout.Label(<span class="string">&quot;Select what icons to show&quot;</span>, GUILayout.Width(<span class="number">160</span>));</span><br><span class="line">                viewBigIcons = GUILayout.SelectionGrid(</span><br><span class="line">                    viewBigIcons ? <span class="number">1</span> : <span class="number">0</span>, <span class="keyword">new</span>[] &#123;<span class="string">&quot;Small&quot;</span>, <span class="string">&quot;Big&quot;</span>&#125;,</span><br><span class="line">                    <span class="number">2</span>, EditorStyles.toolbarButton) == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isWide) SearchGUI();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isWide) GUILayout.Space(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> scope = <span class="keyword">new</span> GUILayout.ScrollViewScope(scroll))</span><br><span class="line">            &#123;</span><br><span class="line">                GUILayout.Space(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                scroll = scope.scrollPosition;</span><br><span class="line"></span><br><span class="line">                buttonSize = viewBigIcons ? <span class="number">70</span> : <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> render_width = (Screen.width / ppp - <span class="number">13f</span>);</span><br><span class="line">                <span class="keyword">var</span> gridW = Mathf.FloorToInt(render_width / buttonSize);</span><br><span class="line">                <span class="keyword">var</span> margin_left = (render_width - buttonSize * gridW) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> row = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                List&lt;GUIContent&gt; iconList;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (doSearch)</span><br><span class="line">                    iconList = iconContentListAll.Where(x =&gt; x.tooltip.ToLower()</span><br><span class="line">                        .Contains(search.ToLower())).ToList();</span><br><span class="line">                <span class="keyword">else</span> iconList = viewBigIcons ? iconContentListBig : iconContentListSmall;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (index &lt; iconList.Count)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.HorizontalScope())</span><br><span class="line">                    &#123;</span><br><span class="line">                        GUILayout.Space(margin_left);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; gridW; ++i)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">int</span> k = i + row * gridW;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> icon = iconList[k];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (GUILayout.Button(icon,</span><br><span class="line">                                iconButtonStyle,</span><br><span class="line">                                GUILayout.Width(buttonSize),</span><br><span class="line">                                GUILayout.Height(buttonSize)))</span><br><span class="line">                            &#123;</span><br><span class="line">                                EditorGUI.FocusTextInControl(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                                iconSelected = icon;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            index++;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (index == iconList.Count) <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    row++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                GUILayout.Space(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (iconSelected == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            GUILayout.FlexibleSpace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.HorizontalScope(EditorStyles.helpBox, GUILayout.MaxHeight(viewBigIcons ? <span class="number">140</span> : <span class="number">120</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.VerticalScope(GUILayout.Width(<span class="number">130</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    GUILayout.Space(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                    GUILayout.Button(iconSelected,</span><br><span class="line">                        darkPreview ? iconPreviewBlack : iconPreviewWhite,</span><br><span class="line">                        GUILayout.Width(<span class="number">128</span>), GUILayout.Height(viewBigIcons ? <span class="number">128</span> : <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">                    GUILayout.Space(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">                    darkPreview = GUILayout.SelectionGrid(</span><br><span class="line">                        darkPreview ? <span class="number">1</span> : <span class="number">0</span>, <span class="keyword">new</span>[] &#123;<span class="string">&quot;Light&quot;</span>, <span class="string">&quot;Dark&quot;</span>&#125;,</span><br><span class="line">                        <span class="number">2</span>, EditorStyles.miniButton) == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    GUILayout.FlexibleSpace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                GUILayout.Space(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">new</span> GUILayout.VerticalScope())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = <span class="string">$&quot;Size: <span class="subst">&#123;iconSelected.image.width&#125;</span>x<span class="subst">&#123;iconSelected.image.height&#125;</span>&quot;</span>;</span><br><span class="line">                    s += <span class="string">&quot;\nIs Pro Skin Icon: &quot;</span> +</span><br><span class="line">                         (iconSelected.tooltip.IndexOf(<span class="string">&quot;d_&quot;</span>, StringComparison.Ordinal) == <span class="number">0</span> ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">                    s += <span class="string">$&quot;\nTotal <span class="subst">&#123;iconContentListAll.Count&#125;</span> icons&quot;</span>;</span><br><span class="line">                    GUILayout.Space(<span class="number">5</span>);</span><br><span class="line">                    EditorGUILayout.HelpBox(s, MessageType.None);</span><br><span class="line">                    GUILayout.Space(<span class="number">5</span>);</span><br><span class="line">                    EditorGUILayout.TextField(<span class="string">&quot;EditorGUIUtility.IconContent(\&quot;&quot;</span> + iconSelected.tooltip + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">                    EditorGUILayout.TextField(<span class="string">&quot;EditorGUIUtility.FindTexture(\&quot;&quot;</span> + iconSelected.tooltip + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">                    GUILayout.Space(<span class="number">5</span>);</span><br><span class="line">                    <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Copy to clipboard&quot;</span>, EditorStyles.miniButton))</span><br><span class="line">                        EditorGUIUtility.systemCopyBuffer = iconSelected.tooltip;</span><br><span class="line">                    <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Export&quot;</span>, GUILayout.Height(<span class="number">32</span>)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> path = EditorUtility.SaveFolderPanel(<span class="string">&quot;Save Path&quot;</span>, Application.dataPath, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(path))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        path = Path.Combine(path, <span class="string">$&quot;<span class="subst">&#123;iconSelected.tooltip&#125;</span>.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        Texture2D icon = iconSelected.image <span class="keyword">as</span> Texture2D;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (icon)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> png = _toWritableAndRead(icon).EncodeToPNG();</span><br><span class="line">                            File.WriteAllBytes(path, png);</span><br><span class="line">                            ShowNotification(<span class="keyword">new</span> GUIContent(<span class="string">&quot;Export Complete!&quot;</span>));</span><br><span class="line">                            AssetDatabase.Refresh();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                GUILayout.Space(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;X&quot;</span>, GUILayout.ExpandHeight(<span class="literal">true</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    iconSelected = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Texture2D _toWritableAndRead(Texture2D self)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> renderTexture = <span class="keyword">new</span> RenderTexture(self.width, self.height, <span class="number">0</span>, RenderTextureFormat.Default,</span><br><span class="line">                RenderTextureReadWrite.Linear);</span><br><span class="line">            Graphics.Blit(self, renderTexture);</span><br><span class="line">            Texture2D te = <span class="keyword">new</span> Texture2D(self.width, self.height);</span><br><span class="line">            te.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, renderTexture.width, renderTexture.height), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            te.Apply();</span><br><span class="line">            renderTexture.Release();</span><br><span class="line">            Graphics.ClearRandomWriteTargets();</span><br><span class="line">            <span class="keyword">return</span> te;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> GUIContent iconSelected;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> List&lt;GUIContent&gt; iconContentListAll;</span><br><span class="line">        <span class="keyword">static</span> List&lt;GUIContent&gt; iconContentListSmall;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> List&lt;GUIContent&gt; iconContentListBig;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> GUIStyle iconButtonStyle;</span><br><span class="line">        <span class="keyword">static</span> GUIStyle iconPreviewBlack;</span><br><span class="line">        <span class="keyword">static</span> GUIStyle iconPreviewWhite;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AllTheTEXTURES</span>(<span class="params"><span class="keyword">ref</span> GUIStyle s, Texture2D t</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s.hover.background = s.onHover.background = s.focused.background = s.onFocused.background =</span><br><span class="line">                s.active.background = s.onActive.background = s.normal.background = s.onNormal.background = t;</span><br><span class="line">            s.hover.scaledBackgrounds = s.onHover.scaledBackgrounds = s.focused.scaledBackgrounds =</span><br><span class="line">                s.onFocused.scaledBackgrounds = s.active.scaledBackgrounds = s.onActive.scaledBackgrounds =</span><br><span class="line">                    s.normal.scaledBackgrounds = s.onNormal.scaledBackgrounds = <span class="keyword">new</span>[] &#123;t&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Texture2D <span class="title">Texture2DPixel</span>(<span class="params">Color c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Texture2D t = <span class="keyword">new</span> Texture2D(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            t.SetPixel(<span class="number">0</span>, <span class="number">0</span>, c);</span><br><span class="line">            t.Apply();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">InitIcons</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iconContentListSmall != <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            iconButtonStyle = <span class="keyword">new</span> GUIStyle(EditorStyles.miniButton);</span><br><span class="line">            iconButtonStyle.margin = <span class="keyword">new</span> RectOffset(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            iconButtonStyle.fixedHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            iconPreviewBlack = <span class="keyword">new</span> GUIStyle(iconButtonStyle);</span><br><span class="line">            AllTheTEXTURES(<span class="keyword">ref</span> iconPreviewBlack, Texture2DPixel(<span class="keyword">new</span> Color(<span class="number">0.15f</span>, <span class="number">0.15f</span>, <span class="number">0.15f</span>)));</span><br><span class="line"></span><br><span class="line">            iconPreviewWhite = <span class="keyword">new</span> GUIStyle(iconButtonStyle);</span><br><span class="line">            AllTheTEXTURES(<span class="keyword">ref</span> iconPreviewWhite, Texture2DPixel(<span class="keyword">new</span> Color(<span class="number">0.85f</span>, <span class="number">0.85f</span>, <span class="number">0.85f</span>)));</span><br><span class="line"></span><br><span class="line">            iconContentListSmall = <span class="keyword">new</span> List&lt;GUIContent&gt;();</span><br><span class="line">            iconContentListBig = <span class="keyword">new</span> List&lt;GUIContent&gt;();</span><br><span class="line">            iconContentListAll = <span class="keyword">new</span> List&lt;GUIContent&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> t <span class="keyword">in</span> ico_list)</span><br><span class="line">            &#123;</span><br><span class="line">                GUIContent ico = GetIcon(t);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ico == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ico.tooltip = t;</span><br><span class="line"></span><br><span class="line">                iconContentListAll.Add(ico);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!(ico.image.width &lt;= <span class="number">36</span> || ico.image.height &lt;= <span class="number">36</span>))</span><br><span class="line">                    iconContentListBig.Add(ico);</span><br><span class="line">                <span class="keyword">else</span> iconContentListSmall.Add(ico);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// https://gist.github.com/MattRix/c1f7840ae2419d8eb2ec0695448d4321</span></span><br><span class="line">        <span class="comment">// https://unitylist.com/p/5c3/Unity-editor-icons</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> ICONS</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span>[] ico_list =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_Help&quot;</span>, <span class="string">&quot;_Help@2x&quot;</span>, <span class="string">&quot;_Menu&quot;</span>, <span class="string">&quot;_Menu@2x&quot;</span>, <span class="string">&quot;_Popup&quot;</span>, <span class="string">&quot;_Popup@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;aboutwindow.mainheader&quot;</span>, <span class="string">&quot;ageialogo&quot;</span>, <span class="string">&quot;AlphabeticalSorting&quot;</span>, <span class="string">&quot;AlphabeticalSorting@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Animation.AddEvent&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Animation.AddKeyframe&quot;</span>, <span class="string">&quot;Animation.EventMarker&quot;</span>, <span class="string">&quot;Animation.FilterBySelection&quot;</span>, <span class="string">&quot;Animation.FirstKey&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Animation.LastKey&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Animation.NextKey&quot;</span>, <span class="string">&quot;Animation.Play&quot;</span>, <span class="string">&quot;Animation.PrevKey&quot;</span>, <span class="string">&quot;Animation.Record&quot;</span>, <span class="string">&quot;Animation.Record@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Animation.SequencerLink&quot;</span>, <span class="string">&quot;animationanimated&quot;</span>, <span class="string">&quot;animationdopesheetkeyframe&quot;</span>, <span class="string">&quot;animationkeyframe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;animationnocurve&quot;</span>, <span class="string">&quot;animationvisibilitytoggleoff&quot;</span>, <span class="string">&quot;animationvisibilitytoggleoff@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;animationvisibilitytoggleon&quot;</span>, <span class="string">&quot;animationvisibilitytoggleon@2x&quot;</span>, <span class="string">&quot;AnimationWrapModeMenu&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AssemblyLock&quot;</span>, <span class="string">&quot;Asset Store&quot;</span>, <span class="string">&quot;Asset Store@2x&quot;</span>, <span class="string">&quot;Unity-AssetStore-Originals-Logo-White&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Unity-AssetStore-Originals-Logo-White@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Audio Mixer&quot;</span>, <span class="string">&quot;Audio Mixer@2x&quot;</span>, <span class="string">&quot;AutoLightbakingOff&quot;</span>, <span class="string">&quot;AutoLightbakingOff@2x&quot;</span>, <span class="string">&quot;AutoLightbakingOn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AutoLightbakingOn@2x&quot;</span>, <span class="string">&quot;AvatarCompass&quot;</span>, <span class="string">&quot;AvatarController.Layer&quot;</span>, <span class="string">&quot;AvatarController.LayerHover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AvatarController.LayerSelected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BodyPartPicker&quot;</span>, <span class="string">&quot;BodySilhouette&quot;</span>, <span class="string">&quot;DotFill&quot;</span>, <span class="string">&quot;DotFrame&quot;</span>, <span class="string">&quot;DotFrameDotted&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DotSelection&quot;</span>, <span class="string">&quot;Head&quot;</span>, <span class="string">&quot;HeadIk&quot;</span>, <span class="string">&quot;HeadZoom&quot;</span>, <span class="string">&quot;HeadZoomSilhouette&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LeftArm&quot;</span>, <span class="string">&quot;LeftFeetIk&quot;</span>, <span class="string">&quot;LeftFingers&quot;</span>, <span class="string">&quot;LeftFingersIk&quot;</span>, <span class="string">&quot;LeftHandZoom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LeftHandZoomSilhouette&quot;</span>, <span class="string">&quot;LeftLeg&quot;</span>, <span class="string">&quot;MaskEditor_Root&quot;</span>, <span class="string">&quot;RightArm&quot;</span>, <span class="string">&quot;RightFeetIk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RightFingers&quot;</span>, <span class="string">&quot;RightFingersIk&quot;</span>, <span class="string">&quot;RightHandZoom&quot;</span>, <span class="string">&quot;RightHandZoomSilhouette&quot;</span>, <span class="string">&quot;RightLeg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Torso&quot;</span>, <span class="string">&quot;AvatarPivot&quot;</span>, <span class="string">&quot;AvatarPivot@2x&quot;</span>, <span class="string">&quot;AvatarSelector&quot;</span>, <span class="string">&quot;AvatarSelector@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;back&quot;</span>, <span class="string">&quot;back@2x&quot;</span>, <span class="string">&quot;beginButton-On&quot;</span>, <span class="string">&quot;beginButton&quot;</span>, <span class="string">&quot;blendKey&quot;</span>,</span><br><span class="line">            <span class="string">&quot;blendKeyOverlay&quot;</span>, <span class="string">&quot;blendKeySelected&quot;</span>, <span class="string">&quot;blendSampler&quot;</span>, <span class="string">&quot;blueGroove&quot;</span>, <span class="string">&quot;BuildSettings.Android On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Android On@2x&quot;</span>, <span class="string">&quot;BuildSettings.Android&quot;</span>, <span class="string">&quot;BuildSettings.Android.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Android.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.Android@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Broadcom&quot;</span>, <span class="string">&quot;BuildSettings.Editor&quot;</span>, <span class="string">&quot;BuildSettings.Editor.Small&quot;</span>, <span class="string">&quot;BuildSettings.Facebook On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Facebook On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Facebook&quot;</span>, <span class="string">&quot;BuildSettings.Facebook.Small&quot;</span>, <span class="string">&quot;BuildSettings.Facebook.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Facebook@2x&quot;</span>, <span class="string">&quot;BuildSettings.FlashPlayer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.FlashPlayer.Small&quot;</span>, <span class="string">&quot;BuildSettings.iPhone On&quot;</span>, <span class="string">&quot;BuildSettings.iPhone On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.iPhone&quot;</span>, <span class="string">&quot;BuildSettings.iPhone.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.iPhone.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.iPhone@2x&quot;</span>, <span class="string">&quot;BuildSettings.Lumin On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Lumin On@2x&quot;</span>, <span class="string">&quot;BuildSettings.Lumin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Lumin.small&quot;</span>, <span class="string">&quot;BuildSettings.Lumin.small@2x&quot;</span>, <span class="string">&quot;BuildSettings.Lumin@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Metro On&quot;</span>, <span class="string">&quot;BuildSettings.Metro On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Metro&quot;</span>, <span class="string">&quot;BuildSettings.Metro.Small&quot;</span>, <span class="string">&quot;BuildSettings.Metro.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Metro@2x&quot;</span>, <span class="string">&quot;BuildSettings.N3DS On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.N3DS On@2x&quot;</span>, <span class="string">&quot;BuildSettings.N3DS&quot;</span>, <span class="string">&quot;BuildSettings.N3DS.Small&quot;</span>, <span class="string">&quot;BuildSettings.N3DS.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.N3DS@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.PS4 On&quot;</span>, <span class="string">&quot;BuildSettings.PS4 On@2x&quot;</span>, <span class="string">&quot;BuildSettings.PS4&quot;</span>, <span class="string">&quot;BuildSettings.PS4.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.PS4.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.PS4@2x&quot;</span>, <span class="string">&quot;BuildSettings.PSM&quot;</span>, <span class="string">&quot;BuildSettings.PSM.Small&quot;</span>, <span class="string">&quot;BuildSettings.PSP2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.PSP2.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.SelectedIcon&quot;</span>, <span class="string">&quot;BuildSettings.Stadia On&quot;</span>, <span class="string">&quot;BuildSettings.Stadia On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Stadia&quot;</span>, <span class="string">&quot;BuildSettings.Stadia.small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Stadia.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.Stadia@2x&quot;</span>, <span class="string">&quot;BuildSettings.Standalone On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Standalone On@2x&quot;</span>, <span class="string">&quot;BuildSettings.Standalone&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Standalone.Small&quot;</span>, <span class="string">&quot;BuildSettings.Standalone.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.Standalone@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.StandaloneBroadcom.Small&quot;</span>, <span class="string">&quot;BuildSettings.StandaloneGLES20Emu.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.StandaloneGLESEmu&quot;</span>, <span class="string">&quot;BuildSettings.StandaloneGLESEmu.Small&quot;</span>, <span class="string">&quot;BuildSettings.Switch On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Switch On@2x&quot;</span>, <span class="string">&quot;BuildSettings.Switch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Switch.Small&quot;</span>, <span class="string">&quot;BuildSettings.Switch.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.Switch@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.tvOS On&quot;</span>, <span class="string">&quot;BuildSettings.tvOS On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.tvOS&quot;</span>, <span class="string">&quot;BuildSettings.tvOS.Small&quot;</span>, <span class="string">&quot;BuildSettings.tvOS.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.tvOS@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Web&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Web.Small&quot;</span>, <span class="string">&quot;BuildSettings.WebGL On&quot;</span>, <span class="string">&quot;BuildSettings.WebGL On@2x&quot;</span>, <span class="string">&quot;BuildSettings.WebGL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.WebGL.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.WebGL.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.WebGL@2x&quot;</span>, <span class="string">&quot;BuildSettings.WP8&quot;</span>, <span class="string">&quot;BuildSettings.WP8.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Xbox360&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.Xbox360.Small&quot;</span>, <span class="string">&quot;BuildSettings.XboxOne On&quot;</span>, <span class="string">&quot;BuildSettings.XboxOne On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.XboxOne&quot;</span>, <span class="string">&quot;BuildSettings.XboxOne.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BuildSettings.XboxOne.Small@2x&quot;</span>, <span class="string">&quot;BuildSettings.XboxOne@2x&quot;</span>, <span class="string">&quot;CacheServerConnected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CacheServerConnected@2x&quot;</span>, <span class="string">&quot;CacheServerDisabled&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CacheServerDisabled@2x&quot;</span>, <span class="string">&quot;CacheServerDisconnected&quot;</span>, <span class="string">&quot;CacheServerDisconnected@2x&quot;</span>, <span class="string">&quot;CheckerFloor&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Clipboard&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ClothInspector.PaintTool&quot;</span>, <span class="string">&quot;ClothInspector.PaintValue&quot;</span>, <span class="string">&quot;ClothInspector.SelectTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ClothInspector.SettingsTool&quot;</span>, <span class="string">&quot;ClothInspector.ViewValue&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CloudConnect&quot;</span>, <span class="string">&quot;CloudConnect@2x&quot;</span>, <span class="string">&quot;Collab.Build&quot;</span>, <span class="string">&quot;Collab.BuildFailed&quot;</span>, <span class="string">&quot;Collab.BuildSucceeded&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Collab.FileAdded&quot;</span>, <span class="string">&quot;Collab.FileConflict&quot;</span>, <span class="string">&quot;Collab.FileDeleted&quot;</span>, <span class="string">&quot;Collab.FileIgnored&quot;</span>, <span class="string">&quot;Collab.FileMoved&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Collab.FileUpdated&quot;</span>, <span class="string">&quot;Collab.FolderAdded&quot;</span>, <span class="string">&quot;Collab.FolderConflict&quot;</span>, <span class="string">&quot;Collab.FolderDeleted&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Collab.FolderIgnored&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Collab.FolderMoved&quot;</span>, <span class="string">&quot;Collab.FolderUpdated&quot;</span>, <span class="string">&quot;Collab.NoInternet&quot;</span>, <span class="string">&quot;Collab&quot;</span>, <span class="string">&quot;Collab.Warning&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Collab@2x&quot;</span>, <span class="string">&quot;CollabConflict&quot;</span>, <span class="string">&quot;CollabError&quot;</span>, <span class="string">&quot;CollabNew&quot;</span>, <span class="string">&quot;CollabOffline&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CollabProgress&quot;</span>, <span class="string">&quot;CollabPull&quot;</span>, <span class="string">&quot;CollabPush&quot;</span>, <span class="string">&quot;ColorPicker.ColorCycle&quot;</span>, <span class="string">&quot;ColorPicker.CycleColor&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ColorPicker.CycleSlider&quot;</span>, <span class="string">&quot;ColorPicker.SliderCycle&quot;</span>, <span class="string">&quot;console.erroricon.inactive.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.erroricon.inactive.sml@2x&quot;</span>, <span class="string">&quot;console.erroricon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.erroricon.sml&quot;</span>, <span class="string">&quot;console.erroricon.sml@2x&quot;</span>, <span class="string">&quot;console.erroricon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.infoicon.inactive.sml&quot;</span>, <span class="string">&quot;console.infoicon.inactive.sml@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.infoicon&quot;</span>, <span class="string">&quot;console.infoicon.sml&quot;</span>, <span class="string">&quot;console.infoicon.sml@2x&quot;</span>, <span class="string">&quot;console.infoicon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.warnicon.inactive.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.warnicon.inactive.sml@2x&quot;</span>, <span class="string">&quot;console.warnicon&quot;</span>, <span class="string">&quot;console.warnicon.sml&quot;</span>, <span class="string">&quot;console.warnicon.sml@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;console.warnicon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CreateAddNew&quot;</span>, <span class="string">&quot;CreateAddNew@2x&quot;</span>, <span class="string">&quot;CrossIcon&quot;</span>, <span class="string">&quot;curvekeyframe&quot;</span>, <span class="string">&quot;curvekeyframeselected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;curvekeyframeselectedoverlay&quot;</span>, <span class="string">&quot;curvekeyframesemiselectedoverlay&quot;</span>, <span class="string">&quot;curvekeyframeweighted&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CustomSorting&quot;</span>, <span class="string">&quot;CustomTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CustomTool@2x&quot;</span>, <span class="string">&quot;d__Help&quot;</span>, <span class="string">&quot;d__Help@2x&quot;</span>, <span class="string">&quot;d__Menu&quot;</span>, <span class="string">&quot;d__Menu@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d__Popup&quot;</span>, <span class="string">&quot;d__Popup@2x&quot;</span>, <span class="string">&quot;d_aboutwindow.mainheader&quot;</span>, <span class="string">&quot;d_ageialogo&quot;</span>, <span class="string">&quot;d_AlphabeticalSorting&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AlphabeticalSorting@2x&quot;</span>, <span class="string">&quot;d_Animation.AddEvent&quot;</span>, <span class="string">&quot;d_Animation.AddKeyframe&quot;</span>, <span class="string">&quot;d_Animation.EventMarker&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Animation.FilterBySelection&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Animation.FirstKey&quot;</span>, <span class="string">&quot;d_Animation.LastKey&quot;</span>, <span class="string">&quot;d_Animation.NextKey&quot;</span>, <span class="string">&quot;d_Animation.Play&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Animation.PrevKey&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Animation.Record&quot;</span>, <span class="string">&quot;d_Animation.Record@2x&quot;</span>, <span class="string">&quot;d_Animation.SequencerLink&quot;</span>, <span class="string">&quot;d_animationanimated&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_animationkeyframe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_animationnocurve&quot;</span>, <span class="string">&quot;d_animationvisibilitytoggleoff&quot;</span>, <span class="string">&quot;d_animationvisibilitytoggleoff@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_animationvisibilitytoggleon&quot;</span>, <span class="string">&quot;d_animationvisibilitytoggleon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnimationWrapModeMenu&quot;</span>, <span class="string">&quot;d_AS Badge Delete&quot;</span>, <span class="string">&quot;d_AS Badge New&quot;</span>, <span class="string">&quot;d_AssemblyLock&quot;</span>, <span class="string">&quot;d_Asset Store&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Asset Store@2x&quot;</span>, <span class="string">&quot;d_Audio Mixer&quot;</span>, <span class="string">&quot;d_Audio Mixer@2x&quot;</span>, <span class="string">&quot;d_AutoLightbakingOff&quot;</span>, <span class="string">&quot;d_AutoLightbakingOff@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AutoLightbakingOn&quot;</span>, <span class="string">&quot;d_AutoLightbakingOn@2x&quot;</span>, <span class="string">&quot;d_AvatarBlendBackground&quot;</span>, <span class="string">&quot;d_AvatarBlendLeft&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AvatarBlendLeftA&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AvatarBlendRight&quot;</span>, <span class="string">&quot;d_AvatarBlendRightA&quot;</span>, <span class="string">&quot;d_AvatarCompass&quot;</span>, <span class="string">&quot;d_AvatarPivot&quot;</span>, <span class="string">&quot;d_AvatarPivot@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AvatarSelector&quot;</span>, <span class="string">&quot;d_AvatarSelector@2x&quot;</span>, <span class="string">&quot;d_back&quot;</span>, <span class="string">&quot;d_back@2x&quot;</span>, <span class="string">&quot;d_beginButton-On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_beginButton&quot;</span>, <span class="string">&quot;d_blueGroove&quot;</span>, <span class="string">&quot;d_BuildSettings.Android&quot;</span>, <span class="string">&quot;d_BuildSettings.Android.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Android.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Android@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Broadcom&quot;</span>, <span class="string">&quot;d_BuildSettings.Facebook&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Facebook.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.Facebook.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Facebook@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.FlashPlayer&quot;</span>, <span class="string">&quot;d_BuildSettings.FlashPlayer.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.iPhone&quot;</span>, <span class="string">&quot;d_BuildSettings.iPhone.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.iPhone.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.iPhone@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Lumin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Lumin.small&quot;</span>, <span class="string">&quot;d_BuildSettings.Lumin.small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Lumin@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Metro&quot;</span>, <span class="string">&quot;d_BuildSettings.Metro.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Metro.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Metro@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.N3DS&quot;</span>, <span class="string">&quot;d_BuildSettings.N3DS.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.N3DS.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.N3DS@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.PS4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.PS4.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.PS4.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.PS4@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.PSP2&quot;</span>, <span class="string">&quot;d_BuildSettings.PSP2.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.SelectedIcon&quot;</span>, <span class="string">&quot;d_BuildSettings.Stadia&quot;</span>, <span class="string">&quot;d_BuildSettings.Stadia.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Stadia.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Stadia@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Standalone&quot;</span>, <span class="string">&quot;d_BuildSettings.Standalone.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.Standalone.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Standalone@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Switch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Switch.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.Switch.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Switch@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.tvOS&quot;</span>, <span class="string">&quot;d_BuildSettings.tvOS.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.tvOS.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.tvOS@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Web&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Web.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.WebGL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.WebGL.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.WebGL.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.WebGL@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Xbox360&quot;</span>, <span class="string">&quot;d_BuildSettings.Xbox360.Small&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.XboxOne&quot;</span>, <span class="string">&quot;d_BuildSettings.XboxOne.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.XboxOne.Small@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.XboxOne@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Xiaomi&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BuildSettings.Xiaomi.Small&quot;</span>, <span class="string">&quot;d_BuildSettings.Xiaomi.Small@2x&quot;</span>, <span class="string">&quot;d_BuildSettings.Xiaomi@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CacheServerConnected&quot;</span>, <span class="string">&quot;d_CacheServerConnected@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CacheServerDisabled&quot;</span>, <span class="string">&quot;d_CacheServerDisabled@2x&quot;</span>, <span class="string">&quot;d_CacheServerDisconnected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CacheServerDisconnected@2x&quot;</span>, <span class="string">&quot;d_CheckerFloor&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CloudConnect&quot;</span>, <span class="string">&quot;d_CloudConnect@2x&quot;</span>, <span class="string">&quot;d_Collab.FileAdded&quot;</span>, <span class="string">&quot;d_Collab.FileConflict&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab.FileDeleted&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab.FileIgnored&quot;</span>, <span class="string">&quot;d_Collab.FileMoved&quot;</span>, <span class="string">&quot;d_Collab.FileUpdated&quot;</span>, <span class="string">&quot;d_Collab.FolderAdded&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab.FolderConflict&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab.FolderDeleted&quot;</span>, <span class="string">&quot;d_Collab.FolderIgnored&quot;</span>, <span class="string">&quot;d_Collab.FolderMoved&quot;</span>, <span class="string">&quot;d_Collab.FolderUpdated&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Collab@2x&quot;</span>, <span class="string">&quot;d_ColorPicker.CycleColor&quot;</span>, <span class="string">&quot;d_ColorPicker.CycleSlider&quot;</span>, <span class="string">&quot;d_console.erroricon.inactive.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.erroricon.inactive.sml@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.erroricon&quot;</span>, <span class="string">&quot;d_console.erroricon.sml&quot;</span>, <span class="string">&quot;d_console.erroricon.sml@2x&quot;</span>, <span class="string">&quot;d_console.erroricon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.infoicon.inactive.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.infoicon.inactive.sml@2x&quot;</span>, <span class="string">&quot;d_console.infoicon&quot;</span>, <span class="string">&quot;d_console.infoicon.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.infoicon.sml@2x&quot;</span>, <span class="string">&quot;d_console.infoicon@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.warnicon.inactive.sml&quot;</span>, <span class="string">&quot;d_console.warnicon.inactive.sml@2x&quot;</span>, <span class="string">&quot;d_console.warnicon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.warnicon.sml&quot;</span>, <span class="string">&quot;d_console.warnicon.sml@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_console.warnicon@2x&quot;</span>, <span class="string">&quot;d_CreateAddNew&quot;</span>, <span class="string">&quot;d_CreateAddNew@2x&quot;</span>, <span class="string">&quot;d_curvekeyframe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_curvekeyframeselected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_curvekeyframeselectedoverlay&quot;</span>, <span class="string">&quot;d_curvekeyframesemiselectedoverlay&quot;</span>, <span class="string">&quot;d_curvekeyframeweighted&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CustomSorting&quot;</span>, <span class="string">&quot;d_CustomTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CustomTool@2x&quot;</span>, <span class="string">&quot;d_DebuggerAttached&quot;</span>, <span class="string">&quot;d_DebuggerAttached@2x&quot;</span>, <span class="string">&quot;d_DebuggerDisabled&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_DebuggerDisabled@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_DebuggerEnabled&quot;</span>, <span class="string">&quot;d_DebuggerEnabled@2x&quot;</span>, <span class="string">&quot;d_DefaultSorting&quot;</span>, <span class="string">&quot;d_DefaultSorting@2x&quot;</span>, <span class="string">&quot;d_EditCollider&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_editcollision_16&quot;</span>, <span class="string">&quot;d_editcollision_16@2x&quot;</span>, <span class="string">&quot;d_editcollision_32&quot;</span>, <span class="string">&quot;d_editconstraints_16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_editconstraints_16@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_editconstraints_32&quot;</span>, <span class="string">&quot;d_editicon.sml&quot;</span>, <span class="string">&quot;d_endButton-On&quot;</span>, <span class="string">&quot;d_endButton&quot;</span>, <span class="string">&quot;d_Exposure&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Exposure@2x&quot;</span>, <span class="string">&quot;d_eyeDropper.Large&quot;</span>, <span class="string">&quot;d_eyeDropper.Large@2x&quot;</span>, <span class="string">&quot;d_eyeDropper.sml&quot;</span>, <span class="string">&quot;d_Favorite&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Favorite@2x&quot;</span>, <span class="string">&quot;d_FilterByLabel&quot;</span>, <span class="string">&quot;d_FilterByLabel@2x&quot;</span>, <span class="string">&quot;d_FilterByType&quot;</span>, <span class="string">&quot;d_FilterByType@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_FilterSelectedOnly&quot;</span>, <span class="string">&quot;d_FilterSelectedOnly@2x&quot;</span>, <span class="string">&quot;d_forward&quot;</span>, <span class="string">&quot;d_forward@2x&quot;</span>, <span class="string">&quot;d_FrameCapture&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_FrameCapture@2x&quot;</span>, <span class="string">&quot;d_GEAR&quot;</span>, <span class="string">&quot;d_Grid.BoxTool&quot;</span>, <span class="string">&quot;d_Grid.BoxTool@2x&quot;</span>, <span class="string">&quot;d_Grid.Default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Grid.Default@2x&quot;</span>, <span class="string">&quot;d_Grid.EraserTool&quot;</span>, <span class="string">&quot;d_Grid.EraserTool@2x&quot;</span>, <span class="string">&quot;d_Grid.FillTool&quot;</span>, <span class="string">&quot;d_Grid.FillTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Grid.MoveTool&quot;</span>, <span class="string">&quot;d_Grid.MoveTool@2x&quot;</span>, <span class="string">&quot;d_Grid.PaintTool&quot;</span>, <span class="string">&quot;d_Grid.PaintTool@2x&quot;</span>, <span class="string">&quot;d_Grid.PickingTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Grid.PickingTool@2x&quot;</span>, <span class="string">&quot;d_Groove&quot;</span>, <span class="string">&quot;d_HorizontalSplit&quot;</span>, <span class="string">&quot;d_icon dropdown&quot;</span>, <span class="string">&quot;d_icon dropdown@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Import&quot;</span>, <span class="string">&quot;d_Import@2x&quot;</span>, <span class="string">&quot;d_InspectorLock&quot;</span>, <span class="string">&quot;d_Invalid&quot;</span>, <span class="string">&quot;d_Invalid@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_JointAngularLimits&quot;</span>, <span class="string">&quot;d_leftBracket&quot;</span>, <span class="string">&quot;d_Lighting&quot;</span>, <span class="string">&quot;d_Lighting@2x&quot;</span>, <span class="string">&quot;d_LightmapEditor.WindowTitle&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_LightmapEditor.WindowTitle@2x&quot;</span>, <span class="string">&quot;d_Linked&quot;</span>, <span class="string">&quot;d_Linked@2x&quot;</span>, <span class="string">&quot;d_MainStageView&quot;</span>, <span class="string">&quot;d_MainStageView@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Mirror&quot;</span>, <span class="string">&quot;d_model large&quot;</span>, <span class="string">&quot;d_monologo&quot;</span>, <span class="string">&quot;d_MoreOptions&quot;</span>, <span class="string">&quot;d_MoreOptions@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_MoveTool on&quot;</span>, <span class="string">&quot;d_MoveTool On@2x&quot;</span>, <span class="string">&quot;d_MoveTool&quot;</span>, <span class="string">&quot;d_MoveTool@2x&quot;</span>, <span class="string">&quot;d_Navigation&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Occlusion&quot;</span>, <span class="string">&quot;d_Occlusion@2x&quot;</span>, <span class="string">&quot;d_Package Manager&quot;</span>, <span class="string">&quot;d_Package Manager@2x&quot;</span>, <span class="string">&quot;d_Particle Effect&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ParticleShapeTool On&quot;</span>, <span class="string">&quot;d_ParticleShapeTool On@2x&quot;</span>, <span class="string">&quot;d_ParticleShapeTool On@3x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ParticleShapeTool On@4x&quot;</span>, <span class="string">&quot;d_ParticleShapeTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ParticleShapeTool@2x&quot;</span>, <span class="string">&quot;d_ParticleShapeTool@3x&quot;</span>, <span class="string">&quot;d_ParticleShapeTool@4x&quot;</span>, <span class="string">&quot;d_PauseButton On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PauseButton On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PauseButton&quot;</span>, <span class="string">&quot;d_PauseButton@2x&quot;</span>, <span class="string">&quot;d_PlayButton On&quot;</span>, <span class="string">&quot;d_PlayButton On@2x&quot;</span>, <span class="string">&quot;d_PlayButton&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PlayButton@2x&quot;</span>, <span class="string">&quot;d_PlayButtonProfile On&quot;</span>, <span class="string">&quot;d_PlayButtonProfile&quot;</span>, <span class="string">&quot;d_playLoopOff&quot;</span>, <span class="string">&quot;d_playLoopOn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_preAudioAutoPlayOff&quot;</span>, <span class="string">&quot;d_preAudioAutoPlayOff@2x&quot;</span>, <span class="string">&quot;d_preAudioAutoPlayOn&quot;</span>, <span class="string">&quot;d_preAudioLoopOff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_preAudioLoopOff@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_preAudioLoopOn&quot;</span>, <span class="string">&quot;d_preAudioPlayOff&quot;</span>, <span class="string">&quot;d_preAudioPlayOn&quot;</span>, <span class="string">&quot;d_PreMatCube&quot;</span>, <span class="string">&quot;d_PreMatCube@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreMatCylinder&quot;</span>, <span class="string">&quot;d_PreMatCylinder@2x&quot;</span>, <span class="string">&quot;d_PreMatLight0&quot;</span>, <span class="string">&quot;d_PreMatLight0@2x&quot;</span>, <span class="string">&quot;d_PreMatLight1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreMatLight1@2x&quot;</span>, <span class="string">&quot;d_PreMatQuad&quot;</span>, <span class="string">&quot;d_PreMatQuad@2x&quot;</span>, <span class="string">&quot;d_PreMatSphere&quot;</span>, <span class="string">&quot;d_PreMatSphere@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreMatTorus&quot;</span>, <span class="string">&quot;d_PreMatTorus@2x&quot;</span>, <span class="string">&quot;d_Preset.Context&quot;</span>, <span class="string">&quot;d_Preset.Context@2x&quot;</span>, <span class="string">&quot;d_PreTexA&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreTexA@2x&quot;</span>, <span class="string">&quot;d_PreTexB&quot;</span>, <span class="string">&quot;d_PreTexB@2x&quot;</span>, <span class="string">&quot;d_PreTexG&quot;</span>, <span class="string">&quot;d_PreTexG@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreTexR&quot;</span>, <span class="string">&quot;d_PreTexR@2x&quot;</span>, <span class="string">&quot;d_PreTexRGB&quot;</span>, <span class="string">&quot;d_PreTexRGB@2x&quot;</span>, <span class="string">&quot;d_PreTextureAlpha&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PreTextureMipMapHigh&quot;</span>, <span class="string">&quot;d_PreTextureMipMapLow&quot;</span>, <span class="string">&quot;d_PreTextureRGB&quot;</span>, <span class="string">&quot;d_Profiler.Audio&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.Audio@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.CPU&quot;</span>, <span class="string">&quot;d_Profiler.CPU@2x&quot;</span>, <span class="string">&quot;d_Profiler.FirstFrame&quot;</span>, <span class="string">&quot;d_Profiler.GlobalIllumination&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.GlobalIllumination@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.GPU&quot;</span>, <span class="string">&quot;d_Profiler.GPU@2x&quot;</span>, <span class="string">&quot;d_Profiler.LastFrame&quot;</span>, <span class="string">&quot;d_Profiler.Memory&quot;</span>, <span class="string">&quot;d_Profiler.Memory@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.Network&quot;</span>, <span class="string">&quot;d_Profiler.NetworkMessages&quot;</span>, <span class="string">&quot;d_Profiler.NetworkMessages@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.NetworkOperations&quot;</span>, <span class="string">&quot;d_Profiler.NetworkOperations@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.NextFrame&quot;</span>, <span class="string">&quot;d_Profiler.Physics&quot;</span>, <span class="string">&quot;d_Profiler.Physics2D&quot;</span>, <span class="string">&quot;d_Profiler.Physics2D@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.Physics@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.PrevFrame&quot;</span>, <span class="string">&quot;d_Profiler.Record&quot;</span>, <span class="string">&quot;d_Profiler.Rendering&quot;</span>, <span class="string">&quot;d_Profiler.Rendering@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.UI&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.UI@2x&quot;</span>, <span class="string">&quot;d_Profiler.UIDetails&quot;</span>, <span class="string">&quot;d_Profiler.UIDetails@2x&quot;</span>, <span class="string">&quot;d_Profiler.Video&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Profiler.Video@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ProfilerColumn.WarningCount&quot;</span>, <span class="string">&quot;d_Progress&quot;</span>, <span class="string">&quot;d_Progress@2x&quot;</span>, <span class="string">&quot;d_Project&quot;</span>, <span class="string">&quot;d_Project@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Record Off&quot;</span>, <span class="string">&quot;d_Record Off@2x&quot;</span>, <span class="string">&quot;d_Record On&quot;</span>, <span class="string">&quot;d_Record On@2x&quot;</span>, <span class="string">&quot;d_RectTool On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_RectTool On@2x&quot;</span>, <span class="string">&quot;d_RectTool&quot;</span>, <span class="string">&quot;d_RectTool@2x&quot;</span>, <span class="string">&quot;d_RectTransformBlueprint&quot;</span>, <span class="string">&quot;d_RectTransformRaw&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_redGroove&quot;</span>, <span class="string">&quot;d_ReflectionProbeSelector&quot;</span>, <span class="string">&quot;d_ReflectionProbeSelector@2x&quot;</span>, <span class="string">&quot;d_Refresh&quot;</span>, <span class="string">&quot;d_Refresh@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_rightBracket&quot;</span>, <span class="string">&quot;d_RotateTool On&quot;</span>, <span class="string">&quot;d_RotateTool On@2x&quot;</span>, <span class="string">&quot;d_RotateTool&quot;</span>, <span class="string">&quot;d_RotateTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SaveAs&quot;</span>, <span class="string">&quot;d_SaveAs@2x&quot;</span>, <span class="string">&quot;d_ScaleTool On&quot;</span>, <span class="string">&quot;d_ScaleTool On@2x&quot;</span>, <span class="string">&quot;d_ScaleTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ScaleTool@2x&quot;</span>, <span class="string">&quot;d_scenepicking_notpickable-mixed&quot;</span>, <span class="string">&quot;d_scenepicking_notpickable-mixed@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_notpickable-mixed_hover&quot;</span>, <span class="string">&quot;d_scenepicking_notpickable-mixed_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_notpickable&quot;</span>, <span class="string">&quot;d_scenepicking_notpickable@2x&quot;</span>, <span class="string">&quot;d_scenepicking_notpickable_hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_notpickable_hover@2x&quot;</span>, <span class="string">&quot;d_scenepicking_pickable-mixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_pickable-mixed@2x&quot;</span>, <span class="string">&quot;d_scenepicking_pickable-mixed_hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_pickable-mixed_hover@2x&quot;</span>, <span class="string">&quot;d_scenepicking_pickable&quot;</span>, <span class="string">&quot;d_scenepicking_pickable@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenepicking_pickable_hover&quot;</span>, <span class="string">&quot;d_scenepicking_pickable_hover@2x&quot;</span>, <span class="string">&quot;d_SceneView2D&quot;</span>, <span class="string">&quot;d_SceneView2D@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewAlpha&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewAudio Off&quot;</span>, <span class="string">&quot;d_SceneViewAudio Off@2x&quot;</span>, <span class="string">&quot;d_SceneViewAudio&quot;</span>, <span class="string">&quot;d_SceneViewAudio@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewCamera&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewCamera@2x&quot;</span>, <span class="string">&quot;d_SceneViewFx&quot;</span>, <span class="string">&quot;d_SceneViewFX@2x&quot;</span>, <span class="string">&quot;d_SceneViewLighting Off&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewLighting Off@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewLighting&quot;</span>, <span class="string">&quot;d_SceneViewLighting@2x&quot;</span>, <span class="string">&quot;d_SceneViewOrtho&quot;</span>, <span class="string">&quot;d_SceneViewRGB&quot;</span>, <span class="string">&quot;d_SceneViewTools&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewTools@2x&quot;</span>, <span class="string">&quot;d_SceneViewVisibility&quot;</span>, <span class="string">&quot;d_SceneViewVisibility@2x&quot;</span>, <span class="string">&quot;d_scenevis_hidden-mixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_hidden-mixed@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_hidden-mixed_hover&quot;</span>, <span class="string">&quot;d_scenevis_hidden-mixed_hover@2x&quot;</span>, <span class="string">&quot;d_scenevis_hidden&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_hidden@2x&quot;</span>, <span class="string">&quot;d_scenevis_hidden_hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_hidden_hover@2x&quot;</span>, <span class="string">&quot;d_scenevis_scene_hover&quot;</span>, <span class="string">&quot;d_scenevis_scene_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_visible-mixed&quot;</span>, <span class="string">&quot;d_scenevis_visible-mixed@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_visible-mixed_hover&quot;</span>, <span class="string">&quot;d_scenevis_visible-mixed_hover@2x&quot;</span>, <span class="string">&quot;d_scenevis_visible&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_visible@2x&quot;</span>, <span class="string">&quot;d_scenevis_visible_hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_scenevis_visible_hover@2x&quot;</span>, <span class="string">&quot;d_ScrollShadow&quot;</span>, <span class="string">&quot;d_Settings&quot;</span>, <span class="string">&quot;d_Settings@2x&quot;</span>, <span class="string">&quot;d_SettingsIcon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SettingsIcon@2x&quot;</span>, <span class="string">&quot;d_SocialNetworks.FacebookShare&quot;</span>, <span class="string">&quot;d_SocialNetworks.LinkedInShare&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SocialNetworks.Tweet&quot;</span>, <span class="string">&quot;d_SocialNetworks.UDNOpen&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SpeedScale&quot;</span>, <span class="string">&quot;d_StepButton On&quot;</span>, <span class="string">&quot;d_StepButton On@2x&quot;</span>, <span class="string">&quot;d_StepButton&quot;</span>, <span class="string">&quot;d_StepButton@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_StepLeftButton-On&quot;</span>, <span class="string">&quot;d_StepLeftButton&quot;</span>, <span class="string">&quot;d_tab_next&quot;</span>, <span class="string">&quot;d_tab_next@2x&quot;</span>, <span class="string">&quot;d_tab_prev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_tab_prev@2x&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolLower On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolLowerAlt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolPlants On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolPlants&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolPlantsAlt On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolPlantsAlt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolRaise On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolRaise&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSetheight On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSetheight&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolSetheightAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSetheightAlt&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolSettings On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSettings&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSmoothHeight On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolSmoothHeight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSplat On&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolSplat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSplatAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolSplatAlt&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolTrees On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolTrees&quot;</span>, <span class="string">&quot;d_TerrainInspector.TerrainToolTreesAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TerrainInspector.TerrainToolTreesAlt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToggleUVOverlay&quot;</span>, <span class="string">&quot;d_ToggleUVOverlay@2x&quot;</span>, <span class="string">&quot;d_Toolbar Minus&quot;</span>, <span class="string">&quot;d_Toolbar Minus@2x&quot;</span>, <span class="string">&quot;d_Toolbar Plus More&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Toolbar Plus More@2x&quot;</span>, <span class="string">&quot;d_Toolbar Plus&quot;</span>, <span class="string">&quot;d_Toolbar Plus@2x&quot;</span>, <span class="string">&quot;d_ToolHandleCenter&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToolHandleCenter@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToolHandleGlobal&quot;</span>, <span class="string">&quot;d_ToolHandleGlobal@2x&quot;</span>, <span class="string">&quot;d_ToolHandleLocal&quot;</span>, <span class="string">&quot;d_ToolHandleLocal@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToolHandlePivot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToolHandlePivot@2x&quot;</span>, <span class="string">&quot;d_ToolsIcon&quot;</span>, <span class="string">&quot;d_tranp&quot;</span>, <span class="string">&quot;d_TransformTool On&quot;</span>, <span class="string">&quot;d_TransformTool On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TransformTool&quot;</span>, <span class="string">&quot;d_TransformTool@2x&quot;</span>, <span class="string">&quot;d_tree_icon&quot;</span>, <span class="string">&quot;d_tree_icon_branch&quot;</span>, <span class="string">&quot;d_tree_icon_branch_frond&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_tree_icon_frond&quot;</span>, <span class="string">&quot;d_tree_icon_leaf&quot;</span>, <span class="string">&quot;d_TreeEditor.AddBranches&quot;</span>, <span class="string">&quot;d_TreeEditor.AddLeaves&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Branch On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Branch&quot;</span>, <span class="string">&quot;d_TreeEditor.BranchFreeHand On&quot;</span>, <span class="string">&quot;d_TreeEditor.BranchFreeHand&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.BranchRotate On&quot;</span>, <span class="string">&quot;d_TreeEditor.BranchRotate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.BranchScale On&quot;</span>, <span class="string">&quot;d_TreeEditor.BranchScale&quot;</span>, <span class="string">&quot;d_TreeEditor.BranchTranslate On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.BranchTranslate&quot;</span>, <span class="string">&quot;d_TreeEditor.Distribution On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Distribution&quot;</span>, <span class="string">&quot;d_TreeEditor.Duplicate&quot;</span>, <span class="string">&quot;d_TreeEditor.Geometry On&quot;</span>, <span class="string">&quot;d_TreeEditor.Geometry&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Leaf On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Leaf&quot;</span>, <span class="string">&quot;d_TreeEditor.LeafFreeHand On&quot;</span>, <span class="string">&quot;d_TreeEditor.LeafFreeHand&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.LeafRotate On&quot;</span>, <span class="string">&quot;d_TreeEditor.LeafRotate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.LeafScale On&quot;</span>, <span class="string">&quot;d_TreeEditor.LeafScale&quot;</span>, <span class="string">&quot;d_TreeEditor.LeafTranslate On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.LeafTranslate&quot;</span>, <span class="string">&quot;d_TreeEditor.Material On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Material&quot;</span>, <span class="string">&quot;d_TreeEditor.Refresh&quot;</span>, <span class="string">&quot;d_TreeEditor.Trash&quot;</span>, <span class="string">&quot;d_TreeEditor.Wind On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TreeEditor.Wind&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.AnimationWindow&quot;</span>, <span class="string">&quot;d_UnityEditor.AnimationWindow@2x&quot;</span>, <span class="string">&quot;d_UnityEditor.ConsoleWindow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.ConsoleWindow@2x&quot;</span>, <span class="string">&quot;d_UnityEditor.DebugInspectorWindow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.FindDependencies&quot;</span>, <span class="string">&quot;d_UnityEditor.GameView&quot;</span>, <span class="string">&quot;d_UnityEditor.GameView@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.Graphs.AnimatorControllerTool&quot;</span>, <span class="string">&quot;d_UnityEditor.Graphs.AnimatorControllerTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.HierarchyWindow&quot;</span>, <span class="string">&quot;d_UnityEditor.InspectorWindow&quot;</span>, <span class="string">&quot;d_UnityEditor.InspectorWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.ProfilerWindow&quot;</span>, <span class="string">&quot;d_UnityEditor.ProfilerWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.SceneHierarchyWindow&quot;</span>, <span class="string">&quot;d_UnityEditor.SceneHierarchyWindow@2x&quot;</span>, <span class="string">&quot;d_UnityEditor.SceneView&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.SceneView@2x&quot;</span>, <span class="string">&quot;d_UnityEditor.Timeline.TimelineWindow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_UnityEditor.Timeline.TimelineWindow@2x&quot;</span>, <span class="string">&quot;d_UnityEditor.VersionControl&quot;</span>, <span class="string">&quot;d_UnityLogo&quot;</span>, <span class="string">&quot;d_Unlinked&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Unlinked@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Valid&quot;</span>, <span class="string">&quot;d_Valid@2x&quot;</span>, <span class="string">&quot;d_VerticalSplit&quot;</span>, <span class="string">&quot;d_ViewToolMove On&quot;</span>, <span class="string">&quot;d_ViewToolMove On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ViewToolMove&quot;</span>, <span class="string">&quot;d_ViewToolMove@2x&quot;</span>, <span class="string">&quot;d_ViewToolOrbit On&quot;</span>, <span class="string">&quot;d_ViewToolOrbit On@2x&quot;</span>, <span class="string">&quot;d_ViewToolOrbit&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ViewToolOrbit@2x&quot;</span>, <span class="string">&quot;d_ViewToolZoom On&quot;</span>, <span class="string">&quot;d_ViewToolZoom On@2x&quot;</span>, <span class="string">&quot;d_ViewToolZoom&quot;</span>, <span class="string">&quot;d_ViewToolZoom@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_VisibilityOff&quot;</span>, <span class="string">&quot;d_VisibilityOn&quot;</span>, <span class="string">&quot;d_VUMeterTextureHorizontal&quot;</span>, <span class="string">&quot;d_VUMeterTextureVertical&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_WaitSpin00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_WaitSpin01&quot;</span>, <span class="string">&quot;d_WaitSpin02&quot;</span>, <span class="string">&quot;d_WaitSpin03&quot;</span>, <span class="string">&quot;d_WaitSpin04&quot;</span>, <span class="string">&quot;d_WaitSpin05&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_WaitSpin06&quot;</span>, <span class="string">&quot;d_WaitSpin07&quot;</span>, <span class="string">&quot;d_WaitSpin08&quot;</span>, <span class="string">&quot;d_WaitSpin09&quot;</span>, <span class="string">&quot;d_WaitSpin10&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_WaitSpin11&quot;</span>, <span class="string">&quot;d_WelcomeScreen.AssetStoreLogo&quot;</span>, <span class="string">&quot;d_winbtn_graph&quot;</span>, <span class="string">&quot;d_winbtn_graph_close_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_graph_max_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_graph_min_h&quot;</span>, <span class="string">&quot;d_winbtn_mac_close&quot;</span>, <span class="string">&quot;d_winbtn_mac_close@2x&quot;</span>, <span class="string">&quot;d_winbtn_mac_close_a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_close_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_close_h&quot;</span>, <span class="string">&quot;d_winbtn_mac_close_h@2x&quot;</span>, <span class="string">&quot;d_winbtn_mac_inact&quot;</span>, <span class="string">&quot;d_winbtn_mac_max&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_max@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_max_a&quot;</span>, <span class="string">&quot;d_winbtn_mac_max_a@2x&quot;</span>, <span class="string">&quot;d_winbtn_mac_max_h&quot;</span>, <span class="string">&quot;d_winbtn_mac_max_h@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_min&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_min@2x&quot;</span>, <span class="string">&quot;d_winbtn_mac_min_a&quot;</span>, <span class="string">&quot;d_winbtn_mac_min_a@2x&quot;</span>, <span class="string">&quot;d_winbtn_mac_min_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_mac_min_h@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_close&quot;</span>, <span class="string">&quot;d_winbtn_win_close@2x&quot;</span>, <span class="string">&quot;d_winbtn_win_close_a&quot;</span>, <span class="string">&quot;d_winbtn_win_close_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_close_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_close_h@2x&quot;</span>, <span class="string">&quot;d_winbtn_win_max&quot;</span>, <span class="string">&quot;d_winbtn_win_max@2x&quot;</span>, <span class="string">&quot;d_winbtn_win_max_a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_max_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_max_h&quot;</span>, <span class="string">&quot;d_winbtn_win_max_h@2x&quot;</span>, <span class="string">&quot;d_winbtn_win_min&quot;</span>, <span class="string">&quot;d_winbtn_win_min_a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_min_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_rest&quot;</span>, <span class="string">&quot;d_winbtn_win_rest_a&quot;</span>, <span class="string">&quot;d_winbtn_win_rest_h&quot;</span>, <span class="string">&quot;d_winbtn_win_restore&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_restore@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_restore_a&quot;</span>, <span class="string">&quot;d_winbtn_win_restore_a@2x&quot;</span>, <span class="string">&quot;d_winbtn_win_restore_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_winbtn_win_restore_h@2x&quot;</span>, <span class="string">&quot;DebuggerAttached&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DebuggerAttached@2x&quot;</span>, <span class="string">&quot;DebuggerDisabled&quot;</span>, <span class="string">&quot;DebuggerDisabled@2x&quot;</span>, <span class="string">&quot;DebuggerEnabled&quot;</span>, <span class="string">&quot;DebuggerEnabled@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DefaultSorting&quot;</span>, <span class="string">&quot;DefaultSorting@2x&quot;</span>, <span class="string">&quot;EditCollider&quot;</span>, <span class="string">&quot;editcollision_16&quot;</span>, <span class="string">&quot;editcollision_16@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;editcollision_32&quot;</span>, <span class="string">&quot;editconstraints_16&quot;</span>, <span class="string">&quot;editconstraints_16@2x&quot;</span>, <span class="string">&quot;editconstraints_32&quot;</span>, <span class="string">&quot;editicon.sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;endButton-On&quot;</span>, <span class="string">&quot;endButton&quot;</span>, <span class="string">&quot;Exposure&quot;</span>, <span class="string">&quot;Exposure@2x&quot;</span>, <span class="string">&quot;eyeDropper.Large&quot;</span>,</span><br><span class="line">            <span class="string">&quot;eyeDropper.Large@2x&quot;</span>, <span class="string">&quot;eyeDropper.sml&quot;</span>, <span class="string">&quot;Favorite&quot;</span>, <span class="string">&quot;Favorite@2x&quot;</span>, <span class="string">&quot;FilterByLabel&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FilterByLabel@2x&quot;</span>, <span class="string">&quot;FilterByType&quot;</span>, <span class="string">&quot;FilterByType@2x&quot;</span>, <span class="string">&quot;FilterSelectedOnly&quot;</span>, <span class="string">&quot;FilterSelectedOnly@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;forward&quot;</span>, <span class="string">&quot;forward@2x&quot;</span>, <span class="string">&quot;FrameCapture&quot;</span>, <span class="string">&quot;FrameCapture@2x&quot;</span>, <span class="string">&quot;GEAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Grid.BoxTool&quot;</span>, <span class="string">&quot;Grid.BoxTool@2x&quot;</span>, <span class="string">&quot;Grid.Default&quot;</span>, <span class="string">&quot;Grid.Default@2x&quot;</span>, <span class="string">&quot;Grid.EraserTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Grid.EraserTool@2x&quot;</span>, <span class="string">&quot;Grid.FillTool&quot;</span>, <span class="string">&quot;Grid.FillTool@2x&quot;</span>, <span class="string">&quot;Grid.MoveTool&quot;</span>, <span class="string">&quot;Grid.MoveTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Grid.PaintTool&quot;</span>, <span class="string">&quot;Grid.PaintTool@2x&quot;</span>, <span class="string">&quot;Grid.PickingTool&quot;</span>, <span class="string">&quot;Grid.PickingTool@2x&quot;</span>, <span class="string">&quot;Groove&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_horizontally&quot;</span>, <span class="string">&quot;align_horizontally_center&quot;</span>, <span class="string">&quot;align_horizontally_center_active&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_horizontally_left&quot;</span>, <span class="string">&quot;align_horizontally_left_active&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_horizontally_right&quot;</span>, <span class="string">&quot;align_horizontally_right_active&quot;</span>, <span class="string">&quot;align_vertically&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_vertically_bottom&quot;</span>, <span class="string">&quot;align_vertically_bottom_active&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_vertically_center&quot;</span>, <span class="string">&quot;align_vertically_center_active&quot;</span>, <span class="string">&quot;align_vertically_top&quot;</span>,</span><br><span class="line">            <span class="string">&quot;align_vertically_top_active&quot;</span>, <span class="string">&quot;d_align_horizontally&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_align_horizontally_center&quot;</span>, <span class="string">&quot;d_align_horizontally_center_active&quot;</span>, <span class="string">&quot;d_align_horizontally_left&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_align_horizontally_left_active&quot;</span>, <span class="string">&quot;d_align_horizontally_right&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_align_horizontally_right_active&quot;</span>, <span class="string">&quot;d_align_vertically&quot;</span>, <span class="string">&quot;d_align_vertically_bottom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_align_vertically_bottom_active&quot;</span>, <span class="string">&quot;d_align_vertically_center&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_align_vertically_center_active&quot;</span>, <span class="string">&quot;d_align_vertically_top&quot;</span>, <span class="string">&quot;d_align_vertically_top_active&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HorizontalSplit&quot;</span>, <span class="string">&quot;icon dropdown&quot;</span>,</span><br><span class="line">            <span class="string">&quot;icon dropdown@2x&quot;</span>, <span class="string">&quot;Import&quot;</span>, <span class="string">&quot;Import@2x&quot;</span>, <span class="string">&quot;InspectorLock&quot;</span>, <span class="string">&quot;Invalid&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Invalid@2x&quot;</span>, <span class="string">&quot;JointAngularLimits&quot;</span>, <span class="string">&quot;KnobCShape&quot;</span>, <span class="string">&quot;KnobCShapeMini&quot;</span>, <span class="string">&quot;leftBracket&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Lighting&quot;</span>, <span class="string">&quot;Lighting@2x&quot;</span>, <span class="string">&quot;LightmapEditor.WindowTitle&quot;</span>, <span class="string">&quot;LightmapEditor.WindowTitle@2x&quot;</span>, <span class="string">&quot;Lightmapping&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_greenLight&quot;</span>, <span class="string">&quot;d_lightOff&quot;</span>, <span class="string">&quot;d_lightRim&quot;</span>, <span class="string">&quot;d_orangeLight&quot;</span>, <span class="string">&quot;d_redLight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;greenLight&quot;</span>, <span class="string">&quot;lightOff&quot;</span>, <span class="string">&quot;lightRim&quot;</span>, <span class="string">&quot;orangeLight&quot;</span>, <span class="string">&quot;redLight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Linked&quot;</span>, <span class="string">&quot;Linked@2x&quot;</span>, <span class="string">&quot;LockIcon-On&quot;</span>, <span class="string">&quot;LockIcon&quot;</span>, <span class="string">&quot;loop&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MainStageView&quot;</span>, <span class="string">&quot;MainStageView@2x&quot;</span>, <span class="string">&quot;Mirror&quot;</span>, <span class="string">&quot;monologo&quot;</span>, <span class="string">&quot;MoreOptions&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MoreOptions@2x&quot;</span>, <span class="string">&quot;MoveTool on&quot;</span>, <span class="string">&quot;MoveTool On@2x&quot;</span>, <span class="string">&quot;MoveTool&quot;</span>, <span class="string">&quot;MoveTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Navigation&quot;</span>, <span class="string">&quot;Occlusion&quot;</span>, <span class="string">&quot;Occlusion@2x&quot;</span>, <span class="string">&quot;Package Manager&quot;</span>, <span class="string">&quot;Package Manager@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PackageBadgeDelete&quot;</span>, <span class="string">&quot;PackageBadgeNew&quot;</span>, <span class="string">&quot;Add-Available&quot;</span>, <span class="string">&quot;Add-Available@2x&quot;</span>, <span class="string">&quot;Download-Available&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Download-Available@2x&quot;</span>, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Error@2x&quot;</span>, <span class="string">&quot;Import-Available&quot;</span>, <span class="string">&quot;Import-Available@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;In-Development&quot;</span>, <span class="string">&quot;In-Development@2x&quot;</span>, <span class="string">&quot;Installed&quot;</span>, <span class="string">&quot;Installed@2x&quot;</span>, <span class="string">&quot;Loading&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Loading@2x&quot;</span>, <span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;Refresh@2x&quot;</span>, <span class="string">&quot;Update-Available&quot;</span>, <span class="string">&quot;Update-Available@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Warning@2x&quot;</span>, <span class="string">&quot;Add-Available&quot;</span>, <span class="string">&quot;Add-Available@2x&quot;</span>, <span class="string">&quot;Download-Available&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Download-Available@2x&quot;</span>, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Error@2x&quot;</span>, <span class="string">&quot;Import-Available&quot;</span>, <span class="string">&quot;Import-Available@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;In-Development&quot;</span>, <span class="string">&quot;In-Development@2x&quot;</span>, <span class="string">&quot;Installed&quot;</span>, <span class="string">&quot;Installed@2x&quot;</span>, <span class="string">&quot;Loading&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Loading@2x&quot;</span>, <span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;Refresh@2x&quot;</span>, <span class="string">&quot;Update-Available&quot;</span>, <span class="string">&quot;Update-Available@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Warning@2x&quot;</span>, <span class="string">&quot;Particle Effect&quot;</span>, <span class="string">&quot;ParticleShapeTool On&quot;</span>, <span class="string">&quot;ParticleShapeTool On@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParticleShapeTool On@3x&quot;</span>, <span class="string">&quot;ParticleShapeTool On@4x&quot;</span>, <span class="string">&quot;ParticleShapeTool&quot;</span>, <span class="string">&quot;ParticleShapeTool@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParticleShapeTool@3x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParticleShapeTool@4x&quot;</span>, <span class="string">&quot;PauseButton On&quot;</span>, <span class="string">&quot;PauseButton On@2x&quot;</span>, <span class="string">&quot;PauseButton&quot;</span>, <span class="string">&quot;PauseButton@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PlayButton On&quot;</span>, <span class="string">&quot;PlayButton On@2x&quot;</span>, <span class="string">&quot;PlayButton&quot;</span>, <span class="string">&quot;PlayButton@2x&quot;</span>, <span class="string">&quot;PlayButtonProfile On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PlayButtonProfile&quot;</span>, <span class="string">&quot;playLoopOff&quot;</span>, <span class="string">&quot;playLoopOn&quot;</span>, <span class="string">&quot;playSpeed&quot;</span>, <span class="string">&quot;preAudioAutoPlayOff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;preAudioAutoPlayOff@2x&quot;</span>, <span class="string">&quot;preAudioAutoPlayOn&quot;</span>, <span class="string">&quot;preAudioLoopOff&quot;</span>, <span class="string">&quot;preAudioLoopOff@2x&quot;</span>, <span class="string">&quot;preAudioLoopOn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;preAudioPlayOff&quot;</span>, <span class="string">&quot;preAudioPlayOn&quot;</span>, <span class="string">&quot;PreMatCube&quot;</span>, <span class="string">&quot;PreMatCube@2x&quot;</span>, <span class="string">&quot;PreMatCylinder&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreMatCylinder@2x&quot;</span>, <span class="string">&quot;PreMatLight0&quot;</span>, <span class="string">&quot;PreMatLight0@2x&quot;</span>, <span class="string">&quot;PreMatLight1&quot;</span>, <span class="string">&quot;PreMatLight1@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreMatQuad&quot;</span>, <span class="string">&quot;PreMatQuad@2x&quot;</span>, <span class="string">&quot;PreMatSphere&quot;</span>, <span class="string">&quot;PreMatSphere@2x&quot;</span>, <span class="string">&quot;PreMatTorus&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreMatTorus@2x&quot;</span>, <span class="string">&quot;Preset.Context&quot;</span>, <span class="string">&quot;Preset.Context@2x&quot;</span>, <span class="string">&quot;PreTexA&quot;</span>, <span class="string">&quot;PreTexA@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreTexB&quot;</span>, <span class="string">&quot;PreTexB@2x&quot;</span>, <span class="string">&quot;PreTexG&quot;</span>, <span class="string">&quot;PreTexG@2x&quot;</span>, <span class="string">&quot;PreTexR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreTexR@2x&quot;</span>, <span class="string">&quot;PreTexRGB&quot;</span>, <span class="string">&quot;PreTexRGB@2x&quot;</span>, <span class="string">&quot;PreTextureAlpha&quot;</span>, <span class="string">&quot;PreTextureArrayFirstSlice&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreTextureArrayLastSlice&quot;</span>, <span class="string">&quot;PreTextureMipMapHigh&quot;</span>, <span class="string">&quot;PreTextureMipMapLow&quot;</span>, <span class="string">&quot;PreTextureRGB&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreviewPackageInUse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PreviewPackageInUse@2x&quot;</span>, <span class="string">&quot;AreaLight Gizmo&quot;</span>, <span class="string">&quot;AreaLight Icon&quot;</span>, <span class="string">&quot;Assembly Icon&quot;</span>, <span class="string">&quot;AssetStore Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioMixerView Icon&quot;</span>, <span class="string">&quot;AudioSource Gizmo&quot;</span>, <span class="string">&quot;boo Script Icon&quot;</span>, <span class="string">&quot;Camera Gizmo&quot;</span>, <span class="string">&quot;CGProgram Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ChorusFilter Icon&quot;</span>, <span class="string">&quot;CollabChanges Icon&quot;</span>, <span class="string">&quot;CollabChangesConflict Icon&quot;</span>, <span class="string">&quot;CollabChangesDeleted Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CollabConflict Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CollabCreate Icon&quot;</span>, <span class="string">&quot;CollabDeleted Icon&quot;</span>, <span class="string">&quot;CollabEdit Icon&quot;</span>, <span class="string">&quot;CollabExclude Icon&quot;</span>, <span class="string">&quot;CollabMoved Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cs Script Icon&quot;</span>, <span class="string">&quot;d_AreaLight Icon&quot;</span>, <span class="string">&quot;d_Assembly Icon&quot;</span>, <span class="string">&quot;d_AssetStore Icon&quot;</span>, <span class="string">&quot;d_AudioMixerView Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_boo Script Icon&quot;</span>, <span class="string">&quot;d_CGProgram Icon&quot;</span>, <span class="string">&quot;d_CollabChanges Icon&quot;</span>, <span class="string">&quot;d_CollabChangesConflict Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CollabChangesDeleted Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CollabConflict Icon&quot;</span>, <span class="string">&quot;d_CollabCreate Icon&quot;</span>, <span class="string">&quot;d_CollabDeleted Icon&quot;</span>, <span class="string">&quot;d_CollabEdit Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CollabExclude Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CollabMoved Icon&quot;</span>, <span class="string">&quot;d_cs Script Icon&quot;</span>, <span class="string">&quot;d_DirectionalLight Icon&quot;</span>, <span class="string">&quot;d_Favorite Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Favorite On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Folder Icon&quot;</span>, <span class="string">&quot;d_FolderEmpty Icon&quot;</span>, <span class="string">&quot;d_FolderEmpty On Icon&quot;</span>, <span class="string">&quot;d_FolderFavorite Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_FolderFavorite On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_FolderOpened Icon&quot;</span>, <span class="string">&quot;d_GridLayoutGroup Icon&quot;</span>, <span class="string">&quot;d_HorizontalLayoutGroup Icon&quot;</span>, <span class="string">&quot;d_Js Script Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_LightingDataAssetParent Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Microphone Icon&quot;</span>, <span class="string">&quot;d_Prefab Icon&quot;</span>, <span class="string">&quot;d_Prefab On Icon&quot;</span>, <span class="string">&quot;d_PrefabModel Icon&quot;</span>, <span class="string">&quot;d_PrefabModel On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PrefabVariant Icon&quot;</span>, <span class="string">&quot;d_PrefabVariant On Icon&quot;</span>, <span class="string">&quot;d_RaycastCollider Icon&quot;</span>, <span class="string">&quot;d_Search Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Spotlight Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_VerticalLayoutGroup Icon&quot;</span>, <span class="string">&quot;DefaultSlate Icon&quot;</span>, <span class="string">&quot;DirectionalLight Gizmo&quot;</span>, <span class="string">&quot;DirectionalLight Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DiscLight Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dll Script Icon&quot;</span>, <span class="string">&quot;EchoFilter Icon&quot;</span>, <span class="string">&quot;Favorite Icon&quot;</span>, <span class="string">&quot;Favorite On Icon&quot;</span>, <span class="string">&quot;Folder Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Folder On Icon&quot;</span>, <span class="string">&quot;FolderEmpty Icon&quot;</span>, <span class="string">&quot;FolderEmpty On Icon&quot;</span>, <span class="string">&quot;FolderFavorite Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FolderFavorite On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FolderOpened Icon&quot;</span>, <span class="string">&quot;FolderOpened On Icon&quot;</span>, <span class="string">&quot;GameManager Icon&quot;</span>, <span class="string">&quot;GridBrush Icon&quot;</span>, <span class="string">&quot;HighPassFilter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HorizontalLayoutGroup Icon&quot;</span>, <span class="string">&quot;Js Script Icon&quot;</span>, <span class="string">&quot;LensFlare Gizmo&quot;</span>, <span class="string">&quot;LightingDataAssetParent Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LightProbeGroup Gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LightProbeProxyVolume Gizmo&quot;</span>, <span class="string">&quot;LowPassFilter Icon&quot;</span>, <span class="string">&quot;Main Light Gizmo&quot;</span>, <span class="string">&quot;MetaFile Icon&quot;</span>, <span class="string">&quot;Microphone Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MuscleClip Icon&quot;</span>, <span class="string">&quot;ParticleSystem Gizmo&quot;</span>, <span class="string">&quot;ParticleSystemForceField Gizmo&quot;</span>, <span class="string">&quot;PointLight Gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Prefab Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Prefab On Icon&quot;</span>, <span class="string">&quot;PrefabModel Icon&quot;</span>, <span class="string">&quot;PrefabModel On Icon&quot;</span>, <span class="string">&quot;PrefabOverlayAdded Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PrefabOverlayModified Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PrefabOverlayRemoved Icon&quot;</span>, <span class="string">&quot;PrefabVariant Icon&quot;</span>, <span class="string">&quot;PrefabVariant On Icon&quot;</span>, <span class="string">&quot;Projector Gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RaycastCollider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ReflectionProbe Gizmo&quot;</span>, <span class="string">&quot;ReverbFilter Icon&quot;</span>, <span class="string">&quot;SceneSet Icon&quot;</span>, <span class="string">&quot;Search Icon&quot;</span>, <span class="string">&quot;Search On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SoftlockProjectBrowser Icon&quot;</span>, <span class="string">&quot;SpeedTreeModel Icon&quot;</span>, <span class="string">&quot;SpotLight Gizmo&quot;</span>, <span class="string">&quot;Spotlight Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpriteCollider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot0_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot10_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot11_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot12_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot13_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot14_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot15_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot1_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot2_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot3_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot4_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot5_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot6_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot7_pix16_gizmo&quot;</span>, <span class="string">&quot;sv_icon_dot8_pix16_gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot9_pix16_gizmo&quot;</span>, <span class="string">&quot;AnimatorController Icon&quot;</span>, <span class="string">&quot;AnimatorController On Icon&quot;</span>, <span class="string">&quot;AnimatorState Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimatorStateMachine Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimatorStateTransition Icon&quot;</span>, <span class="string">&quot;BlendTree Icon&quot;</span>, <span class="string">&quot;d_AnimatorController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnimatorController On Icon&quot;</span>, <span class="string">&quot;d_AnimatorState Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnimatorStateMachine Icon&quot;</span>, <span class="string">&quot;d_AnimatorStateTransition Icon&quot;</span>, <span class="string">&quot;d_BlendTree Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimationWindowEvent Icon&quot;</span>, <span class="string">&quot;AudioMixerController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioMixerController On Icon&quot;</span>, <span class="string">&quot;d_AudioMixerController Icon&quot;</span>, <span class="string">&quot;d_AudioMixerController On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioImporter Icon&quot;</span>, <span class="string">&quot;d_AudioImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_DefaultAsset Icon&quot;</span>, <span class="string">&quot;d_IHVImageFormatImporter Icon&quot;</span>, <span class="string">&quot;d_LightingDataAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_LightmapParameters Icon&quot;</span>, <span class="string">&quot;d_LightmapParameters On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ModelImporter Icon&quot;</span>, <span class="string">&quot;d_SceneAsset Icon&quot;</span>, <span class="string">&quot;d_ShaderImporter Icon&quot;</span>, <span class="string">&quot;d_TextScriptImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TextureImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TrueTypeFontImporter Icon&quot;</span>, <span class="string">&quot;DefaultAsset Icon&quot;</span>, <span class="string">&quot;EditorSettings Icon&quot;</span>, <span class="string">&quot;AnyStateNode Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnyStateNode Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HumanTemplate Icon&quot;</span>, <span class="string">&quot;IHVImageFormatImporter Icon&quot;</span>, <span class="string">&quot;LightingDataAsset Icon&quot;</span>, <span class="string">&quot;LightmapParameters Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LightmapParameters On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ModelImporter Icon&quot;</span>, <span class="string">&quot;Preset Icon&quot;</span>, <span class="string">&quot;SceneAsset Icon&quot;</span>, <span class="string">&quot;SceneAsset On Icon&quot;</span>, <span class="string">&quot;ShaderImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpeedTreeImporter Icon&quot;</span>, <span class="string">&quot;SubstanceArchive Icon&quot;</span>, <span class="string">&quot;TextScriptImporter Icon&quot;</span>, <span class="string">&quot;TextureImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TrueTypeFontImporter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SpriteAtlasAsset Icon&quot;</span>, <span class="string">&quot;d_SpriteAtlasImporter Icon&quot;</span>, <span class="string">&quot;SpriteAtlasAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpriteAtlasImporter Icon&quot;</span>, <span class="string">&quot;d_VisualEffectSubgraphBlock Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_VisualEffectSubgraphOperator Icon&quot;</span>, <span class="string">&quot;VisualEffectSubgraphBlock Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VisualEffectSubgraphOperator Icon&quot;</span>, <span class="string">&quot;VideoClipImporter Icon&quot;</span>, <span class="string">&quot;AssemblyDefinitionAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AssemblyDefinitionReferenceAsset Icon&quot;</span>, <span class="string">&quot;d_AssemblyDefinitionAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AssemblyDefinitionReferenceAsset Icon&quot;</span>, <span class="string">&quot;d_NavMeshAgent Icon&quot;</span>, <span class="string">&quot;d_NavMeshData Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NavMeshObstacle Icon&quot;</span>, <span class="string">&quot;d_OffMeshLink Icon&quot;</span>, <span class="string">&quot;NavMeshAgent Icon&quot;</span>, <span class="string">&quot;NavMeshData Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NavMeshObstacle Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;OffMeshLink Icon&quot;</span>, <span class="string">&quot;AnalyticsTracker Icon&quot;</span>, <span class="string">&quot;d_AnalyticsTracker Icon&quot;</span>, <span class="string">&quot;Animation Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimationClip Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimationClip On Icon&quot;</span>, <span class="string">&quot;AimConstraint Icon&quot;</span>, <span class="string">&quot;d_AimConstraint Icon&quot;</span>, <span class="string">&quot;d_LookAtConstraint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ParentConstraint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PositionConstraint Icon&quot;</span>, <span class="string">&quot;d_RotationConstraint Icon&quot;</span>, <span class="string">&quot;d_ScaleConstraint Icon&quot;</span>, <span class="string">&quot;LookAtConstraint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParentConstraint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PositionConstraint Icon&quot;</span>, <span class="string">&quot;RotationConstraint Icon&quot;</span>, <span class="string">&quot;ScaleConstraint Icon&quot;</span>, <span class="string">&quot;Animator Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimatorOverrideController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AnimatorOverrideController On Icon&quot;</span>, <span class="string">&quot;AreaEffector2D Icon&quot;</span>, <span class="string">&quot;AudioMixerGroup Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioMixerSnapshot Icon&quot;</span>, <span class="string">&quot;AudioSpatializerMicrosoft Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioMixerGroup Icon&quot;</span>, <span class="string">&quot;d_AudioMixerSnapshot Icon&quot;</span>, <span class="string">&quot;d_AudioSpatializerMicrosoft Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioChorusFilter Icon&quot;</span>, <span class="string">&quot;AudioClip Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioClip On Icon&quot;</span>, <span class="string">&quot;AudioDistortionFilter Icon&quot;</span>, <span class="string">&quot;AudioEchoFilter Icon&quot;</span>, <span class="string">&quot;AudioHighPassFilter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioListener Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AudioLowPassFilter Icon&quot;</span>, <span class="string">&quot;AudioReverbFilter Icon&quot;</span>, <span class="string">&quot;AudioReverbZone Icon&quot;</span>, <span class="string">&quot;AudioSource Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Avatar Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AvatarMask Icon&quot;</span>, <span class="string">&quot;AvatarMask On Icon&quot;</span>, <span class="string">&quot;BillboardAsset Icon&quot;</span>, <span class="string">&quot;BillboardRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BoxCollider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BoxCollider2D Icon&quot;</span>, <span class="string">&quot;BuoyancyEffector2D Icon&quot;</span>, <span class="string">&quot;Camera Icon&quot;</span>, <span class="string">&quot;Canvas Icon&quot;</span>, <span class="string">&quot;CanvasGroup Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CanvasRenderer Icon&quot;</span>, <span class="string">&quot;CapsuleCollider Icon&quot;</span>, <span class="string">&quot;CapsuleCollider2D Icon&quot;</span>, <span class="string">&quot;CharacterController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CharacterJoint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CircleCollider2D Icon&quot;</span>, <span class="string">&quot;Cloth Icon&quot;</span>, <span class="string">&quot;CompositeCollider2D Icon&quot;</span>, <span class="string">&quot;ComputeShader Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConfigurableJoint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConstantForce Icon&quot;</span>, <span class="string">&quot;ConstantForce2D Icon&quot;</span>, <span class="string">&quot;Cubemap Icon&quot;</span>, <span class="string">&quot;d_Animation Icon&quot;</span>, <span class="string">&quot;d_AnimationClip Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnimationClip On Icon&quot;</span>, <span class="string">&quot;d_Animator Icon&quot;</span>, <span class="string">&quot;d_AnimatorOverrideController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AnimatorOverrideController On Icon&quot;</span>, <span class="string">&quot;d_AreaEffector2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioChorusFilter Icon&quot;</span>, <span class="string">&quot;d_AudioClip Icon&quot;</span>, <span class="string">&quot;d_AudioClip On Icon&quot;</span>, <span class="string">&quot;d_AudioDistortionFilter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioEchoFilter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioHighPassFilter Icon&quot;</span>, <span class="string">&quot;d_AudioListener Icon&quot;</span>, <span class="string">&quot;d_AudioLowPassFilter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioReverbFilter Icon&quot;</span>, <span class="string">&quot;d_AudioReverbZone Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_AudioSource Icon&quot;</span>, <span class="string">&quot;d_Avatar Icon&quot;</span>, <span class="string">&quot;d_AvatarMask Icon&quot;</span>, <span class="string">&quot;d_AvatarMask On Icon&quot;</span>, <span class="string">&quot;d_BillboardAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_BillboardRenderer Icon&quot;</span>, <span class="string">&quot;d_BoxCollider Icon&quot;</span>, <span class="string">&quot;d_BoxCollider2D Icon&quot;</span>, <span class="string">&quot;d_BuoyancyEffector2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Camera Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Canvas Icon&quot;</span>, <span class="string">&quot;d_CanvasGroup Icon&quot;</span>, <span class="string">&quot;d_CanvasRenderer Icon&quot;</span>, <span class="string">&quot;d_CapsuleCollider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CapsuleCollider2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CharacterController Icon&quot;</span>, <span class="string">&quot;d_CharacterJoint Icon&quot;</span>, <span class="string">&quot;d_CircleCollider2D Icon&quot;</span>, <span class="string">&quot;d_Cloth Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_CompositeCollider2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ComputeShader Icon&quot;</span>, <span class="string">&quot;d_ConfigurableJoint Icon&quot;</span>, <span class="string">&quot;d_ConstantForce Icon&quot;</span>, <span class="string">&quot;d_ConstantForce2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Cubemap Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_DistanceJoint2D Icon&quot;</span>, <span class="string">&quot;d_EdgeCollider2D Icon&quot;</span>, <span class="string">&quot;d_FixedJoint Icon&quot;</span>, <span class="string">&quot;d_Flare Icon&quot;</span>, <span class="string">&quot;d_Flare On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_FlareLayer Icon&quot;</span>, <span class="string">&quot;d_Font Icon&quot;</span>, <span class="string">&quot;d_FrictionJoint2D Icon&quot;</span>, <span class="string">&quot;d_GameObject Icon&quot;</span>, <span class="string">&quot;d_Grid Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_GUISkin Icon&quot;</span>, <span class="string">&quot;d_GUISkin On Icon&quot;</span>, <span class="string">&quot;d_Halo Icon&quot;</span>, <span class="string">&quot;d_HingeJoint Icon&quot;</span>, <span class="string">&quot;d_HingeJoint2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Light Icon&quot;</span>, <span class="string">&quot;d_LightingSettings Icon&quot;</span>, <span class="string">&quot;d_LightProbeGroup Icon&quot;</span>, <span class="string">&quot;d_LightProbeProxyVolume Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_LightProbes Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_LineRenderer Icon&quot;</span>, <span class="string">&quot;d_LODGroup Icon&quot;</span>, <span class="string">&quot;d_Material Icon&quot;</span>, <span class="string">&quot;d_Material On Icon&quot;</span>, <span class="string">&quot;d_Mesh Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_MeshCollider Icon&quot;</span>, <span class="string">&quot;d_MeshFilter Icon&quot;</span>, <span class="string">&quot;d_MeshRenderer Icon&quot;</span>, <span class="string">&quot;d_Motion Icon&quot;</span>, <span class="string">&quot;d_OcclusionArea Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_OcclusionPortal Icon&quot;</span>, <span class="string">&quot;d_ParticleSystem Icon&quot;</span>, <span class="string">&quot;d_ParticleSystemForceField Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PhysicMaterial Icon&quot;</span>, <span class="string">&quot;d_PhysicMaterial On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PhysicsMaterial2D Icon&quot;</span>, <span class="string">&quot;d_PhysicsMaterial2D On Icon&quot;</span>, <span class="string">&quot;d_PlatformEffector2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PointEffector2D Icon&quot;</span>, <span class="string">&quot;d_PolygonCollider2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ProceduralMaterial Icon&quot;</span>, <span class="string">&quot;d_Projector Icon&quot;</span>, <span class="string">&quot;d_RayTracingShader Icon&quot;</span>, <span class="string">&quot;d_RectTransform Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ReflectionProbe Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_RelativeJoint2D Icon&quot;</span>, <span class="string">&quot;d_RenderTexture Icon&quot;</span>, <span class="string">&quot;d_RenderTexture On Icon&quot;</span>, <span class="string">&quot;d_Rigidbody Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Rigidbody2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ScriptableObject Icon&quot;</span>, <span class="string">&quot;d_ScriptableObject On Icon&quot;</span>, <span class="string">&quot;d_Shader Icon&quot;</span>, <span class="string">&quot;d_ShaderVariantCollection Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SkinnedMeshRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Skybox Icon&quot;</span>, <span class="string">&quot;d_SliderJoint2D Icon&quot;</span>, <span class="string">&quot;d_SphereCollider Icon&quot;</span>, <span class="string">&quot;d_SpringJoint Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SpringJoint2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Sprite Icon&quot;</span>, <span class="string">&quot;d_SpriteMask Icon&quot;</span>, <span class="string">&quot;d_SpriteRenderer Icon&quot;</span>, <span class="string">&quot;d_StreamingController Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SurfaceEffector2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TargetJoint2D Icon&quot;</span>, <span class="string">&quot;d_Terrain Icon&quot;</span>, <span class="string">&quot;d_TerrainCollider Icon&quot;</span>, <span class="string">&quot;d_TerrainData Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TextAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Texture Icon&quot;</span>, <span class="string">&quot;d_Texture2D Icon&quot;</span>, <span class="string">&quot;d_TrailRenderer Icon&quot;</span>, <span class="string">&quot;d_Transform Icon&quot;</span>, <span class="string">&quot;d_WheelCollider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_WheelJoint2D Icon&quot;</span>, <span class="string">&quot;d_WindZone Icon&quot;</span>, <span class="string">&quot;DistanceJoint2D Icon&quot;</span>, <span class="string">&quot;EdgeCollider2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_EventSystem Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_EventTrigger Icon&quot;</span>, <span class="string">&quot;d_HoloLensInputModule Icon&quot;</span>, <span class="string">&quot;d_Physics2DRaycaster Icon&quot;</span>, <span class="string">&quot;d_PhysicsRaycaster Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_StandaloneInputModule Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_TouchInputModule Icon&quot;</span>, <span class="string">&quot;EventSystem Icon&quot;</span>, <span class="string">&quot;EventTrigger Icon&quot;</span>, <span class="string">&quot;HoloLensInputModule Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Physics2DRaycaster Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PhysicsRaycaster Icon&quot;</span>, <span class="string">&quot;StandaloneInputModule Icon&quot;</span>, <span class="string">&quot;TouchInputModule Icon&quot;</span>, <span class="string">&quot;d_RaytracingShader Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RayTracingShader Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FixedJoint Icon&quot;</span>, <span class="string">&quot;FixedJoint2D Icon&quot;</span>, <span class="string">&quot;Flare Icon&quot;</span>, <span class="string">&quot;Flare On Icon&quot;</span>, <span class="string">&quot;FlareLayer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Font Icon&quot;</span>, <span class="string">&quot;Font On Icon&quot;</span>, <span class="string">&quot;FrictionJoint2D Icon&quot;</span>, <span class="string">&quot;GameObject Icon&quot;</span>, <span class="string">&quot;GameObject On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Grid Icon&quot;</span>, <span class="string">&quot;GUILayer Icon&quot;</span>, <span class="string">&quot;GUISkin Icon&quot;</span>, <span class="string">&quot;GUISkin On Icon&quot;</span>, <span class="string">&quot;GUIText Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GUITexture Icon&quot;</span>, <span class="string">&quot;Halo Icon&quot;</span>, <span class="string">&quot;HingeJoint Icon&quot;</span>, <span class="string">&quot;HingeJoint2D Icon&quot;</span>, <span class="string">&quot;LensFlare Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Light Icon&quot;</span>, <span class="string">&quot;LightingSettings Icon&quot;</span>, <span class="string">&quot;LightProbeGroup Icon&quot;</span>, <span class="string">&quot;LightProbeProxyVolume Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LightProbes Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LineRenderer Icon&quot;</span>, <span class="string">&quot;LODGroup Icon&quot;</span>, <span class="string">&quot;Material Icon&quot;</span>, <span class="string">&quot;Material On Icon&quot;</span>, <span class="string">&quot;Mesh Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MeshCollider Icon&quot;</span>, <span class="string">&quot;MeshFilter Icon&quot;</span>, <span class="string">&quot;MeshRenderer Icon&quot;</span>, <span class="string">&quot;Motion Icon&quot;</span>, <span class="string">&quot;MovieTexture Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NetworkAnimator Icon&quot;</span>, <span class="string">&quot;d_NetworkDiscovery Icon&quot;</span>, <span class="string">&quot;d_NetworkIdentity Icon&quot;</span>, <span class="string">&quot;d_NetworkLobbyManager Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NetworkLobbyPlayer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NetworkManager Icon&quot;</span>, <span class="string">&quot;d_NetworkManagerHUD Icon&quot;</span>, <span class="string">&quot;d_NetworkMigrationManager Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NetworkProximityChecker Icon&quot;</span>, <span class="string">&quot;d_NetworkStartPosition Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_NetworkTransform Icon&quot;</span>, <span class="string">&quot;d_NetworkTransformChild Icon&quot;</span>, <span class="string">&quot;d_NetworkTransformVisualizer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkAnimator Icon&quot;</span>, <span class="string">&quot;NetworkDiscovery Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkIdentity Icon&quot;</span>, <span class="string">&quot;NetworkLobbyManager Icon&quot;</span>, <span class="string">&quot;NetworkLobbyPlayer Icon&quot;</span>, <span class="string">&quot;NetworkManager Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkManagerHUD Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkMigrationManager Icon&quot;</span>, <span class="string">&quot;NetworkProximityChecker Icon&quot;</span>, <span class="string">&quot;NetworkStartPosition Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkTransform Icon&quot;</span>, <span class="string">&quot;NetworkTransformChild Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;NetworkTransformVisualizer Icon&quot;</span>, <span class="string">&quot;NetworkView Icon&quot;</span>, <span class="string">&quot;OcclusionArea Icon&quot;</span>, <span class="string">&quot;OcclusionPortal Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParticleSystem Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ParticleSystemForceField Icon&quot;</span>, <span class="string">&quot;PhysicMaterial Icon&quot;</span>, <span class="string">&quot;PhysicMaterial On Icon&quot;</span>, <span class="string">&quot;PhysicsMaterial2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PhysicsMaterial2D On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PlatformEffector2D Icon&quot;</span>, <span class="string">&quot;d_PlayableDirector Icon&quot;</span>, <span class="string">&quot;PlayableDirector Icon&quot;</span>, <span class="string">&quot;PointEffector2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PolygonCollider2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ProceduralMaterial Icon&quot;</span>, <span class="string">&quot;Projector Icon&quot;</span>, <span class="string">&quot;RayTracingShader Icon&quot;</span>, <span class="string">&quot;RectTransform Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ReflectionProbe Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RelativeJoint2D Icon&quot;</span>, <span class="string">&quot;d_SortingGroup Icon&quot;</span>, <span class="string">&quot;SortingGroup Icon&quot;</span>, <span class="string">&quot;RenderTexture Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RenderTexture On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Rigidbody Icon&quot;</span>, <span class="string">&quot;Rigidbody2D Icon&quot;</span>, <span class="string">&quot;ScriptableObject Icon&quot;</span>, <span class="string">&quot;ScriptableObject On Icon&quot;</span>, <span class="string">&quot;Shader Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ShaderVariantCollection Icon&quot;</span>, <span class="string">&quot;SkinnedMeshRenderer Icon&quot;</span>, <span class="string">&quot;Skybox Icon&quot;</span>, <span class="string">&quot;SliderJoint2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TrackedPoseDriver Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SphereCollider Icon&quot;</span>, <span class="string">&quot;SpringJoint Icon&quot;</span>, <span class="string">&quot;SpringJoint2D Icon&quot;</span>, <span class="string">&quot;Sprite Icon&quot;</span>, <span class="string">&quot;SpriteMask Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpriteRenderer Icon&quot;</span>, <span class="string">&quot;StreamingController Icon&quot;</span>, <span class="string">&quot;SurfaceEffector2D Icon&quot;</span>, <span class="string">&quot;TargetJoint2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Terrain Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainCollider Icon&quot;</span>, <span class="string">&quot;TerrainData Icon&quot;</span>, <span class="string">&quot;TextAsset Icon&quot;</span>, <span class="string">&quot;TextMesh Icon&quot;</span>, <span class="string">&quot;Texture Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Texture2D Icon&quot;</span>, <span class="string">&quot;d_Tile Icon&quot;</span>, <span class="string">&quot;d_Tilemap Icon&quot;</span>, <span class="string">&quot;d_TilemapCollider2D Icon&quot;</span>, <span class="string">&quot;d_TilemapRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tile Icon&quot;</span>, <span class="string">&quot;Tilemap Icon&quot;</span>, <span class="string">&quot;TilemapCollider2D Icon&quot;</span>, <span class="string">&quot;TilemapRenderer Icon&quot;</span>, <span class="string">&quot;d_SignalAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SignalEmitter Icon&quot;</span>, <span class="string">&quot;d_SignalReceiver Icon&quot;</span>, <span class="string">&quot;d_TimelineAsset Icon&quot;</span>, <span class="string">&quot;d_TimelineAsset On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SignalAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SignalEmitter Icon&quot;</span>, <span class="string">&quot;SignalReceiver Icon&quot;</span>, <span class="string">&quot;TimelineAsset Icon&quot;</span>, <span class="string">&quot;TimelineAsset On Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TrailRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Transform Icon&quot;</span>, <span class="string">&quot;d_SpriteAtlas Icon&quot;</span>, <span class="string">&quot;d_SpriteAtlas On Icon&quot;</span>, <span class="string">&quot;d_SpriteShapeRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpriteAtlas Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SpriteAtlas On Icon&quot;</span>, <span class="string">&quot;SpriteShapeRenderer Icon&quot;</span>, <span class="string">&quot;AspectRatioFitter Icon&quot;</span>, <span class="string">&quot;Button Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CanvasScaler Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ContentSizeFitter Icon&quot;</span>, <span class="string">&quot;d_AspectRatioFitter Icon&quot;</span>, <span class="string">&quot;d_Button Icon&quot;</span>, <span class="string">&quot;d_CanvasScaler Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ContentSizeFitter Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Dropdown Icon&quot;</span>, <span class="string">&quot;d_FreeformLayoutGroup Icon&quot;</span>, <span class="string">&quot;d_GraphicRaycaster Icon&quot;</span>, <span class="string">&quot;d_GridLayoutGroup Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_HorizontalLayoutGroup Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Image Icon&quot;</span>, <span class="string">&quot;d_InputField Icon&quot;</span>, <span class="string">&quot;d_LayoutElement Icon&quot;</span>, <span class="string">&quot;d_Mask Icon&quot;</span>, <span class="string">&quot;d_Outline Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_PhysicalResolution Icon&quot;</span>, <span class="string">&quot;d_PositionAsUV1 Icon&quot;</span>, <span class="string">&quot;d_RawImage Icon&quot;</span>, <span class="string">&quot;d_RectMask2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_Scrollbar Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ScrollRect Icon&quot;</span>, <span class="string">&quot;d_ScrollViewArea Icon&quot;</span>, <span class="string">&quot;d_Selectable Icon&quot;</span>, <span class="string">&quot;d_SelectionList Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SelectionListItem Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SelectionListTemplate Icon&quot;</span>, <span class="string">&quot;d_Shadow Icon&quot;</span>, <span class="string">&quot;d_Slider Icon&quot;</span>, <span class="string">&quot;d_Text Icon&quot;</span>, <span class="string">&quot;d_Toggle Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_ToggleGroup Icon&quot;</span>, <span class="string">&quot;d_VerticalLayoutGroup Icon&quot;</span>, <span class="string">&quot;Dropdown Icon&quot;</span>, <span class="string">&quot;FreeformLayoutGroup Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GraphicRaycaster Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GridLayoutGroup Icon&quot;</span>, <span class="string">&quot;HorizontalLayoutGroup Icon&quot;</span>, <span class="string">&quot;Image Icon&quot;</span>, <span class="string">&quot;InputField Icon&quot;</span>, <span class="string">&quot;LayoutElement Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Mask Icon&quot;</span>, <span class="string">&quot;Outline Icon&quot;</span>, <span class="string">&quot;PositionAsUV1 Icon&quot;</span>, <span class="string">&quot;RawImage Icon&quot;</span>, <span class="string">&quot;RectMask2D Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Scrollbar Icon&quot;</span>, <span class="string">&quot;ScrollRect Icon&quot;</span>, <span class="string">&quot;Selectable Icon&quot;</span>, <span class="string">&quot;Shadow Icon&quot;</span>, <span class="string">&quot;Slider Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Text Icon&quot;</span>, <span class="string">&quot;Toggle Icon&quot;</span>, <span class="string">&quot;ToggleGroup Icon&quot;</span>, <span class="string">&quot;VerticalLayoutGroup Icon&quot;</span>, <span class="string">&quot;d_StyleSheet Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_VisualTreeAsset Icon&quot;</span>, <span class="string">&quot;StyleSheet Icon&quot;</span>, <span class="string">&quot;VisualTreeAsset Icon&quot;</span>, <span class="string">&quot;d_VisualEffect Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_VisualEffectAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VisualEffect Icon&quot;</span>, <span class="string">&quot;VisualEffectAsset Icon&quot;</span>, <span class="string">&quot;d_VideoPlayer Icon&quot;</span>, <span class="string">&quot;VideoClip Icon&quot;</span>, <span class="string">&quot;VideoPlayer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VisualEffect Icon&quot;</span>, <span class="string">&quot;VisualEffectAsset Icon&quot;</span>, <span class="string">&quot;WheelCollider Icon&quot;</span>, <span class="string">&quot;WheelJoint2D Icon&quot;</span>, <span class="string">&quot;WindZone Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SpatialMappingCollider Icon&quot;</span>, <span class="string">&quot;SpatialMappingCollider Icon&quot;</span>, <span class="string">&quot;SpatialMappingRenderer Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;WorldAnchor Icon&quot;</span>, <span class="string">&quot;UssScript Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UxmlScript Icon&quot;</span>, <span class="string">&quot;VerticalLayoutGroup Icon&quot;</span>, <span class="string">&quot;VideoEffect Icon&quot;</span>, <span class="string">&quot;VisualEffect Gizmo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VisualEffectAsset Icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;WindZone Gizmo&quot;</span>, <span class="string">&quot;Profiler.Audio&quot;</span>, <span class="string">&quot;Profiler.Audio@2x&quot;</span>, <span class="string">&quot;Profiler.CPU&quot;</span>, <span class="string">&quot;Profiler.CPU@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.FirstFrame&quot;</span>, <span class="string">&quot;Profiler.GlobalIllumination&quot;</span>, <span class="string">&quot;Profiler.GlobalIllumination@2x&quot;</span>, <span class="string">&quot;Profiler.GPU&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.GPU@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.Instrumentation&quot;</span>, <span class="string">&quot;Profiler.LastFrame&quot;</span>, <span class="string">&quot;Profiler.Memory&quot;</span>, <span class="string">&quot;Profiler.Memory@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.NetworkMessages&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.NetworkMessages@2x&quot;</span>, <span class="string">&quot;Profiler.NetworkOperations&quot;</span>, <span class="string">&quot;Profiler.NetworkOperations@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.NextFrame&quot;</span>, <span class="string">&quot;Profiler.Physics&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.Physics2D&quot;</span>, <span class="string">&quot;Profiler.Physics2D@2x&quot;</span>, <span class="string">&quot;Profiler.Physics@2x&quot;</span>, <span class="string">&quot;Profiler.PrevFrame&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.Record&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.Rendering&quot;</span>, <span class="string">&quot;Profiler.Rendering@2x&quot;</span>, <span class="string">&quot;Profiler.UI&quot;</span>, <span class="string">&quot;Profiler.UI@2x&quot;</span>, <span class="string">&quot;Profiler.UIDetails&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Profiler.UIDetails@2x&quot;</span>, <span class="string">&quot;Profiler.Video&quot;</span>, <span class="string">&quot;Profiler.Video@2x&quot;</span>, <span class="string">&quot;ProfilerColumn.WarningCount&quot;</span>, <span class="string">&quot;Progress&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Progress@2x&quot;</span>, <span class="string">&quot;Project&quot;</span>, <span class="string">&quot;Project@2x&quot;</span>, <span class="string">&quot;Record Off&quot;</span>, <span class="string">&quot;Record Off@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Record On&quot;</span>, <span class="string">&quot;Record On@2x&quot;</span>, <span class="string">&quot;RectTool On&quot;</span>, <span class="string">&quot;RectTool On@2x&quot;</span>, <span class="string">&quot;RectTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RectTool@2x&quot;</span>, <span class="string">&quot;RectTransformBlueprint&quot;</span>, <span class="string">&quot;RectTransformRaw&quot;</span>, <span class="string">&quot;redGroove&quot;</span>, <span class="string">&quot;ReflectionProbeSelector&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ReflectionProbeSelector@2x&quot;</span>, <span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;Refresh@2x&quot;</span>, <span class="string">&quot;rightBracket&quot;</span>, <span class="string">&quot;RotateTool On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;RotateTool On@2x&quot;</span>, <span class="string">&quot;RotateTool&quot;</span>, <span class="string">&quot;RotateTool@2x&quot;</span>, <span class="string">&quot;RotateTool@4x&quot;</span>, <span class="string">&quot;SaveActive&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SaveAs&quot;</span>, <span class="string">&quot;SaveAs@2x&quot;</span>, <span class="string">&quot;SaveFromPlay&quot;</span>, <span class="string">&quot;SavePassive&quot;</span>, <span class="string">&quot;ScaleTool On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ScaleTool On@2x&quot;</span>, <span class="string">&quot;ScaleTool&quot;</span>, <span class="string">&quot;ScaleTool@2x&quot;</span>, <span class="string">&quot;SceneLoadIn&quot;</span>, <span class="string">&quot;SceneLoadOut&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_notpickable-mixed&quot;</span>, <span class="string">&quot;scenepicking_notpickable-mixed@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_notpickable-mixed_hover&quot;</span>, <span class="string">&quot;scenepicking_notpickable-mixed_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_notpickable&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_notpickable@2x&quot;</span>, <span class="string">&quot;scenepicking_notpickable_hover&quot;</span>, <span class="string">&quot;scenepicking_notpickable_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_pickable-mixed&quot;</span>, <span class="string">&quot;scenepicking_pickable-mixed@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_pickable-mixed_hover&quot;</span>, <span class="string">&quot;scenepicking_pickable-mixed_hover@2x&quot;</span>, <span class="string">&quot;scenepicking_pickable&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_pickable@2x&quot;</span>, <span class="string">&quot;scenepicking_pickable_hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenepicking_pickable_hover@2x&quot;</span>, <span class="string">&quot;SceneSave&quot;</span>, <span class="string">&quot;SceneSaveGrey&quot;</span>, <span class="string">&quot;SceneView2D&quot;</span>, <span class="string">&quot;SceneView2D@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SceneViewAlpha&quot;</span>, <span class="string">&quot;SceneViewAudio Off&quot;</span>, <span class="string">&quot;SceneViewAudio Off@2x&quot;</span>, <span class="string">&quot;SceneViewAudio&quot;</span>, <span class="string">&quot;SceneViewAudio@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SceneViewCamera&quot;</span>, <span class="string">&quot;SceneViewCamera@2x&quot;</span>, <span class="string">&quot;SceneViewFx&quot;</span>, <span class="string">&quot;SceneViewFX@2x&quot;</span>, <span class="string">&quot;SceneViewLighting Off&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SceneViewLighting Off@2x&quot;</span>, <span class="string">&quot;SceneViewLighting&quot;</span>, <span class="string">&quot;SceneViewLighting@2x&quot;</span>, <span class="string">&quot;SceneViewOrtho&quot;</span>, <span class="string">&quot;SceneViewRGB&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SceneViewTools&quot;</span>, <span class="string">&quot;SceneViewTools@2x&quot;</span>, <span class="string">&quot;SceneViewVisibility&quot;</span>, <span class="string">&quot;SceneViewVisibility@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_hidden-mixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_hidden-mixed@2x&quot;</span>, <span class="string">&quot;scenevis_hidden-mixed_hover&quot;</span>, <span class="string">&quot;scenevis_hidden-mixed_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_hidden&quot;</span>, <span class="string">&quot;scenevis_hidden@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_hidden_hover&quot;</span>, <span class="string">&quot;scenevis_hidden_hover@2x&quot;</span>, <span class="string">&quot;scenevis_scene_hover&quot;</span>, <span class="string">&quot;scenevis_scene_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_visible-mixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_visible-mixed@2x&quot;</span>, <span class="string">&quot;scenevis_visible-mixed_hover&quot;</span>, <span class="string">&quot;scenevis_visible-mixed_hover@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_visible&quot;</span>, <span class="string">&quot;scenevis_visible@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scenevis_visible_hover&quot;</span>, <span class="string">&quot;scenevis_visible_hover@2x&quot;</span>, <span class="string">&quot;ScrollShadow&quot;</span>, <span class="string">&quot;Settings&quot;</span>, <span class="string">&quot;Settings@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SettingsIcon&quot;</span>, <span class="string">&quot;SettingsIcon@2x&quot;</span>, <span class="string">&quot;alertDialog&quot;</span>, <span class="string">&quot;alertDialog@2x&quot;</span>, <span class="string">&quot;conflict-icon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;conflict-icon@2x&quot;</span>, <span class="string">&quot;d_GridAxisX&quot;</span>, <span class="string">&quot;d_GridAxisX@2x&quot;</span>, <span class="string">&quot;d_GridAxisY&quot;</span>, <span class="string">&quot;d_GridAxisY@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_GridAxisZ&quot;</span>, <span class="string">&quot;d_GridAxisZ@2x&quot;</span>, <span class="string">&quot;d_SceneViewSnap-Off&quot;</span>, <span class="string">&quot;d_SceneViewSnap-Off@2x&quot;</span>, <span class="string">&quot;d_SceneViewSnap-On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;d_SceneViewSnap-On@2x&quot;</span>, <span class="string">&quot;GridAxisX&quot;</span>, <span class="string">&quot;GridAxisX@2x&quot;</span>, <span class="string">&quot;GridAxisY&quot;</span>, <span class="string">&quot;GridAxisY@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GridAxisZ&quot;</span>, <span class="string">&quot;GridAxisZ@2x&quot;</span>, <span class="string">&quot;SceneViewSnap-Off&quot;</span>, <span class="string">&quot;SceneViewSnap-Off@2x&quot;</span>, <span class="string">&quot;SceneViewSnap-On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SceneViewSnap-On@2x&quot;</span>, <span class="string">&quot;SocialNetworks.FacebookShare&quot;</span>, <span class="string">&quot;SocialNetworks.LinkedInShare&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SocialNetworks.Tweet&quot;</span>, <span class="string">&quot;SocialNetworks.UDNLogo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SocialNetworks.UDNOpen&quot;</span>, <span class="string">&quot;SoftlockInline&quot;</span>, <span class="string">&quot;SpeedScale&quot;</span>, <span class="string">&quot;StateMachineEditor.ArrowTip&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StateMachineEditor.ArrowTipSelected&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StateMachineEditor.Background&quot;</span>, <span class="string">&quot;StateMachineEditor.State&quot;</span>, <span class="string">&quot;StateMachineEditor.StateHover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StateMachineEditor.StateSelected&quot;</span>, <span class="string">&quot;StateMachineEditor.StateSub&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StateMachineEditor.StateSubHover&quot;</span>, <span class="string">&quot;StateMachineEditor.StateSubSelected&quot;</span>, <span class="string">&quot;StateMachineEditor.UpButton&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StateMachineEditor.UpButtonHover&quot;</span>, <span class="string">&quot;StepButton On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StepButton On@2x&quot;</span>, <span class="string">&quot;StepButton&quot;</span>, <span class="string">&quot;StepButton@2x&quot;</span>, <span class="string">&quot;StepLeftButton-On&quot;</span>, <span class="string">&quot;StepLeftButton&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot0_sml&quot;</span>, <span class="string">&quot;sv_icon_dot10_sml&quot;</span>, <span class="string">&quot;sv_icon_dot11_sml&quot;</span>, <span class="string">&quot;sv_icon_dot12_sml&quot;</span>, <span class="string">&quot;sv_icon_dot13_sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot14_sml&quot;</span>, <span class="string">&quot;sv_icon_dot15_sml&quot;</span>, <span class="string">&quot;sv_icon_dot1_sml&quot;</span>, <span class="string">&quot;sv_icon_dot2_sml&quot;</span>, <span class="string">&quot;sv_icon_dot3_sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot4_sml&quot;</span>, <span class="string">&quot;sv_icon_dot5_sml&quot;</span>, <span class="string">&quot;sv_icon_dot6_sml&quot;</span>, <span class="string">&quot;sv_icon_dot7_sml&quot;</span>, <span class="string">&quot;sv_icon_dot8_sml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_dot9_sml&quot;</span>, <span class="string">&quot;sv_icon_name0&quot;</span>, <span class="string">&quot;sv_icon_name1&quot;</span>, <span class="string">&quot;sv_icon_name2&quot;</span>, <span class="string">&quot;sv_icon_name3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_icon_name4&quot;</span>, <span class="string">&quot;sv_icon_name5&quot;</span>, <span class="string">&quot;sv_icon_name6&quot;</span>, <span class="string">&quot;sv_icon_name7&quot;</span>, <span class="string">&quot;sv_icon_none&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_label_0&quot;</span>, <span class="string">&quot;sv_label_1&quot;</span>, <span class="string">&quot;sv_label_2&quot;</span>, <span class="string">&quot;sv_label_3&quot;</span>, <span class="string">&quot;sv_label_4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sv_label_5&quot;</span>, <span class="string">&quot;sv_label_6&quot;</span>, <span class="string">&quot;sv_label_7&quot;</span>, <span class="string">&quot;tab_next&quot;</span>, <span class="string">&quot;tab_next@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tab_prev&quot;</span>, <span class="string">&quot;tab_prev@2x&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolAdd&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolLower On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolLower&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolLowerAlt&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolPlants On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolPlants&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolPlantsAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolPlantsAlt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolRaise On&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolRaise&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSculpt On&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolSculpt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSetheight On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSetheight&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolSetheightAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSetheightAlt&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolSettings On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSettings&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSmoothHeight On&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolSmoothHeight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSplat On&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolSplat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSplatAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolSplatAlt&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolTrees On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolTrees&quot;</span>, <span class="string">&quot;TerrainInspector.TerrainToolTreesAlt On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TerrainInspector.TerrainToolTreesAlt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TestFailed&quot;</span>, <span class="string">&quot;TestIgnored&quot;</span>, <span class="string">&quot;TestInconclusive&quot;</span>, <span class="string">&quot;TestNormal&quot;</span>, <span class="string">&quot;TestPassed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TestStopwatch&quot;</span>, <span class="string">&quot;ToggleUVOverlay&quot;</span>, <span class="string">&quot;ToggleUVOverlay@2x&quot;</span>, <span class="string">&quot;Toolbar Minus&quot;</span>, <span class="string">&quot;Toolbar Minus@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Toolbar Plus More&quot;</span>, <span class="string">&quot;Toolbar Plus More@2x&quot;</span>, <span class="string">&quot;Toolbar Plus&quot;</span>, <span class="string">&quot;Toolbar Plus@2x&quot;</span>, <span class="string">&quot;ToolHandleCenter&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ToolHandleCenter@2x&quot;</span>, <span class="string">&quot;ToolHandleGlobal&quot;</span>, <span class="string">&quot;ToolHandleGlobal@2x&quot;</span>, <span class="string">&quot;ToolHandleLocal&quot;</span>, <span class="string">&quot;ToolHandleLocal@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ToolHandlePivot&quot;</span>, <span class="string">&quot;ToolHandlePivot@2x&quot;</span>, <span class="string">&quot;ToolsIcon&quot;</span>, <span class="string">&quot;tranp&quot;</span>, <span class="string">&quot;TransformTool On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TransformTool On@2x&quot;</span>, <span class="string">&quot;TransformTool&quot;</span>, <span class="string">&quot;TransformTool@2x&quot;</span>, <span class="string">&quot;tree_icon&quot;</span>, <span class="string">&quot;tree_icon_branch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tree_icon_branch_frond&quot;</span>, <span class="string">&quot;tree_icon_frond&quot;</span>, <span class="string">&quot;tree_icon_leaf&quot;</span>, <span class="string">&quot;TreeEditor.AddBranches&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.AddLeaves&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Branch On&quot;</span>, <span class="string">&quot;TreeEditor.Branch&quot;</span>, <span class="string">&quot;TreeEditor.BranchFreeHand On&quot;</span>, <span class="string">&quot;TreeEditor.BranchFreeHand&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.BranchRotate On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.BranchRotate&quot;</span>, <span class="string">&quot;TreeEditor.BranchScale On&quot;</span>, <span class="string">&quot;TreeEditor.BranchScale&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.BranchTranslate On&quot;</span>, <span class="string">&quot;TreeEditor.BranchTranslate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Distribution On&quot;</span>, <span class="string">&quot;TreeEditor.Distribution&quot;</span>, <span class="string">&quot;TreeEditor.Duplicate&quot;</span>, <span class="string">&quot;TreeEditor.Geometry On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Geometry&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Leaf On&quot;</span>, <span class="string">&quot;TreeEditor.Leaf&quot;</span>, <span class="string">&quot;TreeEditor.LeafFreeHand On&quot;</span>, <span class="string">&quot;TreeEditor.LeafFreeHand&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.LeafRotate On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.LeafRotate&quot;</span>, <span class="string">&quot;TreeEditor.LeafScale On&quot;</span>, <span class="string">&quot;TreeEditor.LeafScale&quot;</span>, <span class="string">&quot;TreeEditor.LeafTranslate On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.LeafTranslate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Material On&quot;</span>, <span class="string">&quot;TreeEditor.Material&quot;</span>, <span class="string">&quot;TreeEditor.Refresh&quot;</span>, <span class="string">&quot;TreeEditor.Trash&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Wind On&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TreeEditor.Wind&quot;</span>, <span class="string">&quot;UnityEditor.AnimationWindow&quot;</span>, <span class="string">&quot;UnityEditor.AnimationWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.ConsoleWindow&quot;</span>, <span class="string">&quot;UnityEditor.ConsoleWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.DebugInspectorWindow&quot;</span>, <span class="string">&quot;UnityEditor.FindDependencies&quot;</span>, <span class="string">&quot;UnityEditor.GameView&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.GameView@2x&quot;</span>, <span class="string">&quot;UnityEditor.Graphs.AnimatorControllerTool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.Graphs.AnimatorControllerTool@2x&quot;</span>, <span class="string">&quot;UnityEditor.HierarchyWindow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.HierarchyWindow@2x&quot;</span>, <span class="string">&quot;UnityEditor.InspectorWindow&quot;</span>, <span class="string">&quot;UnityEditor.InspectorWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.ProfilerWindow&quot;</span>, <span class="string">&quot;UnityEditor.ProfilerWindow@2x&quot;</span>, <span class="string">&quot;UnityEditor.SceneHierarchyWindow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.SceneHierarchyWindow@2x&quot;</span>, <span class="string">&quot;UnityEditor.SceneView&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.SceneView@2x&quot;</span>, <span class="string">&quot;UnityEditor.Timeline.TimelineWindow&quot;</span>, <span class="string">&quot;UnityEditor.Timeline.TimelineWindow@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityEditor.VersionControl&quot;</span>, <span class="string">&quot;UnityLogo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UnityLogoLarge&quot;</span>, <span class="string">&quot;UnLinked&quot;</span>, <span class="string">&quot;UnLinked@2x&quot;</span>, <span class="string">&quot;UpArrow&quot;</span>, <span class="string">&quot;Valid&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Valid@2x&quot;</span>, <span class="string">&quot;vcs_change&quot;</span>, <span class="string">&quot;vcs_document&quot;</span>, <span class="string">&quot;vcs_incoming&quot;</span>, <span class="string">&quot;P4_AddedLocal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_AddedLocal@2x&quot;</span>, <span class="string">&quot;P4_AddedRemote&quot;</span>, <span class="string">&quot;P4_AddedRemote@2x&quot;</span>, <span class="string">&quot;P4_BlueLeftParenthesis&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_BlueLeftParenthesis@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_BlueRightParenthesis&quot;</span>, <span class="string">&quot;P4_BlueRightParenthesis@2x&quot;</span>, <span class="string">&quot;P4_CheckOutLocal&quot;</span>, <span class="string">&quot;P4_CheckOutLocal@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_CheckOutRemote&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_CheckOutRemote@2x&quot;</span>, <span class="string">&quot;P4_Conflicted&quot;</span>, <span class="string">&quot;P4_Conflicted@2x&quot;</span>, <span class="string">&quot;P4_DeletedLocal&quot;</span>, <span class="string">&quot;P4_DeletedLocal@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_DeletedRemote&quot;</span>, <span class="string">&quot;P4_DeletedRemote@2x&quot;</span>, <span class="string">&quot;P4_Local&quot;</span>, <span class="string">&quot;P4_Local@2x&quot;</span>, <span class="string">&quot;P4_LockedLocal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_LockedLocal@2x&quot;</span>, <span class="string">&quot;P4_LockedRemote&quot;</span>, <span class="string">&quot;P4_LockedRemote@2x&quot;</span>, <span class="string">&quot;P4_OutOfSync&quot;</span>, <span class="string">&quot;P4_OutOfSync@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_RedLeftParenthesis&quot;</span>, <span class="string">&quot;P4_RedLeftParenthesis@2x&quot;</span>, <span class="string">&quot;P4_RedRightParenthesis&quot;</span>, <span class="string">&quot;P4_RedRightParenthesis@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_Updating&quot;</span>,</span><br><span class="line">            <span class="string">&quot;P4_Updating@2x&quot;</span>, <span class="string">&quot;VerticalSplit&quot;</span>, <span class="string">&quot;ViewToolMove On&quot;</span>, <span class="string">&quot;ViewToolMove On@2x&quot;</span>, <span class="string">&quot;ViewToolMove&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ViewToolMove@2x&quot;</span>, <span class="string">&quot;ViewToolOrbit On&quot;</span>, <span class="string">&quot;ViewToolOrbit On@2x&quot;</span>, <span class="string">&quot;ViewToolOrbit&quot;</span>, <span class="string">&quot;ViewToolOrbit@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ViewToolZoom On&quot;</span>, <span class="string">&quot;ViewToolZoom On@2x&quot;</span>, <span class="string">&quot;ViewToolZoom&quot;</span>, <span class="string">&quot;ViewToolZoom@2x&quot;</span>, <span class="string">&quot;VisibilityOff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VisibilityOn&quot;</span>, <span class="string">&quot;VUMeterTextureHorizontal&quot;</span>, <span class="string">&quot;VUMeterTextureVertical&quot;</span>, <span class="string">&quot;WaitSpin00&quot;</span>, <span class="string">&quot;WaitSpin01&quot;</span>,</span><br><span class="line">            <span class="string">&quot;WaitSpin02&quot;</span>, <span class="string">&quot;WaitSpin03&quot;</span>, <span class="string">&quot;WaitSpin04&quot;</span>, <span class="string">&quot;WaitSpin05&quot;</span>, <span class="string">&quot;WaitSpin06&quot;</span>,</span><br><span class="line">            <span class="string">&quot;WaitSpin07&quot;</span>, <span class="string">&quot;WaitSpin08&quot;</span>, <span class="string">&quot;WaitSpin09&quot;</span>, <span class="string">&quot;WaitSpin10&quot;</span>, <span class="string">&quot;WaitSpin11&quot;</span>,</span><br><span class="line">            <span class="string">&quot;WelcomeScreen.AssetStoreLogo&quot;</span>, <span class="string">&quot;winbtn_graph&quot;</span>, <span class="string">&quot;winbtn_graph_close_h&quot;</span>, <span class="string">&quot;winbtn_graph_max_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_graph_min_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_mac_close&quot;</span>, <span class="string">&quot;winbtn_mac_close@2x&quot;</span>, <span class="string">&quot;winbtn_mac_close_a&quot;</span>, <span class="string">&quot;winbtn_mac_close_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_mac_close_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_mac_close_h@2x&quot;</span>, <span class="string">&quot;winbtn_mac_inact&quot;</span>, <span class="string">&quot;winbtn_mac_inact@2x&quot;</span>, <span class="string">&quot;winbtn_mac_max&quot;</span>, <span class="string">&quot;winbtn_mac_max@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_mac_max_a&quot;</span>, <span class="string">&quot;winbtn_mac_max_a@2x&quot;</span>, <span class="string">&quot;winbtn_mac_max_h&quot;</span>, <span class="string">&quot;winbtn_mac_max_h@2x&quot;</span>, <span class="string">&quot;winbtn_mac_min&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_mac_min@2x&quot;</span>, <span class="string">&quot;winbtn_mac_min_a&quot;</span>, <span class="string">&quot;winbtn_mac_min_a@2x&quot;</span>, <span class="string">&quot;winbtn_mac_min_h&quot;</span>, <span class="string">&quot;winbtn_mac_min_h@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_close&quot;</span>, <span class="string">&quot;winbtn_win_close@2x&quot;</span>, <span class="string">&quot;winbtn_win_close_a&quot;</span>, <span class="string">&quot;winbtn_win_close_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_close_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_close_h@2x&quot;</span>, <span class="string">&quot;winbtn_win_max&quot;</span>, <span class="string">&quot;winbtn_win_max@2x&quot;</span>, <span class="string">&quot;winbtn_win_max_a&quot;</span>, <span class="string">&quot;winbtn_win_max_a@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_max_h&quot;</span>, <span class="string">&quot;winbtn_win_max_h@2x&quot;</span>, <span class="string">&quot;winbtn_win_min&quot;</span>, <span class="string">&quot;winbtn_win_min_a&quot;</span>, <span class="string">&quot;winbtn_win_min_h&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_rest&quot;</span>, <span class="string">&quot;winbtn_win_rest_a&quot;</span>, <span class="string">&quot;winbtn_win_rest_h&quot;</span>, <span class="string">&quot;winbtn_win_restore&quot;</span>, <span class="string">&quot;winbtn_win_restore@2x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;winbtn_win_restore_a&quot;</span>, <span class="string">&quot;winbtn_win_restore_a@2x&quot;</span>, <span class="string">&quot;winbtn_win_restore_h&quot;</span>, <span class="string">&quot;winbtn_win_restore_h@2x&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTween插件</title>
      <link href="/2021/05/28/0a837455f8d3/"/>
      <url>/2021/05/28/0a837455f8d3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-DOTween控制的是空物体问题（这个问题其他环境下似乎会报错）"><a href="#1-DOTween控制的是空物体问题（这个问题其他环境下似乎会报错）" class="headerlink" title="1.DOTween控制的是空物体问题（这个问题其他环境下似乎会报错）"></a>1.DOTween控制的是空物体问题（这个问题其他环境下似乎会报错）</h4><p>如果DOTween控制的是空物体，不会报错，还会将代码卡住，导致不会继续运行下去。具体如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameObject obj = <span class="literal">null</span>;</span><br><span class="line">obj.transform.DOMove(Vector3.one,<span class="number">1f</span>);</span><br><span class="line">Debug.Log(<span class="string">&quot;123&quot;</span>);<span class="comment">//这一句代码将不会被执行</span></span><br></pre></td></tr></table></figure><h4 id="2-DOTween-To的使用方法"><a href="#2-DOTween-To的使用方法" class="headerlink" title="2.DOTween.To的使用方法"></a>2.DOTween.To的使用方法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sample_1</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 currentValue ;<span class="comment">//当前位置</span></span><br><span class="line">    <span class="keyword">public</span> Vector3 targetValue;<span class="comment">//目标位置</span></span><br><span class="line">    <span class="keyword">public</span> Transform CubeTransform;<span class="comment">//获得Cube的引用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentValue = transform.position;</span><br><span class="line">        <span class="comment">//对一个变量做动画,当前值渐变到目标值(类似插值),值的变化速度是由快到慢.</span></span><br><span class="line">        <span class="comment">//currentValue 可以使float类型的或者其他的... ,目标值(targetValue)的类型要和currentValue保持一致</span></span><br><span class="line">        DOTween.To(() =&gt; currentValue, x =&gt; currentValue = x,targetValue, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shatter Tool插件</title>
      <link href="/2021/05/28/a7b2f802ab4d/"/>
      <url>/2021/05/28/a7b2f802ab4d/</url>
      
        <content type="html"><![CDATA[<h4 id="1-关于切面uv的问题"><a href="#1-关于切面uv的问题" class="headerlink" title="1.关于切面uv的问题"></a>1.关于切面uv的问题</h4><p> 由于是使用Target Uv Mapper脚本去管理切面的uv，脚本上有四个参数，其中最重要的两个参数如下:</p><p><code>Target Start</code>:等同于材质Shader里头的<code>Offset</code> 参数</p><p><code>Target Size</code>:等同于材质Shader里头的<code>Tilling</code>参数</p><p>如果想要<font color =red>适配uv范围</font>，将该材质赋予面片，调整材质到需要的区域占满面片时，将相应的<code>Offset</code>跟<code>Tilling</code>赋予<code>Target Start</code> 以及<code>Target Size</code></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#字典获取值方法的最优选择</title>
      <link href="/2021/05/28/4f3648d2d1f4/"/>
      <url>/2021/05/28/4f3648d2d1f4/</url>
      
        <content type="html"><![CDATA[<p>平常字典里头，想要获取值，有以下两种方式。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bundle = item.Value;</span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; list;</span><br><span class="line"><span class="keyword">if</span> (!dictionary.TryGetValue(bundle, <span class="keyword">out</span> list))</span><br><span class="line">&#123;</span><br><span class="line">    list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    dictionary[bundle] = list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!list.Contains(item.Key)) list.Add(item.Key);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">if</span>(!dictionary.ContainsKey(bundle))</span><br><span class="line">&#123;</span><br><span class="line">    dictionary[bundle] = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inEditorPaths = dictionary[bundle];</span><br><span class="line"><span class="keyword">if</span>(!inEditorPaths.Contains(item.Key))</span><br><span class="line">&#123;</span><br><span class="line">    inEditorPaths.Add(item.Key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查看源码进行比对：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">TryGetValue</span>(<span class="params">TKey key, <span class="keyword">out</span> TValue <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = FindEntry(key);</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = entries[i].<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">value</span> = <span class="literal">default</span>(TValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ContainsKey</span> (<span class="params"> TKey key</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FindEntry( key ) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TValue <span class="keyword">this</span>[TKey key] </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> i = FindEntry(key);</span><br><span class="line">        <span class="keyword">if</span>( i &gt;= <span class="number">0</span>) <span class="keyword">return</span> entires[i].<span class="keyword">value</span>;</span><br><span class="line">        ThrowHelper.ThrowKeyNotFoundException();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(TValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        Insert(key, <span class="keyword">value</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = red><strong>结论：TryGetValue性能更好。比较ContainsKey然后再根据key去取值，会走两次索引的操作。而TryGetValue只走一次索引操作。</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#用for遍历字典的方法</title>
      <link href="/2021/05/28/8c854f694dd3/"/>
      <url>/2021/05/28/8c854f694dd3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt;();</span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(dic.Keys);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> key = list[i];</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">value</span> = dic[key];</span><br><span class="line">    Debug.LogError(key+<span class="string">&quot;  &quot;</span>+ <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 实现枚举多选——Flags特性</title>
      <link href="/2021/05/28/1dd711531c9f/"/>
      <url>/2021/05/28/1dd711531c9f/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Flag  特性微软的解释是：指示可以将枚举作为位域（即一组标志）处理，FlagsAttribute属性就是枚举类型的一项可选属性，它的主要作用是可以将枚举作为位域处理(P.S.  C#不支持位域)。所谓位域是单个存储单元内相邻二进制位的集合。通过为枚举添加这个属性，可以改变枚举的一些行为来满足我们的需要。</p></li><li><p>.Net中的枚举一般有两种用法</p><p>(1). 表示唯一的元素序列，例如一周里的各天</p><p>(2)、表示多种的复合状态，这个时候一般需要为枚举加上[Flags]特性为标记</p></li><li><p>下面通过代码演示[Flags]特性的作用</p><p>(1)、首先是没有Flags特性的枚举</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是一个轴向限制枚举</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="built_in">enum</span> AxialLimit</span><br><span class="line">&#123;</span><br><span class="line">    X = <span class="number">1</span>,</span><br><span class="line">    Y = <span class="number">2</span>,</span><br><span class="line">    Z = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    AxialLimit axialLimit = AxialLimit.X | AxialLimit.Y | AxialLimit.Z;</span><br><span class="line">    Debug.LogError(<span class="string">&quot;当前选中枚举:&quot;</span> + axialLimit); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = "blue">输出：<code>当前选中枚举:7</code></font></p><p>(2)、然后是Flags特性的枚举</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是一个轴向限制枚举</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="built_in">enum</span> AxialLimit</span><br><span class="line">&#123;</span><br><span class="line">    X = <span class="number">1</span>,</span><br><span class="line">    Y = <span class="number">2</span>,</span><br><span class="line">    Z = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    AxialLimit axialLimit = AxialLimit.X | AxialLimit.Y | AxialLimit.Z;</span><br><span class="line">    Debug.LogError(<span class="string">&quot;当前选中枚举:&quot;</span> + axialLimit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = "blue">输出：<code>当前选中枚举:X,Y,Z</code></font></p></li><li><p>分析上面的代码，发现加上[Flags]特性之后，对于枚举的追加操作，没加特性的只是单纯的从值上的相加，而加了特性的则是枚举上的相加。这也是X&#x3D;1，Y&#x3D;2，Z&#x3D;4，的原因，因为两个状态的值相加不能等于其中任何一个的值，如果相等的话，那么[Flags]也就失去了使用它的意义。</p><p><font color = "red">这种用处很大，处理权限或者状态的问题，C#中使用[Flags]特性的枚举可以处理这些情况。</font></p></li><li><p>既然知道[Flags]特性标记的枚举可以充当复合状态使用，那么如何去判断这种情况呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasFlag</span> (<span class="params">Enum flag</span>)</span>;<span class="comment">//通过这个方法，就可以判断是否存在指定的枚举</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C#思考手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点乘与叉乘在游戏开发中的作用</title>
      <link href="/2021/05/28/7d7066deb91c/"/>
      <url>/2021/05/28/7d7066deb91c/</url>
      
        <content type="html"><![CDATA[<h2 id="一-点乘"><a href="#一-点乘" class="headerlink" title="一.点乘"></a>一.点乘</h2><ol><li><p><strong>点乘可以用来判断两个向量是否垂直，返回值为0，则垂直。</strong></p><img src="/2021/05/28/7d7066deb91c/1-1.png" class="" title="1-1"><img src="/2021/05/28/7d7066deb91c/1-2.png" class="" title="1-2"></li><li><p><strong>本质上是在判断两个向量相似程度（2个向量夹角越小，越相似）</strong></p></li><li><p><strong>计算敌人在你的正方向上行走的距离，利用的是计算一个向量在另一个向量上的投影分量大小（根据点乘几何意义）</strong></p></li><li><p><strong>得到2个向量的夹角，范围[0,180]，可以做怪物视角是否看到玩家，也可以用来计算敌人是否在攻击范围内。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vector3 A = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">Vector3 B = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">float</span> dotValue = Vector3.Dot(A.normalized, B.normalized);</span><br><span class="line"><span class="built_in">float</span> angle = Mathf.Acos(dotValue) * Mathf.Rad2Deg;</span><br><span class="line"><span class="built_in">float</span> angle2 = Vector3.Angle(A, B);</span><br><span class="line">Debug.Log(angle + <span class="string">&quot; &quot;</span> + angle2);</span><br></pre></td></tr></table></figure><p><font color = "blue">输出：<code>27.30163  27.30163</code></font></p></li><li><p><strong>判断目标在自己的前后方位，返回值为正时，目标在自己的前方；返回值为负时，在自己的后方；返回值为0时，在自己的正左方或者正右方。</strong></p><p><code>Vector3.Dot(transform.forward, target.position);</code></p></li><li><p><strong>模拟飞机飞行状态，当飞机与Vector3.up的点乘等于0，证明飞机平行飞行；当小于0的时候，证明飞机向下飞行；当大于0的时候，证明飞机向上飞行。</strong></p></li><li><p><strong>计算光照效果，点乘值越大，夹角越小，说明离光照中心越近，光照越大。</strong></p></li><li><p><strong>求夹角是钝角还是锐角。因为 Dot 的结果在 2 个向量均为单位向量时，其结果就为 cos 夹角，当锐角时，值大于 0，钝角时，值小与 0。</strong></p></li><li><p><strong>点乘的定义</strong></p><img src="/2021/05/28/7d7066deb91c/1-7.png" class="" title="1-7"></li></ol><h2 id="二-叉乘"><a href="#二-叉乘" class="headerlink" title="二.叉乘"></a>二.叉乘</h2><ol><li><p><strong>判断两个向量是否平行或着相交。返回值为0，则平行。</strong></p><img src="/2021/05/28/7d7066deb91c/1-3.png" class="" title="1-3"><img src="/2021/05/28/7d7066deb91c/1-4.png" class="" title="1-4"></li><li><p><strong>用于求平面法线。（叉乘的几何意义）</strong></p><p>Vector3.Cross 计算 2 个向量形成的面的法向量，其计算结果是一个向量,且不满足交换律 cross(a,b) !&#x3D; cross(b, a)这是因为这个法线有 2 个方向，ab 形成的平面把空间划分为 2 个部分<br>法线垂直 ab 形成的平面贯穿 2 个空间，法线是向量，具有方向，所以这时候 2 个方向都可以选，选定任意一个为法向量 n<br>绕法向量 n 顺时针旋转得到的角度为正方向，以 A 向量为起点，绕法向量 n 顺时针旋转到 B 向量，那么夹角从 0 开始增大，一直到 A 向量与 B 向量的夹角<br>绕法向量 n 逆时针旋转得到的角度为负方向，以 B 向量为起点，绕法向量 n 逆时针旋转到 A 向量，那么夹角从 0 开始减小，一直到 B 向量与 A 向量的夹角</p><img src="/2021/05/28/7d7066deb91c/1-5.png" class="" title="1-5"><img src="/2021/05/28/7d7066deb91c/1-6.png" class="" title="1-6"></li><li><p><strong>计算两个物体之间形成四边形的面积。</strong></p><p>​<font size = 5, color = "red"><strong>向量积的几何意义：axb的模是以a，b为邻边的平行四边形的面积。</strong></font></p></li><li><p><strong>得到2个向量的夹角：范围[-90,90]</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vector3 A = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">Vector3 B = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">float</span> crossValue = Vector3.Cross(A.normalized, B.normalized);</span><br><span class="line"><span class="built_in">float</span> angle = Mathf.Asin(crossValue.magnitude) * Mathf.Rad2Deg;</span><br><span class="line">Debug.Log(angle);</span><br></pre></td></tr></table></figure><p><font color = "blue">输出：<code>27.30162</code></font></p></li><li><p><strong>判断目标在自己的左右方位。返回值为正时，目标在自己右方；返回值为负时，目标在自己左方；返回值为0时，在自己正前方或着正后方。</strong></p><p><code>Vector3.Cross(transform.forward, target.position);</code></p></li><li><p><strong>将炮管的正方向向量与敌人位置减去炮管位置的向量进行叉乘，得到一个向量，炮管绕着此向量旋转，可以使炮管旋转至对准敌人，实现定位敌人的作用。</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 游戏开发中的物理数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发中的物理数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inspector面板参数右键菜单功能扩展</title>
      <link href="/2021/05/28/f8456fdbd8f5/"/>
      <url>/2021/05/28/f8456fdbd8f5/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>在Inspector面板对指定参数右键，显示右键菜单，如下图所示：</p><img src="/2021/05/28/f8456fdbd8f5/1-1.gif" class="" title="Inspector面板参数右键菜单功能扩展示意图"><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>关键类： <code>GenericMenu</code><br>关键方法： <code>AddItem</code>，<code>AddDisabledItem</code>，<code>AddSeparator</code>，<code>ShowAsContext</code><br>方法说明：<br>1.<code>AddItem</code>：添加右键选项</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：文本内容</span><br><span class="line">参数<span class="number">2</span>：是否显示菜单左边的“√”选项</span><br><span class="line">参数<span class="number">3</span>：点击当前选项后调用的回调</span><br><span class="line">参数<span class="number">4</span>：回调方法里使用的数据</span><br><span class="line">AddItem(GUIContent content,<span class="built_in">bool</span> <span class="keyword">on</span>,GenericMenu.MenuFunction2 func,<span class="built_in">object</span> userData);</span><br></pre></td></tr></table></figure><p>2.<code>AddDisabledItem</code>：添加右键选项（静止选中的状态）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：文本内容</span><br><span class="line">参数<span class="number">2</span>：是否显示菜单左边的“√”选项</span><br><span class="line">AddDisabledItem(GUIContent content, <span class="built_in">bool</span> <span class="keyword">on</span>);</span><br></pre></td></tr></table></figure><p>3.<code>AddSeparator</code>：分隔符添加</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>：分隔内容，建议默认为<span class="string">&quot;&quot;</span></span><br><span class="line">AddSeparator(<span class="built_in">string</span> path);</span><br></pre></td></tr></table></figure><p>4.<code>ShowAsContext</code>：右键显示菜单</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无参：显示右键菜单选项</span><br><span class="line">ShowAsContext();</span><br></pre></td></tr></table></figure><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><p>这里，我会扩展一个简单的Inspector面板功能：**<font color = "red"><code>AnimationCurve</code>数据的复制粘贴</font>**</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.首先创建脚本，命名为`CurvePropertyDrawer`，并且继承`PropertyDrawer`，简单的理解PropertyDrawer就是修改struct/class的外观的Editor类。</span></span><br><span class="line">[<span class="meta">CustomPropertyDrawer(typeof(AnimationCurve))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CurvePropertyDrawer</span> : <span class="title">PropertyDrawer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2.开始编写功能，先声明三个静态类型，主要用于存储`AnimationCurve`的数据。</span></span><br><span class="line">    <span class="comment">//之所以用静态类型，是为了能够在其他地方复制使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Keyframe[] _buffer;<span class="comment">//用来存储AnimationCurve每一个节点的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WrapMode _preWrapMode;<span class="comment">//用来存储曲线的模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WrapMode _postWrapMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.曲线绘制功能，编辑器上鼠标右键点击功能添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect pos, SerializedProperty prop, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//3-1.在Inspector上重新绘制出AnimationCurve面板</span></span><br><span class="line">        prop.animationCurveValue = EditorGUI.CurveField(pos,label, prop.animationCurveValue);</span><br><span class="line"><span class="comment">//3-2.获取当前的事件</span></span><br><span class="line">        Event curEvent = Event.current;</span><br><span class="line"><span class="comment">//3-3.如果当前鼠标坐标在当前绘制的面板上时调用，并且监听到右键点击事件</span></span><br><span class="line">        <span class="keyword">if</span> (pos.Contains(curEvent.mousePosition) &amp;&amp; curEvent.type == EventType.ContextClick)</span><br><span class="line">        &#123;</span><br><span class="line">            GenericMenu menu = <span class="keyword">new</span> GenericMenu();<span class="comment">//创建菜单对象</span></span><br><span class="line">            menu.AddItem(<span class="keyword">new</span> GUIContent(<span class="string">&quot;复制&quot;</span>), <span class="literal">false</span>, PasteAnimationCurve, prop);</span><br><span class="line">            <span class="keyword">if</span> (_buffer != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                menu.AddItem(<span class="keyword">new</span> GUIContent(<span class="string">&quot;粘贴&quot;</span>), <span class="literal">false</span>, CopyAnimationCurve, prop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果没有缓存数据，则显示灰色</span></span><br><span class="line">                menu.AddDisabledItem(<span class="keyword">new</span> GUIContent(<span class="string">&quot;粘贴&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            menu.AddSeparator(<span class="string">&quot;&quot;</span>);<span class="comment">//添加分隔符，可以不写</span></span><br><span class="line">menu.AddItem(<span class="keyword">new</span> GUIContent(<span class="string">&quot;测试/多选&quot;</span>),<span class="literal">false</span>,Test);</span><br><span class="line">            menu.ShowAsContext();<span class="comment">//显示右键菜单</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PasteAnimationCurve</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将当前面板的AnimationCurve数据存起来</span></span><br><span class="line">        SerializedProperty prop = (SerializedProperty)<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (prop != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _buffer = prop.animationCurveValue.keys;</span><br><span class="line">            _preWrapMode = prop.animationCurveValue.preWrapMode;</span><br><span class="line">            _postWrapMode = prop.animationCurveValue.postWrapMode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CopyAnimationCurve</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将存放的数据设置到新的面板上</span></span><br><span class="line">        SerializedProperty prop = (SerializedProperty)<span class="keyword">value</span>;</span><br><span class="line">        prop.animationCurveValue = <span class="keyword">new</span> AnimationCurve(_buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            preWrapMode = _preWrapMode, postWrapMode = _postWrapMode</span><br><span class="line">        &#125;;</span><br><span class="line">        prop.serializedObject.ApplyModifiedProperties();</span><br><span class="line">        <span class="comment">//场景脏标记，此时Hierarchy面板上的场景，会出现“*”号，按ctrl+s，应用改变</span></span><br><span class="line">        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> IMGUI Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity编辑器扩展 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
